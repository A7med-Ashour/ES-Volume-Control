

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Mon Sep 16 23:40:00 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	intentry,global,class=CODE,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	text25,local,class=CODE,merge=1,delta=2
    38                           	psect	text26,local,class=CODE,merge=1,delta=2
    39                           	psect	text27,local,class=CODE,merge=1,delta=2
    40                           	psect	text28,local,class=CODE,merge=1,delta=2
    41                           	psect	text29,local,class=CODE,merge=1,delta=2,group=1
    42                           	psect	text30,local,class=CODE,merge=1,delta=2
    43                           	dabs	1,0x7E,2
    44  0000                     
    45                           ; Version 2.05
    46                           ; Generated 20/12/2018 GMT
    47                           ; 
    48                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    49                           ; All rights reserved.
    50                           ; 
    51                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    52                           ; 
    53                           ; Redistribution and use in source and binary forms, with or without modification, are
    54                           ; permitted provided that the following conditions are met:
    55                           ; 
    56                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    57                           ;        conditions and the following disclaimer.
    58                           ; 
    59                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    60                           ;        of conditions and the following disclaimer in the documentation and/or other
    61                           ;        materials provided with the distribution.
    62                           ; 
    63                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    64                           ;        software without specific prior written permission.
    65                           ; 
    66                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    67                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    68                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    69                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    70                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    71                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    72                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    73                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    74                           ; 
    75                           ; 
    76                           ; Code-generator required, PIC16F877A Definitions
    77                           ; 
    78                           ; SFR Addresses
    79  0000                     	;# 
    80  0001                     	;# 
    81  0002                     	;# 
    82  0003                     	;# 
    83  0004                     	;# 
    84  0005                     	;# 
    85  0006                     	;# 
    86  0007                     	;# 
    87  0008                     	;# 
    88  0009                     	;# 
    89  000A                     	;# 
    90  000B                     	;# 
    91  000C                     	;# 
    92  000D                     	;# 
    93  000E                     	;# 
    94  000E                     	;# 
    95  000F                     	;# 
    96  0010                     	;# 
    97  0011                     	;# 
    98  0012                     	;# 
    99  0013                     	;# 
   100  0014                     	;# 
   101  0015                     	;# 
   102  0015                     	;# 
   103  0016                     	;# 
   104  0017                     	;# 
   105  0018                     	;# 
   106  0019                     	;# 
   107  001A                     	;# 
   108  001B                     	;# 
   109  001B                     	;# 
   110  001C                     	;# 
   111  001D                     	;# 
   112  001E                     	;# 
   113  001F                     	;# 
   114  0081                     	;# 
   115  0085                     	;# 
   116  0086                     	;# 
   117  0087                     	;# 
   118  0088                     	;# 
   119  0089                     	;# 
   120  008C                     	;# 
   121  008D                     	;# 
   122  008E                     	;# 
   123  0091                     	;# 
   124  0092                     	;# 
   125  0093                     	;# 
   126  0094                     	;# 
   127  0098                     	;# 
   128  0099                     	;# 
   129  009C                     	;# 
   130  009D                     	;# 
   131  009E                     	;# 
   132  009F                     	;# 
   133  010C                     	;# 
   134  010D                     	;# 
   135  010E                     	;# 
   136  010F                     	;# 
   137  018C                     	;# 
   138  018D                     	;# 
   139  0000                     	;# 
   140  0001                     	;# 
   141  0002                     	;# 
   142  0003                     	;# 
   143  0004                     	;# 
   144  0005                     	;# 
   145  0006                     	;# 
   146  0007                     	;# 
   147  0008                     	;# 
   148  0009                     	;# 
   149  000A                     	;# 
   150  000B                     	;# 
   151  000C                     	;# 
   152  000D                     	;# 
   153  000E                     	;# 
   154  000E                     	;# 
   155  000F                     	;# 
   156  0010                     	;# 
   157  0011                     	;# 
   158  0012                     	;# 
   159  0013                     	;# 
   160  0014                     	;# 
   161  0015                     	;# 
   162  0015                     	;# 
   163  0016                     	;# 
   164  0017                     	;# 
   165  0018                     	;# 
   166  0019                     	;# 
   167  001A                     	;# 
   168  001B                     	;# 
   169  001B                     	;# 
   170  001C                     	;# 
   171  001D                     	;# 
   172  001E                     	;# 
   173  001F                     	;# 
   174  0081                     	;# 
   175  0085                     	;# 
   176  0086                     	;# 
   177  0087                     	;# 
   178  0088                     	;# 
   179  0089                     	;# 
   180  008C                     	;# 
   181  008D                     	;# 
   182  008E                     	;# 
   183  0091                     	;# 
   184  0092                     	;# 
   185  0093                     	;# 
   186  0094                     	;# 
   187  0098                     	;# 
   188  0099                     	;# 
   189  009C                     	;# 
   190  009D                     	;# 
   191  009E                     	;# 
   192  009F                     	;# 
   193  010C                     	;# 
   194  010D                     	;# 
   195  010E                     	;# 
   196  010F                     	;# 
   197  018C                     	;# 
   198  018D                     	;# 
   199  0000                     	;# 
   200  0001                     	;# 
   201  0002                     	;# 
   202  0003                     	;# 
   203  0004                     	;# 
   204  0005                     	;# 
   205  0006                     	;# 
   206  0007                     	;# 
   207  0008                     	;# 
   208  0009                     	;# 
   209  000A                     	;# 
   210  000B                     	;# 
   211  000C                     	;# 
   212  000D                     	;# 
   213  000E                     	;# 
   214  000E                     	;# 
   215  000F                     	;# 
   216  0010                     	;# 
   217  0011                     	;# 
   218  0012                     	;# 
   219  0013                     	;# 
   220  0014                     	;# 
   221  0015                     	;# 
   222  0015                     	;# 
   223  0016                     	;# 
   224  0017                     	;# 
   225  0018                     	;# 
   226  0019                     	;# 
   227  001A                     	;# 
   228  001B                     	;# 
   229  001B                     	;# 
   230  001C                     	;# 
   231  001D                     	;# 
   232  001E                     	;# 
   233  001F                     	;# 
   234  0081                     	;# 
   235  0085                     	;# 
   236  0086                     	;# 
   237  0087                     	;# 
   238  0088                     	;# 
   239  0089                     	;# 
   240  008C                     	;# 
   241  008D                     	;# 
   242  008E                     	;# 
   243  0091                     	;# 
   244  0092                     	;# 
   245  0093                     	;# 
   246  0094                     	;# 
   247  0098                     	;# 
   248  0099                     	;# 
   249  009C                     	;# 
   250  009D                     	;# 
   251  009E                     	;# 
   252  009F                     	;# 
   253  010C                     	;# 
   254  010D                     	;# 
   255  010E                     	;# 
   256  010F                     	;# 
   257  018C                     	;# 
   258  018D                     	;# 
   259  0000                     	;# 
   260  0001                     	;# 
   261  0002                     	;# 
   262  0003                     	;# 
   263  0004                     	;# 
   264  0005                     	;# 
   265  0006                     	;# 
   266  0007                     	;# 
   267  0008                     	;# 
   268  0009                     	;# 
   269  000A                     	;# 
   270  000B                     	;# 
   271  000C                     	;# 
   272  000D                     	;# 
   273  000E                     	;# 
   274  000E                     	;# 
   275  000F                     	;# 
   276  0010                     	;# 
   277  0011                     	;# 
   278  0012                     	;# 
   279  0013                     	;# 
   280  0014                     	;# 
   281  0015                     	;# 
   282  0015                     	;# 
   283  0016                     	;# 
   284  0017                     	;# 
   285  0018                     	;# 
   286  0019                     	;# 
   287  001A                     	;# 
   288  001B                     	;# 
   289  001B                     	;# 
   290  001C                     	;# 
   291  001D                     	;# 
   292  001E                     	;# 
   293  001F                     	;# 
   294  0081                     	;# 
   295  0085                     	;# 
   296  0086                     	;# 
   297  0087                     	;# 
   298  0088                     	;# 
   299  0089                     	;# 
   300  008C                     	;# 
   301  008D                     	;# 
   302  008E                     	;# 
   303  0091                     	;# 
   304  0092                     	;# 
   305  0093                     	;# 
   306  0094                     	;# 
   307  0098                     	;# 
   308  0099                     	;# 
   309  009C                     	;# 
   310  009D                     	;# 
   311  009E                     	;# 
   312  009F                     	;# 
   313  010C                     	;# 
   314  010D                     	;# 
   315  010E                     	;# 
   316  010F                     	;# 
   317  018C                     	;# 
   318  018D                     	;# 
   319  0000                     	;# 
   320  0001                     	;# 
   321  0002                     	;# 
   322  0003                     	;# 
   323  0004                     	;# 
   324  0005                     	;# 
   325  0006                     	;# 
   326  0007                     	;# 
   327  0008                     	;# 
   328  0009                     	;# 
   329  000A                     	;# 
   330  000B                     	;# 
   331  000C                     	;# 
   332  000D                     	;# 
   333  000E                     	;# 
   334  000E                     	;# 
   335  000F                     	;# 
   336  0010                     	;# 
   337  0011                     	;# 
   338  0012                     	;# 
   339  0013                     	;# 
   340  0014                     	;# 
   341  0015                     	;# 
   342  0015                     	;# 
   343  0016                     	;# 
   344  0017                     	;# 
   345  0018                     	;# 
   346  0019                     	;# 
   347  001A                     	;# 
   348  001B                     	;# 
   349  001B                     	;# 
   350  001C                     	;# 
   351  001D                     	;# 
   352  001E                     	;# 
   353  001F                     	;# 
   354  0081                     	;# 
   355  0085                     	;# 
   356  0086                     	;# 
   357  0087                     	;# 
   358  0088                     	;# 
   359  0089                     	;# 
   360  008C                     	;# 
   361  008D                     	;# 
   362  008E                     	;# 
   363  0091                     	;# 
   364  0092                     	;# 
   365  0093                     	;# 
   366  0094                     	;# 
   367  0098                     	;# 
   368  0099                     	;# 
   369  009C                     	;# 
   370  009D                     	;# 
   371  009E                     	;# 
   372  009F                     	;# 
   373  010C                     	;# 
   374  010D                     	;# 
   375  010E                     	;# 
   376  010F                     	;# 
   377  018C                     	;# 
   378  018D                     	;# 
   379  0000                     	;# 
   380  0001                     	;# 
   381  0002                     	;# 
   382  0003                     	;# 
   383  0004                     	;# 
   384  0005                     	;# 
   385  0006                     	;# 
   386  0007                     	;# 
   387  0008                     	;# 
   388  0009                     	;# 
   389  000A                     	;# 
   390  000B                     	;# 
   391  000C                     	;# 
   392  000D                     	;# 
   393  000E                     	;# 
   394  000E                     	;# 
   395  000F                     	;# 
   396  0010                     	;# 
   397  0011                     	;# 
   398  0012                     	;# 
   399  0013                     	;# 
   400  0014                     	;# 
   401  0015                     	;# 
   402  0015                     	;# 
   403  0016                     	;# 
   404  0017                     	;# 
   405  0018                     	;# 
   406  0019                     	;# 
   407  001A                     	;# 
   408  001B                     	;# 
   409  001B                     	;# 
   410  001C                     	;# 
   411  001D                     	;# 
   412  001E                     	;# 
   413  001F                     	;# 
   414  0081                     	;# 
   415  0085                     	;# 
   416  0086                     	;# 
   417  0087                     	;# 
   418  0088                     	;# 
   419  0089                     	;# 
   420  008C                     	;# 
   421  008D                     	;# 
   422  008E                     	;# 
   423  0091                     	;# 
   424  0092                     	;# 
   425  0093                     	;# 
   426  0094                     	;# 
   427  0098                     	;# 
   428  0099                     	;# 
   429  009C                     	;# 
   430  009D                     	;# 
   431  009E                     	;# 
   432  009F                     	;# 
   433  010C                     	;# 
   434  010D                     	;# 
   435  010E                     	;# 
   436  010F                     	;# 
   437  018C                     	;# 
   438  018D                     	;# 
   439  0000                     	;# 
   440  0001                     	;# 
   441  0002                     	;# 
   442  0003                     	;# 
   443  0004                     	;# 
   444  0005                     	;# 
   445  0006                     	;# 
   446  0007                     	;# 
   447  0008                     	;# 
   448  0009                     	;# 
   449  000A                     	;# 
   450  000B                     	;# 
   451  000C                     	;# 
   452  000D                     	;# 
   453  000E                     	;# 
   454  000E                     	;# 
   455  000F                     	;# 
   456  0010                     	;# 
   457  0011                     	;# 
   458  0012                     	;# 
   459  0013                     	;# 
   460  0014                     	;# 
   461  0015                     	;# 
   462  0015                     	;# 
   463  0016                     	;# 
   464  0017                     	;# 
   465  0018                     	;# 
   466  0019                     	;# 
   467  001A                     	;# 
   468  001B                     	;# 
   469  001B                     	;# 
   470  001C                     	;# 
   471  001D                     	;# 
   472  001E                     	;# 
   473  001F                     	;# 
   474  0081                     	;# 
   475  0085                     	;# 
   476  0086                     	;# 
   477  0087                     	;# 
   478  0088                     	;# 
   479  0089                     	;# 
   480  008C                     	;# 
   481  008D                     	;# 
   482  008E                     	;# 
   483  0091                     	;# 
   484  0092                     	;# 
   485  0093                     	;# 
   486  0094                     	;# 
   487  0098                     	;# 
   488  0099                     	;# 
   489  009C                     	;# 
   490  009D                     	;# 
   491  009E                     	;# 
   492  009F                     	;# 
   493  010C                     	;# 
   494  010D                     	;# 
   495  010E                     	;# 
   496  010F                     	;# 
   497  018C                     	;# 
   498  018D                     	;# 
   499  001E                     _ADRESH	set	30
   500  009E                     _ADRESL	set	158
   501                           
   502                           	psect	strings
   503  06D3                     __pstrings:	
   504  06D3                     stringtab:	
   505  06D3                     __stringtab:	
   506                           
   507                           ;	String table - string pointers are 1 byte each
   508  06D3  1BFF               	btfsc	btemp+1,7
   509  06D4  2EDD               	ljmp	stringcode
   510  06D5  1383               	bcf	3,7
   511  06D6  187F               	btfsc	btemp+1,0
   512  06D7  1783               	bsf	3,7
   513  06D8  0800               	movf	0,w
   514  06D9  0A84               	incf	4,f
   515  06DA  1903               	skipnz
   516  06DB  0AFF               	incf	btemp+1,f
   517  06DC  0008               	return
   518  06DD                     stringcode:	
   519  06DD                     stringdir:	
   520  06DD  3006               	movlw	high stringdir
   521  06DE  008A               	movwf	10
   522  06DF  0804               	movf	4,w
   523  06E0  0A84               	incf	4,f
   524  06E1  0782               	addwf	2,f
   525  06E2                     __stringbase:	
   526  06E2  3400               	retlw	0
   527  06E3                     __end_of__stringtab:	
   528  06E3                     STR_1:	
   529  06E3  3456               	retlw	86	;'V'
   530  06E4  344F               	retlw	79	;'O'
   531  06E5  344C               	retlw	76	;'L'
   532  06E6  3455               	retlw	85	;'U'
   533  06E7  344D               	retlw	77	;'M'
   534  06E8  3445               	retlw	69	;'E'
   535  06E9  3420               	retlw	32	;' '
   536  06EA  343A               	retlw	58	;':'
   537  06EB  3420               	retlw	32	;' '
   538  06EC  3400               	retlw	0
   539                           
   540                           ; #config settings
   541  0000                     
   542                           	psect	cinit
   543  0015                     start_initialization:	
   544  0015                     __initialization:	
   545                           
   546                           ; Clear objects allocated to BANK0
   547  0015  1383               	bcf	3,7	;select IRP bank0
   548  0016  3020               	movlw	low __pbssBANK0
   549  0017  0084               	movwf	4
   550  0018  3041               	movlw	low (__pbssBANK0+33)
   551  0019  120A  118A  27CA   	fcall	clear_ram0
   552  001C                     end_of_initialization:	
   553                           ;End of C runtime variable initialization code
   554                           
   555  001C                     __end_of__initialization:	
   556  001C  0183               	clrf	3
   557  001D  120A  118A  2DA6   	ljmp	_main	;jump to C main() function
   558                           
   559                           	psect	bssBANK0
   560  0020                     __pbssBANK0:	
   561  0020                     _currentMode:	
   562  0020                     	ds	1
   563  0021                     DSP_update@DSP_counter:	
   564  0021                     	ds	1
   565  0022                     SLIDER_update@SLIDER_counter:	
   566  0022                     	ds	1
   567  0023                     DSP_update@str:	
   568  0023                     	ds	17
   569  0034                     Convert_IntToString@nStr:	
   570  0034                     	ds	11
   571  003F                     _SLIDER_val:	
   572  003F                     	ds	2
   573                           
   574                           	psect	clrtext
   575  07CA                     clear_ram0:	
   576                           ;	Called with FSR containing the base address, and
   577                           ;	W with the last address+1
   578                           
   579  07CA  0064               	clrwdt	;clear the watchdog before getting into this loop
   580  07CB                     clrloop0:	
   581  07CB  0180               	clrf	0	;clear RAM location pointed to by FSR
   582  07CC  0A84               	incf	4,f	;increment pointer
   583  07CD  0604               	xorwf	4,w	;XOR with final address
   584  07CE  1903               	btfsc	3,2	;have we reached the end yet?
   585  07CF  3400               	retlw	0	;all done for this memory range, return
   586  07D0  0604               	xorwf	4,w	;XOR again to restore value
   587  07D1  2FCB               	goto	clrloop0	;do the next byte
   588                           
   589                           	psect	cstackBANK1
   590  00A0                     __pcstackBANK1:	
   591  00A0                     ??_LCD_init:	
   592  00A0                     ?_LCD_goTo:	
   593                           ; 1 bytes @ 0x0
   594                           
   595  00A0                     timer0_init@p:	
   596                           ; 1 bytes @ 0x0
   597                           
   598  00A0                     LCD_goTo@col:	
   599                           ; 1 bytes @ 0x0
   600                           
   601                           
   602                           ; 1 bytes @ 0x0
   603  00A0                     	ds	1
   604  00A1                     ??_LCD_goTo:	
   605                           
   606                           ; 1 bytes @ 0x1
   607  00A1                     	ds	1
   608  00A2                     LCD_init@mode:	
   609                           
   610                           ; 1 bytes @ 0x2
   611  00A2                     	ds	1
   612  00A3                     LCD_goTo@line:	
   613                           
   614                           ; 1 bytes @ 0x3
   615  00A3                     	ds	1
   616  00A4                     LCD_goTo@address:	
   617                           
   618                           ; 1 bytes @ 0x4
   619  00A4                     	ds	1
   620  00A5                     ?_LCD_char:	
   621  00A5                     LCD_char@line:	
   622                           ; 1 bytes @ 0x5
   623                           
   624                           
   625                           ; 1 bytes @ 0x5
   626  00A5                     	ds	1
   627  00A6                     LCD_char@col:	
   628                           
   629                           ; 1 bytes @ 0x6
   630  00A6                     	ds	1
   631  00A7                     ??_LCD_char:	
   632                           
   633                           ; 1 bytes @ 0x7
   634  00A7                     	ds	1
   635  00A8                     LCD_char@ch:	
   636                           
   637                           ; 1 bytes @ 0x8
   638  00A8                     	ds	1
   639  00A9                     ?_LCD_str:	
   640  00A9                     LCD_str@str:	
   641                           ; 1 bytes @ 0x9
   642                           
   643                           
   644                           ; 2 bytes @ 0x9
   645  00A9                     	ds	2
   646  00AB                     LCD_str@line:	
   647                           
   648                           ; 1 bytes @ 0xB
   649  00AB                     	ds	1
   650  00AC                     LCD_str@col:	
   651                           
   652                           ; 1 bytes @ 0xC
   653  00AC                     	ds	1
   654  00AD                     ??_LCD_str:	
   655                           
   656                           ; 1 bytes @ 0xD
   657  00AD                     	ds	2
   658  00AF                     ??_main:	
   659                           
   660                           ; 1 bytes @ 0xF
   661  00AF                     	ds	1
   662                           
   663                           	psect	cstackCOMMON
   664  0070                     __pcstackCOMMON:	
   665  0070                     ?_LCD_init:	
   666  0070                     ?_timer0_reload:	
   667                           ; 1 bytes @ 0x0
   668                           
   669  0070                     ?_T0_timer_mode_state:	
   670                           ; 1 bytes @ 0x0
   671                           
   672  0070                     ?_timer0_set_prescaller:	
   673                           ; 1 bytes @ 0x0
   674                           
   675  0070                     ?_timer0_set_mode:	
   676                           ; 1 bytes @ 0x0
   677                           
   678  0070                     ?_timer0_ovf_setState:	
   679                           ; 1 bytes @ 0x0
   680                           
   681  0070                     ?_T0_counter_mode_state:	
   682                           ; 1 bytes @ 0x0
   683                           
   684  0070                     ?_LCD_cmd:	
   685                           ; 1 bytes @ 0x0
   686                           
   687  0070                     ?_LCD_out:	
   688                           ; 1 bytes @ 0x0
   689                           
   690  0070                     ?_ADC_init:	
   691                           ; 1 bytes @ 0x0
   692                           
   693  0070                     ?_ADC_read:	
   694                           ; 1 bytes @ 0x0
   695                           
   696  0070                     ?_SLIDER_init:	
   697                           ; 1 bytes @ 0x0
   698                           
   699  0070                     ?_SLIDER_getVal:	
   700                           ; 1 bytes @ 0x0
   701                           
   702  0070                     ??_SLIDER_getVal:	
   703                           ; 1 bytes @ 0x0
   704                           
   705  0070                     ?_SLIDER_update:	
   706                           ; 1 bytes @ 0x0
   707                           
   708  0070                     ?_DSP_init:	
   709                           ; 1 bytes @ 0x0
   710                           
   711  0070                     ?_DSP_update:	
   712                           ; 1 bytes @ 0x0
   713                           
   714  0070                     ?_main:	
   715                           ; 1 bytes @ 0x0
   716                           
   717  0070                     ?_ISR:	
   718                           ; 1 bytes @ 0x0
   719                           
   720  0070                     ?_LCD_latch:	
   721                           ; 1 bytes @ 0x0
   722                           
   723  0070                     ?i1_timer0_reload:	
   724                           ; 1 bytes @ 0x0
   725                           
   726  0070                     ??i1_timer0_reload:	
   727                           ; 1 bytes @ 0x0
   728                           
   729  0070                     ?i1_LCD_cmd:	
   730                           ; 1 bytes @ 0x0
   731                           
   732  0070                     ?i1_LCD_latch:	
   733                           ; 1 bytes @ 0x0
   734                           
   735  0070                     ??i1_LCD_latch:	
   736                           ; 1 bytes @ 0x0
   737                           
   738  0070                     ?i1_LCD_out:	
   739                           ; 1 bytes @ 0x0
   740                           
   741  0070                     ?___lwdiv:	
   742                           ; 1 bytes @ 0x0
   743                           
   744  0070                     ADC_read@pval:	
   745                           ; 2 bytes @ 0x0
   746                           
   747  0070                     SLIDER_getVal@pVal:	
   748                           ; 1 bytes @ 0x0
   749                           
   750  0070                     ___lwdiv@divisor:	
   751                           ; 1 bytes @ 0x0
   752                           
   753                           
   754                           ; 2 bytes @ 0x0
   755  0070                     	ds	1
   756  0071                     ??_ADC_read:	
   757  0071                     ??i1_LCD_out:	
   758                           ; 1 bytes @ 0x1
   759                           
   760  0071                     i1timer0_reload@val:	
   761                           ; 1 bytes @ 0x1
   762                           
   763                           
   764                           ; 1 bytes @ 0x1
   765  0071                     	ds	1
   766  0072                     ___lwdiv@dividend:	
   767                           
   768                           ; 2 bytes @ 0x2
   769  0072                     	ds	1
   770  0073                     ADC_read@ch:	
   771                           
   772                           ; 1 bytes @ 0x3
   773  0073                     	ds	1
   774  0074                     ??___lwdiv:	
   775  0074                     i1LCD_out@data:	
   776                           ; 1 bytes @ 0x4
   777                           
   778  0074                     _ADC_read$58:	
   779                           ; 1 bytes @ 0x4
   780                           
   781                           
   782                           ; 2 bytes @ 0x4
   783  0074                     	ds	1
   784  0075                     ??i1_LCD_cmd:	
   785  0075                     ___lwdiv@quotient:	
   786                           ; 1 bytes @ 0x5
   787                           
   788                           
   789                           ; 2 bytes @ 0x5
   790  0075                     	ds	1
   791  0076                     ??_SLIDER_update:	
   792  0076                     i1LCD_cmd@cmd:	
   793                           ; 1 bytes @ 0x6
   794                           
   795                           
   796                           ; 1 bytes @ 0x6
   797  0076                     	ds	1
   798  0077                     ?i1_LCD_goTo:	
   799  0077                     ___lwdiv@counter:	
   800                           ; 1 bytes @ 0x7
   801                           
   802  0077                     i1LCD_goTo@col:	
   803                           ; 1 bytes @ 0x7
   804                           
   805                           
   806                           ; 1 bytes @ 0x7
   807  0077                     	ds	1
   808  0078                     ??i1_LCD_goTo:	
   809                           
   810                           ; 1 bytes @ 0x8
   811  0078                     	ds	2
   812  007A                     i1LCD_goTo@line:	
   813                           
   814                           ; 1 bytes @ 0xA
   815  007A                     	ds	1
   816  007B                     i1LCD_goTo@address:	
   817                           
   818                           ; 1 bytes @ 0xB
   819  007B                     	ds	1
   820  007C                     ?i1_LCD_char:	
   821  007C                     i1LCD_char@line:	
   822                           ; 1 bytes @ 0xC
   823                           
   824                           
   825                           ; 1 bytes @ 0xC
   826  007C                     	ds	1
   827  007D                     i1LCD_char@col:	
   828                           
   829                           ; 1 bytes @ 0xD
   830  007D                     	ds	1
   831                           
   832                           	psect	cstackBANK0
   833  0041                     __pcstackBANK0:	
   834  0041                     ??i1_LCD_char:	
   835                           
   836                           ; 1 bytes @ 0x0
   837  0041                     	ds	1
   838  0042                     i1LCD_char@ch:	
   839                           
   840                           ; 1 bytes @ 0x1
   841  0042                     	ds	1
   842  0043                     ?i1_LCD_str:	
   843  0043                     i1LCD_str@str:	
   844                           ; 1 bytes @ 0x2
   845                           
   846                           
   847                           ; 2 bytes @ 0x2
   848  0043                     	ds	2
   849  0045                     i1LCD_str@line:	
   850                           
   851                           ; 1 bytes @ 0x4
   852  0045                     	ds	1
   853  0046                     i1LCD_str@col:	
   854                           
   855                           ; 1 bytes @ 0x5
   856  0046                     	ds	1
   857  0047                     ??i1_LCD_str:	
   858                           
   859                           ; 1 bytes @ 0x6
   860  0047                     	ds	2
   861  0049                     ??_DSP_update:	
   862                           
   863                           ; 1 bytes @ 0x8
   864  0049                     	ds	1
   865  004A                     DSP_update@slider:	
   866                           
   867                           ; 2 bytes @ 0x9
   868  004A                     	ds	2
   869  004C                     DSP_update@i:	
   870                           
   871                           ; 2 bytes @ 0xB
   872  004C                     	ds	2
   873  004E                     ??_ISR:	
   874                           
   875                           ; 1 bytes @ 0xD
   876  004E                     	ds	7
   877  0055                     ??_timer0_reload:	
   878  0055                     ??_T0_timer_mode_state:	
   879                           ; 1 bytes @ 0x14
   880                           
   881  0055                     ??_timer0_set_prescaller:	
   882                           ; 1 bytes @ 0x14
   883                           
   884  0055                     ??_timer0_set_mode:	
   885                           ; 1 bytes @ 0x14
   886                           
   887  0055                     ??_timer0_ovf_setState:	
   888                           ; 1 bytes @ 0x14
   889                           
   890  0055                     ??_T0_counter_mode_state:	
   891                           ; 1 bytes @ 0x14
   892                           
   893  0055                     ??_ADC_init:	
   894                           ; 1 bytes @ 0x14
   895                           
   896  0055                     ??_LCD_latch:	
   897                           ; 1 bytes @ 0x14
   898                           
   899                           
   900                           ; 1 bytes @ 0x14
   901  0055                     	ds	1
   902  0056                     ??_LCD_out:	
   903  0056                     ??_SLIDER_init:	
   904                           ; 1 bytes @ 0x15
   905                           
   906  0056                     timer0_reload@val:	
   907                           ; 1 bytes @ 0x15
   908                           
   909                           
   910                           ; 1 bytes @ 0x15
   911  0056                     	ds	1
   912  0057                     T0_timer_mode_state@s:	
   913  0057                     T0_counter_mode_state@s:	
   914                           ; 1 bytes @ 0x16
   915                           
   916  0057                     timer0_set_prescaller@p:	
   917                           ; 1 bytes @ 0x16
   918                           
   919  0057                     timer0_set_mode@m:	
   920                           ; 1 bytes @ 0x16
   921                           
   922  0057                     timer0_ovf_setState@o:	
   923                           ; 1 bytes @ 0x16
   924                           
   925                           
   926                           ; 1 bytes @ 0x16
   927  0057                     	ds	1
   928  0058                     ?_timer0_init:	
   929  0058                     timer0_init@m:	
   930                           ; 1 bytes @ 0x17
   931                           
   932                           
   933                           ; 1 bytes @ 0x17
   934  0058                     	ds	1
   935  0059                     timer0_init@o:	
   936  0059                     LCD_out@data:	
   937                           ; 1 bytes @ 0x18
   938                           
   939                           
   940                           ; 1 bytes @ 0x18
   941  0059                     	ds	1
   942  005A                     ??_timer0_init:	
   943  005A                     ??_LCD_cmd:	
   944                           ; 1 bytes @ 0x19
   945                           
   946                           
   947                           ; 1 bytes @ 0x19
   948  005A                     	ds	1
   949  005B                     LCD_cmd@cmd:	
   950                           
   951                           ; 1 bytes @ 0x1A
   952  005B                     	ds	1
   953  005C                     ??_DSP_init:	
   954                           
   955                           	psect	maintext
   956  05A6                     __pmaintext:	
   957                           ; 1 bytes @ 0x1B
   958 ;;
   959 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   960 ;;
   961 ;; *************** function _main *****************
   962 ;; Defined at:
   963 ;;		line 15 in file "VolumeControl.c"
   964 ;; Parameters:    Size  Location     Type
   965 ;;		None
   966 ;; Auto vars:     Size  Location     Type
   967 ;;  val             2    0        unsigned short 
   968 ;; Return value:  Size  Location     Type
   969 ;;                  1    wreg      void 
   970 ;; Registers used:
   971 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   972 ;; Tracked objects:
   973 ;;		On entry : B00/0
   974 ;;		On exit  : 0/0
   975 ;;		Unchanged: 0/0
   976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   977 ;;      Params:         0       0       0       0       0
   978 ;;      Locals:         0       0       0       0       0
   979 ;;      Temps:          0       0       1       0       0
   980 ;;      Totals:         0       0       1       0       0
   981 ;;Total ram usage:        1 bytes
   982 ;; Hardware stack levels required when called:   15
   983 ;; This function calls:
   984 ;;		_DSP_init
   985 ;;		_SLIDER_init
   986 ;;		_T0_timer_mode_state
   987 ;;		_timer0_init
   988 ;;		_timer0_reload
   989 ;; This function is called by:
   990 ;;		Startup code after reset
   991 ;; This function uses a non-reentrant model
   992 ;;
   993                           
   994                           
   995                           ;psect for function _main
   996  05A6                     _main:	
   997                           
   998                           ;VolumeControl.c: 17:     timer0_init(T0_PRESCALLER_256,T0_TIMER_MODE,T0_OVF_ENABLE);
   999                           
  1000                           ;incstack = 0
  1001 ;; hardware stack exceeded
  1002                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1003  05A6  1283               	bcf	3,5	;RP0=0, select bank0
  1004  05A7  1303               	bcf	3,6	;RP1=0, select bank0
  1005  05A8  01D8               	clrf	timer0_init@m
  1006  05A9  01D9               	clrf	timer0_init@o
  1007  05AA  3007               	movlw	7
  1008  05AB  120A  118A  24B2  120A  118A  	fcall	_timer0_init
  1009                           
  1010                           ;VolumeControl.c: 18:     timer0_reload(216);
  1011  05B0  30D8               	movlw	216
  1012  05B1  120A  118A  27D2  120A  118A  	fcall	_timer0_reload
  1013                           
  1014                           ;VolumeControl.c: 19:     SLIDER_init();
  1015  05B6  120A  118A  27E2  120A  118A  	fcall	_SLIDER_init
  1016                           
  1017                           ;VolumeControl.c: 20:     DSP_init();
  1018  05BB  120A  118A  2788  120A  118A  	fcall	_DSP_init
  1019                           
  1020                           ;VolumeControl.c: 21:     (((((*((volatile tRegister8 *)(0x87))).Reg)) = ((((*((volatile
      +                           tRegister8 *)(0x87))).Reg) & (~(1 << (5)))) | (((0)) << (5)))));
  1021  05C0  1683               	bsf	3,5	;RP0=1, select bank1
  1022  05C1  1303               	bcf	3,6	;RP1=0, select bank1
  1023  05C2  0807               	movf	7,w	;volatile
  1024  05C3  39DF               	andlw	223
  1025  05C4  00AF               	movwf	??_main^(0+128)
  1026  05C5  082F               	movf	??_main^(0+128),w
  1027  05C6  0087               	movwf	7	;volatile
  1028                           
  1029                           ;VolumeControl.c: 22:     (((((*((volatile tRegister8 *)(0x07))).Reg)) = ((((*((volatile
      +                           tRegister8 *)(0x07))).Reg) & (~(1 << (5)))) | ((0) << (5)))));
  1030  05C7  1283               	bcf	3,5	;RP0=0, select bank0
  1031  05C8  1303               	bcf	3,6	;RP1=0, select bank0
  1032  05C9  0807               	movf	7,w	;volatile
  1033  05CA  39DF               	andlw	223
  1034  05CB  1683               	bsf	3,5	;RP0=1, select bank1
  1035  05CC  1303               	bcf	3,6	;RP1=0, select bank1
  1036  05CD  00AF               	movwf	??_main^(0+128)
  1037  05CE  082F               	movf	??_main^(0+128),w
  1038  05CF  1283               	bcf	3,5	;RP0=0, select bank0
  1039  05D0  1303               	bcf	3,6	;RP1=0, select bank0
  1040  05D1  0087               	movwf	7	;volatile
  1041                           
  1042                           ;VolumeControl.c: 23:     T0_timer_mode_state(T0_ON);
  1043  05D2  3000               	movlw	0
  1044  05D3  120A  118A  2699  120A  118A  	fcall	_T0_timer_mode_state
  1045  05D8                     l79:	
  1046                           ;VolumeControl.c: 24:     tWord val;;VolumeControl.c: 25:     while(1){
  1047                           
  1048                           
  1049                           ;VolumeControl.c: 29:     }
  1050  05D8  2DD8               	goto	l79
  1051  05D9                     __end_of_main:	
  1052                           
  1053                           	psect	text1
  1054  04B2                     __ptext1:	
  1055 ;; *************** function _timer0_init *****************
  1056 ;; Defined at:
  1057 ;;		line 9 in file "TIMER0.c"
  1058 ;; Parameters:    Size  Location     Type
  1059 ;;  p               1    wreg     enum E891
  1060 ;;  m               1   23[BANK0 ] enum E901
  1061 ;;  o               1   24[BANK0 ] enum E909
  1062 ;; Auto vars:     Size  Location     Type
  1063 ;;  p               1    0[BANK1 ] enum E891
  1064 ;; Return value:  Size  Location     Type
  1065 ;;                  1    wreg      void 
  1066 ;; Registers used:
  1067 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1068 ;; Tracked objects:
  1069 ;;		On entry : 0/0
  1070 ;;		On exit  : 0/0
  1071 ;;		Unchanged: 0/0
  1072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1073 ;;      Params:         0       2       0       0       0
  1074 ;;      Locals:         0       0       1       0       0
  1075 ;;      Temps:          0       2       0       0       0
  1076 ;;      Totals:         0       4       1       0       0
  1077 ;;Total ram usage:        5 bytes
  1078 ;; Hardware stack levels used:    1
  1079 ;; Hardware stack levels required when called:    9
  1080 ;; This function calls:
  1081 ;;		_T0_counter_mode_state
  1082 ;;		_T0_timer_mode_state
  1083 ;;		_timer0_ovf_setState
  1084 ;;		_timer0_reload
  1085 ;;		_timer0_set_mode
  1086 ;;		_timer0_set_prescaller
  1087 ;; This function is called by:
  1088 ;;		_main
  1089 ;; This function uses a non-reentrant model
  1090 ;;
  1091                           
  1092                           
  1093                           ;psect for function _timer0_init
  1094  04B2                     _timer0_init:	
  1095                           
  1096                           ;incstack = 0
  1097 ;; hardware stack exceeded
  1098                           ; Regs used in _timer0_init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1099                           ;timer0_init@p stored from wreg
  1100  04B2  1683               	bsf	3,5	;RP0=1, select bank1
  1101  04B3  1303               	bcf	3,6	;RP1=0, select bank1
  1102  04B4  00A0               	movwf	timer0_init@p^(0+128)
  1103                           
  1104                           ;TIMER0.c: 10:     timer0_set_prescaller(p);
  1105  04B5  0820               	movf	timer0_init@p^(0+128),w
  1106  04B6  120A  118A  23F5  120A  118A  	fcall	_timer0_set_prescaller
  1107                           
  1108                           ;TIMER0.c: 12:     timer0_set_mode(m);
  1109  04BB  1283               	bcf	3,5	;RP0=0, select bank0
  1110  04BC  1303               	bcf	3,6	;RP1=0, select bank0
  1111  04BD  0858               	movf	timer0_init@m,w
  1112  04BE  120A  118A  267C  120A  118A  	fcall	_timer0_set_mode
  1113                           
  1114                           ;TIMER0.c: 14:     timer0_ovf_setState(o);
  1115  04C3  1283               	bcf	3,5	;RP0=0, select bank0
  1116  04C4  1303               	bcf	3,6	;RP1=0, select bank0
  1117  04C5  0859               	movf	timer0_init@o,w
  1118  04C6  120A  118A  26ED  120A  118A  	fcall	_timer0_ovf_setState
  1119                           
  1120                           ;TIMER0.c: 16:     switch(m){
  1121  04CB  2CDA               	goto	l2157
  1122  04CC                     l2151:	
  1123                           
  1124                           ;TIMER0.c: 18:             T0_timer_mode_state(T0_OFF);
  1125  04CC  3001               	movlw	1
  1126  04CD  120A  118A  2699  120A  118A  	fcall	_T0_timer_mode_state
  1127                           
  1128                           ;TIMER0.c: 19:             break;
  1129  04D2  2CEC               	goto	l2159
  1130  04D3                     l2153:	
  1131                           
  1132                           ;TIMER0.c: 21:             T0_counter_mode_state(T0_OFF);
  1133  04D3  3001               	movlw	1
  1134  04D4  120A  118A  26B6  120A  118A  	fcall	_T0_counter_mode_state
  1135                           
  1136                           ;TIMER0.c: 22:             break;
  1137  04D9  2CEC               	goto	l2159
  1138  04DA                     l2157:	
  1139  04DA  1283               	bcf	3,5	;RP0=0, select bank0
  1140  04DB  1303               	bcf	3,6	;RP1=0, select bank0
  1141  04DC  0858               	movf	timer0_init@m,w
  1142  04DD  00DA               	movwf	??_timer0_init
  1143  04DE  01DB               	clrf	??_timer0_init+1
  1144                           
  1145                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1146                           ; Switch size 1, requested type "simple"
  1147                           ; Number of cases is 1, Range of values is 0 to 0
  1148                           ; switch strategies available:
  1149                           ; Name         Instructions Cycles
  1150                           ; simple_byte            4     3 (average)
  1151                           ; direct_byte           11     8 (fixed)
  1152                           ; jumptable            260     6 (fixed)
  1153                           ;	Chosen strategy is simple_byte
  1154  04DF  085B               	movf	??_timer0_init+1,w
  1155  04E0  3A00               	xorlw	0	; case 0
  1156  04E1  1903               	skipnz
  1157  04E2  2CE4               	goto	l2385
  1158  04E3  2CEC               	goto	l2159
  1159  04E4                     l2385:	
  1160                           
  1161                           ; Switch size 1, requested type "simple"
  1162                           ; Number of cases is 2, Range of values is 0 to 1
  1163                           ; switch strategies available:
  1164                           ; Name         Instructions Cycles
  1165                           ; simple_byte            7     4 (average)
  1166                           ; direct_byte           14     8 (fixed)
  1167                           ; jumptable            260     6 (fixed)
  1168                           ;	Chosen strategy is simple_byte
  1169  04E4  085A               	movf	??_timer0_init,w
  1170  04E5  3A00               	xorlw	0	; case 0
  1171  04E6  1903               	skipnz
  1172  04E7  2CCC               	goto	l2151
  1173  04E8  3A01               	xorlw	1	; case 1
  1174  04E9  1903               	skipnz
  1175  04EA  2CD3               	goto	l2153
  1176  04EB  2CEC               	goto	l2159
  1177  04EC                     l2159:	
  1178                           
  1179                           ;TIMER0.c: 28:     timer0_reload((0xFF));
  1180  04EC  30FF               	movlw	255
  1181  04ED  120A  118A  27D2   	fcall	_timer0_reload
  1182  04F0  0008               	return
  1183  04F1                     __end_of_timer0_init:	
  1184                           
  1185                           	psect	text2
  1186  03F5                     __ptext2:	
  1187 ;; *************** function _timer0_set_prescaller *****************
  1188 ;; Defined at:
  1189 ;;		line 71 in file "TIMER0.c"
  1190 ;; Parameters:    Size  Location     Type
  1191 ;;  p               1    wreg     enum E891
  1192 ;; Auto vars:     Size  Location     Type
  1193 ;;  p               1   22[BANK0 ] enum E891
  1194 ;; Return value:  Size  Location     Type
  1195 ;;                  1    wreg      void 
  1196 ;; Registers used:
  1197 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1198 ;; Tracked objects:
  1199 ;;		On entry : 0/0
  1200 ;;		On exit  : 0/0
  1201 ;;		Unchanged: 0/0
  1202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1203 ;;      Params:         0       0       0       0       0
  1204 ;;      Locals:         0       1       0       0       0
  1205 ;;      Temps:          0       2       0       0       0
  1206 ;;      Totals:         0       3       0       0       0
  1207 ;;Total ram usage:        3 bytes
  1208 ;; Hardware stack levels used:    1
  1209 ;; Hardware stack levels required when called:    8
  1210 ;; This function calls:
  1211 ;;		Nothing
  1212 ;; This function is called by:
  1213 ;;		_timer0_init
  1214 ;; This function uses a non-reentrant model
  1215 ;;
  1216                           
  1217                           
  1218                           ;psect for function _timer0_set_prescaller
  1219  03F5                     _timer0_set_prescaller:	
  1220                           
  1221                           ;incstack = 0
  1222 ;; hardware stack exceeded
  1223                           ; Regs used in _timer0_set_prescaller: [wreg-fsr0h+status,2+status,0]
  1224                           ;timer0_set_prescaller@p stored from wreg
  1225  03F5  1283               	bcf	3,5	;RP0=0, select bank0
  1226  03F6  1303               	bcf	3,6	;RP1=0, select bank0
  1227  03F7  00D7               	movwf	timer0_set_prescaller@p
  1228                           
  1229                           ;TIMER0.c: 73:     switch(p){
  1230  03F8  2C31               	goto	l2101
  1231  03F9                     l134:	
  1232                           ;TIMER0.c: 74:         case T0_PRESCALLER_2:
  1233                           
  1234                           
  1235                           ;TIMER0.c: 75:             ((*((volatile tRegister8 *)(0x81))).Bits.BIT3) = (0); ((*((vo
      +                          latile tRegister8 *)(0x81))).Bits.BIT0) = 0; ((*((volatile tRegister8 *)(0x81))).Bits.BI
      +                          T1) = 0; ((*((volatile tRegister8 *)(0x81))).Bits.BIT2) = 0;
  1236  03F9  1683               	bsf	3,5	;RP0=1, select bank1
  1237  03FA  1303               	bcf	3,6	;RP1=0, select bank1
  1238  03FB  1181               	bcf	1,3	;volatile
  1239  03FC  1001               	bcf	1,0	;volatile
  1240  03FD  1081               	bcf	1,1	;volatile
  1241  03FE  1101               	bcf	1,2	;volatile
  1242                           
  1243                           ;TIMER0.c: 76:             break;
  1244  03FF  0008               	return
  1245  0400                     l136:	
  1246                           ;TIMER0.c: 77:         case T0_PRESCALLER_4:
  1247                           
  1248                           
  1249                           ;TIMER0.c: 78:             ((*((volatile tRegister8 *)(0x81))).Bits.BIT3) = (0); ((*((vo
      +                          latile tRegister8 *)(0x81))).Bits.BIT0) = 1; ((*((volatile tRegister8 *)(0x81))).Bits.BI
      +                          T1) = 0; ((*((volatile tRegister8 *)(0x81))).Bits.BIT2) = 0;
  1250  0400  1683               	bsf	3,5	;RP0=1, select bank1
  1251  0401  1303               	bcf	3,6	;RP1=0, select bank1
  1252  0402  1181               	bcf	1,3	;volatile
  1253  0403  1401               	bsf	1,0	;volatile
  1254  0404  1081               	bcf	1,1	;volatile
  1255  0405  1101               	bcf	1,2	;volatile
  1256                           
  1257                           ;TIMER0.c: 79:             break;
  1258  0406  0008               	return
  1259  0407                     l137:	
  1260                           ;TIMER0.c: 80:         case T0_PRESCALLER_8:
  1261                           
  1262                           
  1263                           ;TIMER0.c: 81:             ((*((volatile tRegister8 *)(0x81))).Bits.BIT3) = (0); ((*((vo
      +                          latile tRegister8 *)(0x81))).Bits.BIT0) = 0; ((*((volatile tRegister8 *)(0x81))).Bits.BI
      +                          T1) = 1; ((*((volatile tRegister8 *)(0x81))).Bits.BIT2) = 0;
  1264  0407  1683               	bsf	3,5	;RP0=1, select bank1
  1265  0408  1303               	bcf	3,6	;RP1=0, select bank1
  1266  0409  1181               	bcf	1,3	;volatile
  1267  040A  1001               	bcf	1,0	;volatile
  1268  040B  1481               	bsf	1,1	;volatile
  1269  040C  1101               	bcf	1,2	;volatile
  1270                           
  1271                           ;TIMER0.c: 82:             break;
  1272  040D  0008               	return
  1273  040E                     l138:	
  1274                           ;TIMER0.c: 83:         case T0_PRESCALLER_16:
  1275                           
  1276                           
  1277                           ;TIMER0.c: 84:             ((*((volatile tRegister8 *)(0x81))).Bits.BIT3) = (0); ((*((vo
      +                          latile tRegister8 *)(0x81))).Bits.BIT0) = 1; ((*((volatile tRegister8 *)(0x81))).Bits.BI
      +                          T1) = 1; ((*((volatile tRegister8 *)(0x81))).Bits.BIT2) = 0;
  1278  040E  1683               	bsf	3,5	;RP0=1, select bank1
  1279  040F  1303               	bcf	3,6	;RP1=0, select bank1
  1280  0410  1181               	bcf	1,3	;volatile
  1281  0411  1401               	bsf	1,0	;volatile
  1282  0412  1481               	bsf	1,1	;volatile
  1283  0413  1101               	bcf	1,2	;volatile
  1284                           
  1285                           ;TIMER0.c: 85:             break;
  1286  0414  0008               	return
  1287  0415                     l139:	
  1288                           ;TIMER0.c: 86:         case T0_PRESCALLER_32:
  1289                           
  1290                           
  1291                           ;TIMER0.c: 87:             ((*((volatile tRegister8 *)(0x81))).Bits.BIT3) = (0); ((*((vo
      +                          latile tRegister8 *)(0x81))).Bits.BIT0) = 0; ((*((volatile tRegister8 *)(0x81))).Bits.BI
      +                          T1) = 0; ((*((volatile tRegister8 *)(0x81))).Bits.BIT2) = 1;
  1292  0415  1683               	bsf	3,5	;RP0=1, select bank1
  1293  0416  1303               	bcf	3,6	;RP1=0, select bank1
  1294  0417  1181               	bcf	1,3	;volatile
  1295  0418  1001               	bcf	1,0	;volatile
  1296  0419  1081               	bcf	1,1	;volatile
  1297  041A  1501               	bsf	1,2	;volatile
  1298                           
  1299                           ;TIMER0.c: 88:             break;
  1300  041B  0008               	return
  1301  041C                     l140:	
  1302                           ;TIMER0.c: 89:         case T0_PRESCALLER_64:
  1303                           
  1304                           
  1305                           ;TIMER0.c: 90:             ((*((volatile tRegister8 *)(0x81))).Bits.BIT3) = (0); ((*((vo
      +                          latile tRegister8 *)(0x81))).Bits.BIT0) = 1; ((*((volatile tRegister8 *)(0x81))).Bits.BI
      +                          T1) = 0; ((*((volatile tRegister8 *)(0x81))).Bits.BIT2) = 1;
  1306  041C  1683               	bsf	3,5	;RP0=1, select bank1
  1307  041D  1303               	bcf	3,6	;RP1=0, select bank1
  1308  041E  1181               	bcf	1,3	;volatile
  1309  041F  1401               	bsf	1,0	;volatile
  1310  0420  1081               	bcf	1,1	;volatile
  1311  0421  1501               	bsf	1,2	;volatile
  1312                           
  1313                           ;TIMER0.c: 91:             break;
  1314  0422  0008               	return
  1315  0423                     l141:	
  1316                           ;TIMER0.c: 92:         case T0_PRESCALLER_128:
  1317                           
  1318                           
  1319                           ;TIMER0.c: 93:             ((*((volatile tRegister8 *)(0x81))).Bits.BIT3) = (0); ((*((vo
      +                          latile tRegister8 *)(0x81))).Bits.BIT0) = 0; ((*((volatile tRegister8 *)(0x81))).Bits.BI
      +                          T1) = 1; ((*((volatile tRegister8 *)(0x81))).Bits.BIT2) = 1;
  1320  0423  1683               	bsf	3,5	;RP0=1, select bank1
  1321  0424  1303               	bcf	3,6	;RP1=0, select bank1
  1322  0425  1181               	bcf	1,3	;volatile
  1323  0426  1001               	bcf	1,0	;volatile
  1324  0427  1481               	bsf	1,1	;volatile
  1325  0428  1501               	bsf	1,2	;volatile
  1326                           
  1327                           ;TIMER0.c: 94:             break;
  1328  0429  0008               	return
  1329  042A                     l142:	
  1330                           ;TIMER0.c: 95:         case T0_PRESCALLER_256:
  1331                           
  1332                           
  1333                           ;TIMER0.c: 96:             ((*((volatile tRegister8 *)(0x81))).Bits.BIT3) = (0); ((*((vo
      +                          latile tRegister8 *)(0x81))).Bits.BIT0) = 1; ((*((volatile tRegister8 *)(0x81))).Bits.BI
      +                          T1) = 1; ((*((volatile tRegister8 *)(0x81))).Bits.BIT2) = 1;
  1334  042A  1683               	bsf	3,5	;RP0=1, select bank1
  1335  042B  1303               	bcf	3,6	;RP1=0, select bank1
  1336  042C  1181               	bcf	1,3	;volatile
  1337  042D  1401               	bsf	1,0	;volatile
  1338  042E  1481               	bsf	1,1	;volatile
  1339  042F  1501               	bsf	1,2	;volatile
  1340                           
  1341                           ;TIMER0.c: 97:             break;
  1342  0430  0008               	return
  1343  0431                     l2101:	
  1344  0431  0857               	movf	timer0_set_prescaller@p,w
  1345  0432  00D5               	movwf	??_timer0_set_prescaller
  1346  0433  01D6               	clrf	??_timer0_set_prescaller+1
  1347                           
  1348                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1349                           ; Switch size 1, requested type "simple"
  1350                           ; Number of cases is 1, Range of values is 0 to 0
  1351                           ; switch strategies available:
  1352                           ; Name         Instructions Cycles
  1353                           ; simple_byte            4     3 (average)
  1354                           ; direct_byte           11     8 (fixed)
  1355                           ; jumptable            260     6 (fixed)
  1356                           ;	Chosen strategy is simple_byte
  1357  0434  0856               	movf	??_timer0_set_prescaller+1,w
  1358  0435  3A00               	xorlw	0	; case 0
  1359  0436  1903               	skipnz
  1360  0437  2C39               	goto	l2387
  1361  0438  2C53               	goto	l144
  1362  0439                     l2387:	
  1363                           
  1364                           ; Switch size 1, requested type "simple"
  1365                           ; Number of cases is 8, Range of values is 0 to 7
  1366                           ; switch strategies available:
  1367                           ; Name         Instructions Cycles
  1368                           ; simple_byte           25    13 (average)
  1369                           ; direct_byte           32     8 (fixed)
  1370                           ; jumptable            260     6 (fixed)
  1371                           ;	Chosen strategy is simple_byte
  1372  0439  0855               	movf	??_timer0_set_prescaller,w
  1373  043A  3A00               	xorlw	0	; case 0
  1374  043B  1903               	skipnz
  1375  043C  2BF9               	goto	l134
  1376  043D  3A01               	xorlw	1	; case 1
  1377  043E  1903               	skipnz
  1378  043F  2C00               	goto	l136
  1379  0440  3A03               	xorlw	3	; case 2
  1380  0441  1903               	skipnz
  1381  0442  2C07               	goto	l137
  1382  0443  3A01               	xorlw	1	; case 3
  1383  0444  1903               	skipnz
  1384  0445  2C0E               	goto	l138
  1385  0446  3A07               	xorlw	7	; case 4
  1386  0447  1903               	skipnz
  1387  0448  2C15               	goto	l139
  1388  0449  3A01               	xorlw	1	; case 5
  1389  044A  1903               	skipnz
  1390  044B  2C1C               	goto	l140
  1391  044C  3A03               	xorlw	3	; case 6
  1392  044D  1903               	skipnz
  1393  044E  2C23               	goto	l141
  1394  044F  3A01               	xorlw	1	; case 7
  1395  0450  1903               	skipnz
  1396  0451  2C2A               	goto	l142
  1397  0452  2C53               	goto	l144
  1398  0453                     l144:	
  1399  0453  0008               	return
  1400  0454                     __end_of_timer0_set_prescaller:	
  1401                           
  1402                           	psect	text3
  1403  067C                     __ptext3:	
  1404 ;; *************** function _timer0_set_mode *****************
  1405 ;; Defined at:
  1406 ;;		line 104 in file "TIMER0.c"
  1407 ;; Parameters:    Size  Location     Type
  1408 ;;  m               1    wreg     enum E901
  1409 ;; Auto vars:     Size  Location     Type
  1410 ;;  m               1   22[BANK0 ] enum E901
  1411 ;; Return value:  Size  Location     Type
  1412 ;;                  1    wreg      void 
  1413 ;; Registers used:
  1414 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1415 ;; Tracked objects:
  1416 ;;		On entry : 0/0
  1417 ;;		On exit  : 0/0
  1418 ;;		Unchanged: 0/0
  1419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1420 ;;      Params:         0       0       0       0       0
  1421 ;;      Locals:         0       1       0       0       0
  1422 ;;      Temps:          0       2       0       0       0
  1423 ;;      Totals:         0       3       0       0       0
  1424 ;;Total ram usage:        3 bytes
  1425 ;; Hardware stack levels used:    1
  1426 ;; Hardware stack levels required when called:    8
  1427 ;; This function calls:
  1428 ;;		Nothing
  1429 ;; This function is called by:
  1430 ;;		_timer0_init
  1431 ;; This function uses a non-reentrant model
  1432 ;;
  1433                           
  1434                           
  1435                           ;psect for function _timer0_set_mode
  1436  067C                     _timer0_set_mode:	
  1437                           
  1438                           ;incstack = 0
  1439 ;; hardware stack exceeded
  1440                           ; Regs used in _timer0_set_mode: [wreg-fsr0h+status,2+status,0]
  1441                           ;timer0_set_mode@m stored from wreg
  1442  067C  1283               	bcf	3,5	;RP0=0, select bank0
  1443  067D  1303               	bcf	3,6	;RP1=0, select bank0
  1444  067E  00D7               	movwf	timer0_set_mode@m
  1445                           
  1446                           ;TIMER0.c: 106:     switch(m){
  1447  067F  2E88               	goto	l2113
  1448  0680                     l148:	
  1449                           ;TIMER0.c: 107:         case T0_TIMER_MODE:
  1450                           
  1451                           
  1452                           ;TIMER0.c: 108:             (((*((volatile tRegister8 *)(0x81))).Bits.BIT5) = 0);
  1453  0680  1683               	bsf	3,5	;RP0=1, select bank1
  1454  0681  1303               	bcf	3,6	;RP1=0, select bank1
  1455  0682  1281               	bcf	1,5	;volatile
  1456                           
  1457                           ;TIMER0.c: 109:             break;
  1458  0683  0008               	return
  1459  0684                     l150:	
  1460                           ;TIMER0.c: 110:         case T0_COUNTER_MODE :
  1461                           
  1462                           
  1463                           ;TIMER0.c: 111:             (((*((volatile tRegister8 *)(0x81))).Bits.BIT5) = 1);
  1464  0684  1683               	bsf	3,5	;RP0=1, select bank1
  1465  0685  1303               	bcf	3,6	;RP1=0, select bank1
  1466  0686  1681               	bsf	1,5	;volatile
  1467                           
  1468                           ;TIMER0.c: 112:             break;
  1469  0687  0008               	return
  1470  0688                     l2113:	
  1471  0688  0857               	movf	timer0_set_mode@m,w
  1472  0689  00D5               	movwf	??_timer0_set_mode
  1473  068A  01D6               	clrf	??_timer0_set_mode+1
  1474                           
  1475                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1476                           ; Switch size 1, requested type "simple"
  1477                           ; Number of cases is 1, Range of values is 0 to 0
  1478                           ; switch strategies available:
  1479                           ; Name         Instructions Cycles
  1480                           ; simple_byte            4     3 (average)
  1481                           ; direct_byte           11     8 (fixed)
  1482                           ; jumptable            260     6 (fixed)
  1483                           ;	Chosen strategy is simple_byte
  1484  068B  0856               	movf	??_timer0_set_mode+1,w
  1485  068C  3A00               	xorlw	0	; case 0
  1486  068D  1903               	skipnz
  1487  068E  2E90               	goto	l2389
  1488  068F  2E98               	goto	l152
  1489  0690                     l2389:	
  1490                           
  1491                           ; Switch size 1, requested type "simple"
  1492                           ; Number of cases is 2, Range of values is 0 to 1
  1493                           ; switch strategies available:
  1494                           ; Name         Instructions Cycles
  1495                           ; simple_byte            7     4 (average)
  1496                           ; direct_byte           14     8 (fixed)
  1497                           ; jumptable            260     6 (fixed)
  1498                           ;	Chosen strategy is simple_byte
  1499  0690  0855               	movf	??_timer0_set_mode,w
  1500  0691  3A00               	xorlw	0	; case 0
  1501  0692  1903               	skipnz
  1502  0693  2E80               	goto	l148
  1503  0694  3A01               	xorlw	1	; case 1
  1504  0695  1903               	skipnz
  1505  0696  2E84               	goto	l150
  1506  0697  2E98               	goto	l152
  1507  0698                     l152:	
  1508  0698  0008               	return
  1509  0699                     __end_of_timer0_set_mode:	
  1510                           
  1511                           	psect	text4
  1512  07D2                     __ptext4:	
  1513 ;; *************** function _timer0_reload *****************
  1514 ;; Defined at:
  1515 ;;		line 32 in file "TIMER0.c"
  1516 ;; Parameters:    Size  Location     Type
  1517 ;;  val             1    wreg     unsigned char 
  1518 ;; Auto vars:     Size  Location     Type
  1519 ;;  val             1   21[BANK0 ] unsigned char 
  1520 ;; Return value:  Size  Location     Type
  1521 ;;                  1    wreg      void 
  1522 ;; Registers used:
  1523 ;;		wreg
  1524 ;; Tracked objects:
  1525 ;;		On entry : 0/0
  1526 ;;		On exit  : 0/0
  1527 ;;		Unchanged: 0/0
  1528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1529 ;;      Params:         0       0       0       0       0
  1530 ;;      Locals:         0       1       0       0       0
  1531 ;;      Temps:          0       1       0       0       0
  1532 ;;      Totals:         0       2       0       0       0
  1533 ;;Total ram usage:        2 bytes
  1534 ;; Hardware stack levels used:    1
  1535 ;; Hardware stack levels required when called:    8
  1536 ;; This function calls:
  1537 ;;		Nothing
  1538 ;; This function is called by:
  1539 ;;		_main
  1540 ;;		_timer0_init
  1541 ;; This function uses a non-reentrant model
  1542 ;;
  1543                           
  1544                           
  1545                           ;psect for function _timer0_reload
  1546  07D2                     _timer0_reload:	
  1547                           
  1548                           ;incstack = 0
  1549 ;; hardware stack exceeded
  1550                           ; Regs used in _timer0_reload: [wreg]
  1551                           ;timer0_reload@val stored from wreg
  1552  07D2  1283               	bcf	3,5	;RP0=0, select bank0
  1553  07D3  1303               	bcf	3,6	;RP1=0, select bank0
  1554  07D4  00D6               	movwf	timer0_reload@val
  1555                           
  1556                           ;TIMER0.c: 34:     ((*((volatile tRegister8 *)(0x01))).Reg) = val;
  1557  07D5  0856               	movf	timer0_reload@val,w
  1558  07D6  00D5               	movwf	??_timer0_reload
  1559  07D7  0855               	movf	??_timer0_reload,w
  1560  07D8  0081               	movwf	1	;volatile
  1561  07D9  0008               	return
  1562  07DA                     __end_of_timer0_reload:	
  1563                           
  1564                           	psect	text5
  1565  06ED                     __ptext5:	
  1566 ;; *************** function _timer0_ovf_setState *****************
  1567 ;; Defined at:
  1568 ;;		line 119 in file "TIMER0.c"
  1569 ;; Parameters:    Size  Location     Type
  1570 ;;  o               1    wreg     enum E909
  1571 ;; Auto vars:     Size  Location     Type
  1572 ;;  o               1   22[BANK0 ] enum E909
  1573 ;; Return value:  Size  Location     Type
  1574 ;;                  1    wreg      void 
  1575 ;; Registers used:
  1576 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1577 ;; Tracked objects:
  1578 ;;		On entry : 0/0
  1579 ;;		On exit  : 0/0
  1580 ;;		Unchanged: 0/0
  1581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1582 ;;      Params:         0       0       0       0       0
  1583 ;;      Locals:         0       1       0       0       0
  1584 ;;      Temps:          0       2       0       0       0
  1585 ;;      Totals:         0       3       0       0       0
  1586 ;;Total ram usage:        3 bytes
  1587 ;; Hardware stack levels used:    1
  1588 ;; Hardware stack levels required when called:    8
  1589 ;; This function calls:
  1590 ;;		Nothing
  1591 ;; This function is called by:
  1592 ;;		_timer0_init
  1593 ;; This function uses a non-reentrant model
  1594 ;;
  1595                           
  1596                           
  1597                           ;psect for function _timer0_ovf_setState
  1598  06ED                     _timer0_ovf_setState:	
  1599                           
  1600                           ;incstack = 0
  1601 ;; hardware stack exceeded
  1602                           ; Regs used in _timer0_ovf_setState: [wreg-fsr0h+status,2+status,0]
  1603                           ;timer0_ovf_setState@o stored from wreg
  1604  06ED  1283               	bcf	3,5	;RP0=0, select bank0
  1605  06EE  1303               	bcf	3,6	;RP1=0, select bank0
  1606  06EF  00D7               	movwf	timer0_ovf_setState@o
  1607                           
  1608                           ;TIMER0.c: 120:     switch(o){
  1609  06F0  2EF6               	goto	l2125
  1610  06F1                     l156:	
  1611                           ;TIMER0.c: 121:         case T0_OVF_ENABLE :
  1612                           
  1613                           
  1614                           ;TIMER0.c: 122:             ((*((volatile tRegister8 *)(0x0B))).Bits.BIT7 = 1);
  1615  06F1  178B               	bsf	11,7	;volatile
  1616                           
  1617                           ;TIMER0.c: 123:             (((*((volatile tRegister8 *)(0x0B))).Bits.BIT5) = 1);
  1618  06F2  168B               	bsf	11,5	;volatile
  1619                           
  1620                           ;TIMER0.c: 124:             break;
  1621  06F3  0008               	return
  1622  06F4                     l158:	
  1623                           ;TIMER0.c: 125:         case T0_OVF_DISABLE :
  1624                           
  1625                           
  1626                           ;TIMER0.c: 126:             (((*((volatile tRegister8 *)(0x0B))).Bits.BIT5) = 0);
  1627  06F4  128B               	bcf	11,5	;volatile
  1628                           
  1629                           ;TIMER0.c: 127:             break;
  1630  06F5  0008               	return
  1631  06F6                     l2125:	
  1632  06F6  0857               	movf	timer0_ovf_setState@o,w
  1633  06F7  00D5               	movwf	??_timer0_ovf_setState
  1634  06F8  01D6               	clrf	??_timer0_ovf_setState+1
  1635                           
  1636                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1637                           ; Switch size 1, requested type "simple"
  1638                           ; Number of cases is 1, Range of values is 0 to 0
  1639                           ; switch strategies available:
  1640                           ; Name         Instructions Cycles
  1641                           ; simple_byte            4     3 (average)
  1642                           ; direct_byte           11     8 (fixed)
  1643                           ; jumptable            260     6 (fixed)
  1644                           ;	Chosen strategy is simple_byte
  1645  06F9  0856               	movf	??_timer0_ovf_setState+1,w
  1646  06FA  3A00               	xorlw	0	; case 0
  1647  06FB  1903               	skipnz
  1648  06FC  2EFE               	goto	l2391
  1649  06FD  2F06               	goto	l160
  1650  06FE                     l2391:	
  1651                           
  1652                           ; Switch size 1, requested type "simple"
  1653                           ; Number of cases is 2, Range of values is 0 to 1
  1654                           ; switch strategies available:
  1655                           ; Name         Instructions Cycles
  1656                           ; simple_byte            7     4 (average)
  1657                           ; direct_byte           14     8 (fixed)
  1658                           ; jumptable            260     6 (fixed)
  1659                           ;	Chosen strategy is simple_byte
  1660  06FE  0855               	movf	??_timer0_ovf_setState,w
  1661  06FF  3A00               	xorlw	0	; case 0
  1662  0700  1903               	skipnz
  1663  0701  2EF1               	goto	l156
  1664  0702  3A01               	xorlw	1	; case 1
  1665  0703  1903               	skipnz
  1666  0704  2EF4               	goto	l158
  1667  0705  2F06               	goto	l160
  1668  0706                     l160:	
  1669  0706  0008               	return
  1670  0707                     __end_of_timer0_ovf_setState:	
  1671                           
  1672                           	psect	text6
  1673  0699                     __ptext6:	
  1674 ;; *************** function _T0_timer_mode_state *****************
  1675 ;; Defined at:
  1676 ;;		line 40 in file "TIMER0.c"
  1677 ;; Parameters:    Size  Location     Type
  1678 ;;  s               1    wreg     enum E905
  1679 ;; Auto vars:     Size  Location     Type
  1680 ;;  s               1   22[BANK0 ] enum E905
  1681 ;; Return value:  Size  Location     Type
  1682 ;;                  1    wreg      void 
  1683 ;; Registers used:
  1684 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1685 ;; Tracked objects:
  1686 ;;		On entry : 0/0
  1687 ;;		On exit  : 0/0
  1688 ;;		Unchanged: 0/0
  1689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1690 ;;      Params:         0       0       0       0       0
  1691 ;;      Locals:         0       1       0       0       0
  1692 ;;      Temps:          0       2       0       0       0
  1693 ;;      Totals:         0       3       0       0       0
  1694 ;;Total ram usage:        3 bytes
  1695 ;; Hardware stack levels used:    1
  1696 ;; Hardware stack levels required when called:    8
  1697 ;; This function calls:
  1698 ;;		Nothing
  1699 ;; This function is called by:
  1700 ;;		_main
  1701 ;;		_timer0_init
  1702 ;; This function uses a non-reentrant model
  1703 ;;
  1704                           
  1705                           
  1706                           ;psect for function _T0_timer_mode_state
  1707  0699                     _T0_timer_mode_state:	
  1708                           
  1709                           ;incstack = 0
  1710 ;; hardware stack exceeded
  1711                           ; Regs used in _T0_timer_mode_state: [wreg-fsr0h+status,2+status,0]
  1712                           ;T0_timer_mode_state@s stored from wreg
  1713  0699  1283               	bcf	3,5	;RP0=0, select bank0
  1714  069A  1303               	bcf	3,6	;RP1=0, select bank0
  1715  069B  00D7               	movwf	T0_timer_mode_state@s
  1716                           
  1717                           ;TIMER0.c: 42:     switch(s) {
  1718  069C  2EA5               	goto	l2089
  1719  069D                     l118:	
  1720                           ;TIMER0.c: 43:         case T0_ON :
  1721                           
  1722                           
  1723                           ;TIMER0.c: 44:             (((*((volatile tRegister8 *)(0x81))).Bits.BIT5) = 0);
  1724  069D  1683               	bsf	3,5	;RP0=1, select bank1
  1725  069E  1303               	bcf	3,6	;RP1=0, select bank1
  1726  069F  1281               	bcf	1,5	;volatile
  1727                           
  1728                           ;TIMER0.c: 45:             break;
  1729  06A0  0008               	return
  1730  06A1                     l120:	
  1731                           ;TIMER0.c: 46:         case T0_OFF :
  1732                           
  1733                           
  1734                           ;TIMER0.c: 47:             (((*((volatile tRegister8 *)(0x81))).Bits.BIT5) = 1);
  1735  06A1  1683               	bsf	3,5	;RP0=1, select bank1
  1736  06A2  1303               	bcf	3,6	;RP1=0, select bank1
  1737  06A3  1681               	bsf	1,5	;volatile
  1738                           
  1739                           ;TIMER0.c: 48:             break;
  1740  06A4  0008               	return
  1741  06A5                     l2089:	
  1742  06A5  0857               	movf	T0_timer_mode_state@s,w
  1743  06A6  00D5               	movwf	??_T0_timer_mode_state
  1744  06A7  01D6               	clrf	??_T0_timer_mode_state+1
  1745                           
  1746                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1747                           ; Switch size 1, requested type "simple"
  1748                           ; Number of cases is 1, Range of values is 0 to 0
  1749                           ; switch strategies available:
  1750                           ; Name         Instructions Cycles
  1751                           ; simple_byte            4     3 (average)
  1752                           ; direct_byte           11     8 (fixed)
  1753                           ; jumptable            260     6 (fixed)
  1754                           ;	Chosen strategy is simple_byte
  1755  06A8  0856               	movf	??_T0_timer_mode_state+1,w
  1756  06A9  3A00               	xorlw	0	; case 0
  1757  06AA  1903               	skipnz
  1758  06AB  2EAD               	goto	l2393
  1759  06AC  2EB5               	goto	l122
  1760  06AD                     l2393:	
  1761                           
  1762                           ; Switch size 1, requested type "simple"
  1763                           ; Number of cases is 2, Range of values is 0 to 1
  1764                           ; switch strategies available:
  1765                           ; Name         Instructions Cycles
  1766                           ; simple_byte            7     4 (average)
  1767                           ; direct_byte           14     8 (fixed)
  1768                           ; jumptable            260     6 (fixed)
  1769                           ;	Chosen strategy is simple_byte
  1770  06AD  0855               	movf	??_T0_timer_mode_state,w
  1771  06AE  3A00               	xorlw	0	; case 0
  1772  06AF  1903               	skipnz
  1773  06B0  2E9D               	goto	l118
  1774  06B1  3A01               	xorlw	1	; case 1
  1775  06B2  1903               	skipnz
  1776  06B3  2EA1               	goto	l120
  1777  06B4  2EB5               	goto	l122
  1778  06B5                     l122:	
  1779  06B5  0008               	return
  1780  06B6                     __end_of_T0_timer_mode_state:	
  1781                           
  1782                           	psect	text7
  1783  06B6                     __ptext7:	
  1784 ;; *************** function _T0_counter_mode_state *****************
  1785 ;; Defined at:
  1786 ;;		line 55 in file "TIMER0.c"
  1787 ;; Parameters:    Size  Location     Type
  1788 ;;  s               1    wreg     enum E905
  1789 ;; Auto vars:     Size  Location     Type
  1790 ;;  s               1   22[BANK0 ] enum E905
  1791 ;; Return value:  Size  Location     Type
  1792 ;;                  1    wreg      void 
  1793 ;; Registers used:
  1794 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1795 ;; Tracked objects:
  1796 ;;		On entry : 0/0
  1797 ;;		On exit  : 0/0
  1798 ;;		Unchanged: 0/0
  1799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1800 ;;      Params:         0       0       0       0       0
  1801 ;;      Locals:         0       1       0       0       0
  1802 ;;      Temps:          0       2       0       0       0
  1803 ;;      Totals:         0       3       0       0       0
  1804 ;;Total ram usage:        3 bytes
  1805 ;; Hardware stack levels used:    1
  1806 ;; Hardware stack levels required when called:    8
  1807 ;; This function calls:
  1808 ;;		Nothing
  1809 ;; This function is called by:
  1810 ;;		_timer0_init
  1811 ;; This function uses a non-reentrant model
  1812 ;;
  1813                           
  1814                           
  1815                           ;psect for function _T0_counter_mode_state
  1816  06B6                     _T0_counter_mode_state:	
  1817                           
  1818                           ;incstack = 0
  1819 ;; hardware stack exceeded
  1820                           ; Regs used in _T0_counter_mode_state: [wreg-fsr0h+status,2+status,0]
  1821                           ;T0_counter_mode_state@s stored from wreg
  1822  06B6  1283               	bcf	3,5	;RP0=0, select bank0
  1823  06B7  1303               	bcf	3,6	;RP1=0, select bank0
  1824  06B8  00D7               	movwf	T0_counter_mode_state@s
  1825                           
  1826                           ;TIMER0.c: 58:     switch(s) {
  1827  06B9  2EC2               	goto	l2137
  1828  06BA                     l126:	
  1829                           ;TIMER0.c: 59:         case T0_ON :
  1830                           
  1831                           
  1832                           ;TIMER0.c: 60:             (((*((volatile tRegister8 *)(0x81))).Bits.BIT5) = 1);
  1833  06BA  1683               	bsf	3,5	;RP0=1, select bank1
  1834  06BB  1303               	bcf	3,6	;RP1=0, select bank1
  1835  06BC  1681               	bsf	1,5	;volatile
  1836                           
  1837                           ;TIMER0.c: 61:             break;
  1838  06BD  0008               	return
  1839  06BE                     l128:	
  1840                           ;TIMER0.c: 62:         case T0_OFF :
  1841                           
  1842                           
  1843                           ;TIMER0.c: 63:             (((*((volatile tRegister8 *)(0x81))).Bits.BIT5) = 0);
  1844  06BE  1683               	bsf	3,5	;RP0=1, select bank1
  1845  06BF  1303               	bcf	3,6	;RP1=0, select bank1
  1846  06C0  1281               	bcf	1,5	;volatile
  1847                           
  1848                           ;TIMER0.c: 64:             break;
  1849  06C1  0008               	return
  1850  06C2                     l2137:	
  1851  06C2  0857               	movf	T0_counter_mode_state@s,w
  1852  06C3  00D5               	movwf	??_T0_counter_mode_state
  1853  06C4  01D6               	clrf	??_T0_counter_mode_state+1
  1854                           
  1855                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1856                           ; Switch size 1, requested type "simple"
  1857                           ; Number of cases is 1, Range of values is 0 to 0
  1858                           ; switch strategies available:
  1859                           ; Name         Instructions Cycles
  1860                           ; simple_byte            4     3 (average)
  1861                           ; direct_byte           11     8 (fixed)
  1862                           ; jumptable            260     6 (fixed)
  1863                           ;	Chosen strategy is simple_byte
  1864  06C5  0856               	movf	??_T0_counter_mode_state+1,w
  1865  06C6  3A00               	xorlw	0	; case 0
  1866  06C7  1903               	skipnz
  1867  06C8  2ECA               	goto	l2395
  1868  06C9  2ED2               	goto	l130
  1869  06CA                     l2395:	
  1870                           
  1871                           ; Switch size 1, requested type "simple"
  1872                           ; Number of cases is 2, Range of values is 0 to 1
  1873                           ; switch strategies available:
  1874                           ; Name         Instructions Cycles
  1875                           ; simple_byte            7     4 (average)
  1876                           ; direct_byte           14     8 (fixed)
  1877                           ; jumptable            260     6 (fixed)
  1878                           ;	Chosen strategy is simple_byte
  1879  06CA  0855               	movf	??_T0_counter_mode_state,w
  1880  06CB  3A00               	xorlw	0	; case 0
  1881  06CC  1903               	skipnz
  1882  06CD  2EBA               	goto	l126
  1883  06CE  3A01               	xorlw	1	; case 1
  1884  06CF  1903               	skipnz
  1885  06D0  2EBE               	goto	l128
  1886  06D1  2ED2               	goto	l130
  1887  06D2                     l130:	
  1888  06D2  0008               	return
  1889  06D3                     __end_of_T0_counter_mode_state:	
  1890                           
  1891                           	psect	text8
  1892  07E2                     __ptext8:	
  1893 ;; *************** function _SLIDER_init *****************
  1894 ;; Defined at:
  1895 ;;		line 28 in file "SLIDER.c"
  1896 ;; Parameters:    Size  Location     Type
  1897 ;;		None
  1898 ;; Auto vars:     Size  Location     Type
  1899 ;;		None
  1900 ;; Return value:  Size  Location     Type
  1901 ;;                  1    wreg      void 
  1902 ;; Registers used:
  1903 ;;		wreg, status,2, status,0, pclath, cstack
  1904 ;; Tracked objects:
  1905 ;;		On entry : 0/0
  1906 ;;		On exit  : 0/0
  1907 ;;		Unchanged: 0/0
  1908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1909 ;;      Params:         0       0       0       0       0
  1910 ;;      Locals:         0       0       0       0       0
  1911 ;;      Temps:          0       0       0       0       0
  1912 ;;      Totals:         0       0       0       0       0
  1913 ;;Total ram usage:        0 bytes
  1914 ;; Hardware stack levels used:    1
  1915 ;; Hardware stack levels required when called:    9
  1916 ;; This function calls:
  1917 ;;		_ADC_init
  1918 ;; This function is called by:
  1919 ;;		_main
  1920 ;; This function uses a non-reentrant model
  1921 ;;
  1922                           
  1923                           
  1924                           ;psect for function _SLIDER_init
  1925  07E2                     _SLIDER_init:	
  1926                           
  1927                           ;SLIDER.c: 32:     ADC_init();
  1928                           
  1929                           ;incstack = 0
  1930 ;; hardware stack exceeded
  1931                           ; Regs used in _SLIDER_init: [wreg+status,2+status,0+pclath+cstack]
  1932  07E2  120A  118A  2638   	fcall	_ADC_init
  1933  07E5  0008               	return
  1934  07E6                     __end_of_SLIDER_init:	
  1935                           
  1936                           	psect	text9
  1937  0638                     __ptext9:	
  1938 ;; *************** function _ADC_init *****************
  1939 ;; Defined at:
  1940 ;;		line 19 in file "ADC.c"
  1941 ;; Parameters:    Size  Location     Type
  1942 ;;		None
  1943 ;; Auto vars:     Size  Location     Type
  1944 ;;		None
  1945 ;; Return value:  Size  Location     Type
  1946 ;;                  1    wreg      void 
  1947 ;; Registers used:
  1948 ;;		wreg, status,2
  1949 ;; Tracked objects:
  1950 ;;		On entry : 0/0
  1951 ;;		On exit  : 0/0
  1952 ;;		Unchanged: 0/0
  1953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1954 ;;      Params:         0       0       0       0       0
  1955 ;;      Locals:         0       0       0       0       0
  1956 ;;      Temps:          0       1       0       0       0
  1957 ;;      Totals:         0       1       0       0       0
  1958 ;;Total ram usage:        1 bytes
  1959 ;; Hardware stack levels used:    1
  1960 ;; Hardware stack levels required when called:    8
  1961 ;; This function calls:
  1962 ;;		Nothing
  1963 ;; This function is called by:
  1964 ;;		_SLIDER_init
  1965 ;; This function uses a non-reentrant model
  1966 ;;
  1967                           
  1968                           
  1969                           ;psect for function _ADC_init
  1970  0638                     _ADC_init:	
  1971                           
  1972                           ;ADC.c: 22:     (((((*((volatile tRegister8 *)(0x85))).Reg)) = ((((*((volatile tRegister
      +                          8 *)(0x85))).Reg) & (~(1 << (1)))) | (((1)) << (1)))));
  1973                           
  1974                           ;incstack = 0
  1975 ;; hardware stack exceeded
  1976                           ; Regs used in _ADC_init: [wreg+status,2]
  1977  0638  1683               	bsf	3,5	;RP0=1, select bank1
  1978  0639  1303               	bcf	3,6	;RP1=0, select bank1
  1979  063A  0805               	movf	5,w	;volatile
  1980  063B  39FD               	andlw	253
  1981  063C  3802               	iorlw	2
  1982  063D  1283               	bcf	3,5	;RP0=0, select bank0
  1983  063E  1303               	bcf	3,6	;RP1=0, select bank0
  1984  063F  00D5               	movwf	??_ADC_init
  1985  0640  0855               	movf	??_ADC_init,w
  1986  0641  1683               	bsf	3,5	;RP0=1, select bank1
  1987  0642  1303               	bcf	3,6	;RP1=0, select bank1
  1988  0643  0085               	movwf	5	;volatile
  1989                           
  1990                           ;ADC.c: 25:     ((*((volatile tRegister8 *)(0x1F))).Bits.BIT0 = 0);
  1991  0644  1283               	bcf	3,5	;RP0=0, select bank0
  1992  0645  1303               	bcf	3,6	;RP1=0, select bank0
  1993  0646  101F               	bcf	31,0	;volatile
  1994                           
  1995                           ;ADC.c: 28:     ((*((volatile tRegister8 *)(0x9F))).Reg = ((*((volatile tRegister8 *)(0x
      +                          9F))).Reg & 0xF0) | (0x02));
  1996  0647  1683               	bsf	3,5	;RP0=1, select bank1
  1997  0648  1303               	bcf	3,6	;RP1=0, select bank1
  1998  0649  081F               	movf	31,w	;volatile
  1999  064A  39F0               	andlw	240
  2000  064B  3802               	iorlw	2
  2001  064C  1283               	bcf	3,5	;RP0=0, select bank0
  2002  064D  1303               	bcf	3,6	;RP1=0, select bank0
  2003  064E  00D5               	movwf	??_ADC_init
  2004  064F  0855               	movf	??_ADC_init,w
  2005  0650  1683               	bsf	3,5	;RP0=1, select bank1
  2006  0651  1303               	bcf	3,6	;RP1=0, select bank1
  2007  0652  009F               	movwf	31	;volatile
  2008                           
  2009                           ;ADC.c: 31:     ((*((volatile tRegister8 *)(0x1F))).Bits.BIT6) = (1) & 1; ((*((volatile 
      +                          tRegister8 *)(0x1F))).Bits.BIT7) = ((1) & 2) >> 1; ((*((volatile tRegister8 *)(0x9F))).B
      +                          its.BIT6) = ((1) & 4) >> 2;;
  2010  0653  1283               	bcf	3,5	;RP0=0, select bank0
  2011  0654  1303               	bcf	3,6	;RP1=0, select bank0
  2012  0655  171F               	bsf	31,6	;volatile
  2013  0656  139F               	bcf	31,7	;volatile
  2014  0657  1683               	bsf	3,5	;RP0=1, select bank1
  2015  0658  1303               	bcf	3,6	;RP1=0, select bank1
  2016  0659  131F               	bcf	31,6	;volatile
  2017                           
  2018                           ;ADC.c: 34:     ((*((volatile tRegister8 *)(0x9F))).Bits.BIT7 = (1));
  2019  065A  179F               	bsf	31,7	;volatile
  2020  065B  0008               	return
  2021  065C                     __end_of_ADC_init:	
  2022                           
  2023                           	psect	text10
  2024  0788                     __ptext10:	
  2025 ;; *************** function _DSP_init *****************
  2026 ;; Defined at:
  2027 ;;		line 21 in file "DISPLAY.c"
  2028 ;; Parameters:    Size  Location     Type
  2029 ;;		None
  2030 ;; Auto vars:     Size  Location     Type
  2031 ;;		None
  2032 ;; Return value:  Size  Location     Type
  2033 ;;                  1    wreg      void 
  2034 ;; Registers used:
  2035 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2036 ;; Tracked objects:
  2037 ;;		On entry : 0/0
  2038 ;;		On exit  : 0/0
  2039 ;;		Unchanged: 0/0
  2040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2041 ;;      Params:         0       0       0       0       0
  2042 ;;      Locals:         0       0       0       0       0
  2043 ;;      Temps:          0       0       0       0       0
  2044 ;;      Totals:         0       0       0       0       0
  2045 ;;Total ram usage:        0 bytes
  2046 ;; Hardware stack levels used:    1
  2047 ;; Hardware stack levels required when called:   14
  2048 ;; This function calls:
  2049 ;;		_LCD_init
  2050 ;;		_LCD_str
  2051 ;; This function is called by:
  2052 ;;		_main
  2053 ;; This function uses a non-reentrant model
  2054 ;;
  2055                           
  2056                           
  2057                           ;psect for function _DSP_init
  2058  0788                     _DSP_init:	
  2059                           
  2060                           ;DISPLAY.c: 24:     LCD_init(LCD_8_MODE);
  2061                           
  2062                           ;incstack = 0
  2063 ;; hardware stack exceeded
  2064                           ; Regs used in _DSP_init: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2065  0788  3001               	movlw	1
  2066  0789  120A  118A  22EE  120A  118A  	fcall	_LCD_init
  2067                           
  2068                           ;DISPLAY.c: 26:     LCD_str("VOLUME : " , L1, C1);
  2069  078E  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  2070  078F  1683               	bsf	3,5	;RP0=1, select bank1
  2071  0790  1303               	bcf	3,6	;RP1=0, select bank1
  2072  0791  00A9               	movwf	LCD_str@str^(0+128)
  2073  0792  3080               	movlw	128
  2074  0793  00AA               	movwf	(LCD_str@str+1)^(0+128)
  2075  0794  01AB               	clrf	LCD_str@line^(0+128)
  2076  0795  01AC               	clrf	LCD_str@col^(0+128)
  2077  0796  120A  118A  24F1   	fcall	_LCD_str
  2078  0799  0008               	return
  2079  079A                     __end_of_DSP_init:	
  2080                           
  2081                           	psect	text11
  2082  04F1                     __ptext11:	
  2083 ;; *************** function _LCD_str *****************
  2084 ;; Defined at:
  2085 ;;		line 161 in file "LCD.c"
  2086 ;; Parameters:    Size  Location     Type
  2087 ;;  str             2    9[BANK1 ] PTR unsigned char 
  2088 ;;		 -> Convert_IntToString@nStr(11), DSP_update@str(17), STR_1(10), 
  2089 ;;  line            1   11[BANK1 ] enum E895
  2090 ;;  col             1   12[BANK1 ] enum E899
  2091 ;; Auto vars:     Size  Location     Type
  2092 ;;		None
  2093 ;; Return value:  Size  Location     Type
  2094 ;;                  1    wreg      void 
  2095 ;; Registers used:
  2096 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2097 ;; Tracked objects:
  2098 ;;		On entry : 0/0
  2099 ;;		On exit  : 0/0
  2100 ;;		Unchanged: 0/0
  2101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2102 ;;      Params:         0       0       4       0       0
  2103 ;;      Locals:         0       0       0       0       0
  2104 ;;      Temps:          0       0       2       0       0
  2105 ;;      Totals:         0       0       6       0       0
  2106 ;;Total ram usage:        6 bytes
  2107 ;; Hardware stack levels used:    1
  2108 ;; Hardware stack levels required when called:   13
  2109 ;; This function calls:
  2110 ;;		_LCD_char
  2111 ;; This function is called by:
  2112 ;;		_DSP_init
  2113 ;;		_LCD_num
  2114 ;; This function uses a non-reentrant model
  2115 ;;
  2116                           
  2117                           
  2118                           ;psect for function _LCD_str
  2119  04F1                     _LCD_str:	
  2120  04F1                     l2081:	
  2121                           ;LCD.c: 163:     while(*str != '\0'){
  2122                           
  2123                           ;incstack = 0
  2124 ;; hardware stack exceeded
  2125                           ; Regs used in _LCD_str: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2126                           
  2127                           
  2128                           ;LCD.c: 163:     while(*str != '\0'){
  2129  04F1  1683               	bsf	3,5	;RP0=1, select bank1
  2130  04F2  1303               	bcf	3,6	;RP1=0, select bank1
  2131  04F3  082A               	movf	(LCD_str@str+1)^(0+128),w
  2132  04F4  1283               	bcf	3,5	;RP0=0, select bank0
  2133  04F5  1303               	bcf	3,6	;RP1=0, select bank0
  2134  04F6  00FF               	movwf	127
  2135  04F7  1683               	bsf	3,5	;RP0=1, select bank1
  2136  04F8  1303               	bcf	3,6	;RP1=0, select bank1
  2137  04F9  0829               	movf	LCD_str@str^(0+128),w
  2138  04FA  0084               	movwf	4
  2139  04FB  1283               	bcf	3,5	;RP0=0, select bank0
  2140  04FC  1303               	bcf	3,6	;RP1=0, select bank0
  2141  04FD  120A  118A  26D3  120A  118A  	fcall	stringtab
  2142  0502  3A00               	xorlw	0
  2143  0503  1903               	btfsc	3,2
  2144  0504  0008               	return
  2145                           
  2146                           ;LCD.c: 164:         LCD_char(*str,line,col);
  2147  0505  1683               	bsf	3,5	;RP0=1, select bank1
  2148  0506  1303               	bcf	3,6	;RP1=0, select bank1
  2149  0507  082B               	movf	LCD_str@line^(0+128),w
  2150  0508  00AD               	movwf	??_LCD_str^(0+128)
  2151  0509  082D               	movf	??_LCD_str^(0+128),w
  2152  050A  00A5               	movwf	LCD_char@line^(0+128)
  2153  050B  082C               	movf	LCD_str@col^(0+128),w
  2154  050C  00AE               	movwf	(??_LCD_str+1)^(0+128)
  2155  050D  082E               	movf	(??_LCD_str+1)^(0+128),w
  2156  050E  00A6               	movwf	LCD_char@col^(0+128)
  2157  050F  082A               	movf	(LCD_str@str+1)^(0+128),w
  2158  0510  1283               	bcf	3,5	;RP0=0, select bank0
  2159  0511  1303               	bcf	3,6	;RP1=0, select bank0
  2160  0512  00FF               	movwf	127
  2161  0513  1683               	bsf	3,5	;RP0=1, select bank1
  2162  0514  1303               	bcf	3,6	;RP1=0, select bank1
  2163  0515  0829               	movf	LCD_str@str^(0+128),w
  2164  0516  0084               	movwf	4
  2165  0517  1283               	bcf	3,5	;RP0=0, select bank0
  2166  0518  1303               	bcf	3,6	;RP1=0, select bank0
  2167  0519  120A  118A  26D3  120A  118A  	fcall	stringtab
  2168  051E  120A  118A  265C  120A  118A  	fcall	_LCD_char
  2169                           
  2170                           ;LCD.c: 165:         str++;
  2171  0523  3001               	movlw	1
  2172  0524  1683               	bsf	3,5	;RP0=1, select bank1
  2173  0525  1303               	bcf	3,6	;RP1=0, select bank1
  2174  0526  07A9               	addwf	LCD_str@str^(0+128),f
  2175  0527  1803               	skipnc
  2176  0528  0AAA               	incf	(LCD_str@str+1)^(0+128),f
  2177  0529  3000               	movlw	0
  2178  052A  07AA               	addwf	(LCD_str@str+1)^(0+128),f
  2179                           
  2180                           ;LCD.c: 166:         col++;
  2181  052B  3001               	movlw	1
  2182  052C  00AD               	movwf	??_LCD_str^(0+128)
  2183  052D  082D               	movf	??_LCD_str^(0+128),w
  2184  052E  07AC               	addwf	LCD_str@col^(0+128),f
  2185  052F  2CF1               	goto	l2081
  2186  0530                     __end_of_LCD_str:	
  2187                           
  2188                           	psect	text12
  2189  065C                     __ptext12:	
  2190 ;; *************** function _LCD_char *****************
  2191 ;; Defined at:
  2192 ;;		line 149 in file "LCD.c"
  2193 ;; Parameters:    Size  Location     Type
  2194 ;;  ch              1    wreg     unsigned char 
  2195 ;;  line            1    5[BANK1 ] enum E895
  2196 ;;  col             1    6[BANK1 ] enum E899
  2197 ;; Auto vars:     Size  Location     Type
  2198 ;;  ch              1    8[BANK1 ] unsigned char 
  2199 ;; Return value:  Size  Location     Type
  2200 ;;                  1    wreg      void 
  2201 ;; Registers used:
  2202 ;;		wreg, status,2, status,0, pclath, cstack
  2203 ;; Tracked objects:
  2204 ;;		On entry : 0/0
  2205 ;;		On exit  : 0/0
  2206 ;;		Unchanged: 0/0
  2207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2208 ;;      Params:         0       0       2       0       0
  2209 ;;      Locals:         0       0       1       0       0
  2210 ;;      Temps:          0       0       1       0       0
  2211 ;;      Totals:         0       0       4       0       0
  2212 ;;Total ram usage:        4 bytes
  2213 ;; Hardware stack levels used:    1
  2214 ;; Hardware stack levels required when called:   12
  2215 ;; This function calls:
  2216 ;;		_LCD_goTo
  2217 ;;		_LCD_out
  2218 ;; This function is called by:
  2219 ;;		_LCD_str
  2220 ;; This function uses a non-reentrant model
  2221 ;;
  2222                           
  2223                           
  2224                           ;psect for function _LCD_char
  2225  065C                     _LCD_char:	
  2226                           
  2227                           ;incstack = 0
  2228 ;; hardware stack exceeded
  2229                           ; Regs used in _LCD_char: [wreg+status,2+status,0+pclath+cstack]
  2230                           ;LCD_char@ch stored from wreg
  2231  065C  1683               	bsf	3,5	;RP0=1, select bank1
  2232  065D  1303               	bcf	3,6	;RP1=0, select bank1
  2233  065E  00A8               	movwf	LCD_char@ch^(0+128)
  2234                           
  2235                           ;LCD.c: 152:     LCD_goTo(line,col);
  2236  065F  0826               	movf	LCD_char@col^(0+128),w
  2237  0660  00A7               	movwf	??_LCD_char^(0+128)
  2238  0661  0827               	movf	??_LCD_char^(0+128),w
  2239  0662  00A0               	movwf	LCD_goTo@col^(0+128)
  2240  0663  0825               	movf	LCD_char@line^(0+128),w
  2241  0664  120A  118A  2721  120A  118A  	fcall	_LCD_goTo
  2242                           
  2243                           ;LCD.c: 155:     ((((((*((volatile tRegister8 *)(0x09))).Reg))) = (((((*((volatile tRegi
      +                          ster8 *)(0x09))).Reg)) & (~(1 << ((0))))) | (((1)) << ((0))))));
  2244  0669  1283               	bcf	3,5	;RP0=0, select bank0
  2245  066A  1303               	bcf	3,6	;RP1=0, select bank0
  2246  066B  0809               	movf	9,w	;volatile
  2247  066C  39FE               	andlw	254
  2248  066D  3801               	iorlw	1
  2249  066E  1683               	bsf	3,5	;RP0=1, select bank1
  2250  066F  1303               	bcf	3,6	;RP1=0, select bank1
  2251  0670  00A7               	movwf	??_LCD_char^(0+128)
  2252  0671  0827               	movf	??_LCD_char^(0+128),w
  2253  0672  1283               	bcf	3,5	;RP0=0, select bank0
  2254  0673  1303               	bcf	3,6	;RP1=0, select bank0
  2255  0674  0089               	movwf	9	;volatile
  2256                           
  2257                           ;LCD.c: 158:     LCD_out(ch);
  2258  0675  1683               	bsf	3,5	;RP0=1, select bank1
  2259  0676  1303               	bcf	3,6	;RP1=0, select bank1
  2260  0677  0828               	movf	LCD_char@ch^(0+128),w
  2261  0678  120A  118A  2020   	fcall	_LCD_out
  2262  067B  0008               	return
  2263  067C                     __end_of_LCD_char:	
  2264                           
  2265                           	psect	text13
  2266  0721                     __ptext13:	
  2267 ;; *************** function _LCD_goTo *****************
  2268 ;; Defined at:
  2269 ;;		line 211 in file "LCD.c"
  2270 ;; Parameters:    Size  Location     Type
  2271 ;;  line            1    wreg     enum E895
  2272 ;;  col             1    0[BANK1 ] enum E899
  2273 ;; Auto vars:     Size  Location     Type
  2274 ;;  line            1    3[BANK1 ] enum E895
  2275 ;;  address         1    4[BANK1 ] unsigned char 
  2276 ;; Return value:  Size  Location     Type
  2277 ;;                  1    wreg      void 
  2278 ;; Registers used:
  2279 ;;		wreg, status,2, status,0, pclath, cstack
  2280 ;; Tracked objects:
  2281 ;;		On entry : 0/0
  2282 ;;		On exit  : 0/0
  2283 ;;		Unchanged: 0/0
  2284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2285 ;;      Params:         0       0       1       0       0
  2286 ;;      Locals:         0       0       2       0       0
  2287 ;;      Temps:          0       0       2       0       0
  2288 ;;      Totals:         0       0       5       0       0
  2289 ;;Total ram usage:        5 bytes
  2290 ;; Hardware stack levels used:    1
  2291 ;; Hardware stack levels required when called:   11
  2292 ;; This function calls:
  2293 ;;		_LCD_cmd
  2294 ;; This function is called by:
  2295 ;;		_LCD_char
  2296 ;; This function uses a non-reentrant model
  2297 ;;
  2298                           
  2299                           
  2300                           ;psect for function _LCD_goTo
  2301  0721                     _LCD_goTo:	
  2302                           
  2303                           ;incstack = 0
  2304 ;; hardware stack exceeded
  2305                           ; Regs used in _LCD_goTo: [wreg+status,2+status,0+pclath+cstack]
  2306                           ;LCD_goTo@line stored from wreg
  2307  0721  1683               	bsf	3,5	;RP0=1, select bank1
  2308  0722  1303               	bcf	3,6	;RP1=0, select bank1
  2309  0723  00A3               	movwf	LCD_goTo@line^(0+128)
  2310                           
  2311                           ;LCD.c: 214:     tByte address;;LCD.c: 216:     address = (line * (0x40)) + col;
  2312  0724  0823               	movf	LCD_goTo@line^(0+128),w
  2313  0725  00A1               	movwf	??_LCD_goTo^(0+128)
  2314  0726  3006               	movlw	6
  2315  0727                     u2005:	
  2316  0727  1003               	clrc
  2317  0728  0DA1               	rlf	??_LCD_goTo^(0+128),f
  2318  0729  3EFF               	addlw	-1
  2319  072A  1D03               	skipz
  2320  072B  2F27               	goto	u2005
  2321  072C  0820               	movf	LCD_goTo@col^(0+128),w
  2322  072D  0721               	addwf	??_LCD_goTo^(0+128),w
  2323  072E  00A2               	movwf	(??_LCD_goTo+1)^(0+128)
  2324  072F  0822               	movf	(??_LCD_goTo+1)^(0+128),w
  2325  0730  00A4               	movwf	LCD_goTo@address^(0+128)
  2326                           
  2327                           ;LCD.c: 218:     LCD_cmd((0x80) | address);
  2328  0731  0824               	movf	LCD_goTo@address^(0+128),w
  2329  0732  3880               	iorlw	128
  2330  0733  120A  118A  2737   	fcall	_LCD_cmd
  2331  0736  0008               	return
  2332  0737                     __end_of_LCD_goTo:	
  2333                           
  2334                           	psect	text14
  2335  02EE                     __ptext14:	
  2336 ;; *************** function _LCD_init *****************
  2337 ;; Defined at:
  2338 ;;		line 82 in file "LCD.c"
  2339 ;; Parameters:    Size  Location     Type
  2340 ;;  mode            1    wreg     enum E891
  2341 ;; Auto vars:     Size  Location     Type
  2342 ;;  mode            1    2[BANK1 ] enum E891
  2343 ;; Return value:  Size  Location     Type
  2344 ;;                  1    wreg      void 
  2345 ;; Registers used:
  2346 ;;		wreg, status,2, status,0, pclath, cstack
  2347 ;; Tracked objects:
  2348 ;;		On entry : 0/0
  2349 ;;		On exit  : 0/0
  2350 ;;		Unchanged: 0/0
  2351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2352 ;;      Params:         0       0       0       0       0
  2353 ;;      Locals:         0       0       1       0       0
  2354 ;;      Temps:          0       0       2       0       0
  2355 ;;      Totals:         0       0       3       0       0
  2356 ;;Total ram usage:        3 bytes
  2357 ;; Hardware stack levels used:    1
  2358 ;; Hardware stack levels required when called:   11
  2359 ;; This function calls:
  2360 ;;		_LCD_cmd
  2361 ;; This function is called by:
  2362 ;;		_DSP_init
  2363 ;; This function uses a non-reentrant model
  2364 ;;
  2365                           
  2366                           
  2367                           ;psect for function _LCD_init
  2368  02EE                     _LCD_init:	
  2369                           
  2370                           ;incstack = 0
  2371 ;; hardware stack exceeded
  2372                           ; Regs used in _LCD_init: [wreg+status,2+status,0+pclath+cstack]
  2373                           ;LCD_init@mode stored from wreg
  2374  02EE  1683               	bsf	3,5	;RP0=1, select bank1
  2375  02EF  1303               	bcf	3,6	;RP1=0, select bank1
  2376  02F0  00A2               	movwf	LCD_init@mode^(0+128)
  2377                           
  2378                           ;LCD.c: 85:     ((((((*((volatile tRegister8 *)(0x89))).Reg))) = (((((*((volatile tRegis
      +                          ter8 *)(0x89))).Reg)) & (~(1 << ((0))))) | (((0)) << ((0))))));
  2379  02F1  0809               	movf	9,w	;volatile
  2380  02F2  39FE               	andlw	254
  2381  02F3  00A0               	movwf	??_LCD_init^(0+128)
  2382  02F4  0820               	movf	??_LCD_init^(0+128),w
  2383  02F5  0089               	movwf	9	;volatile
  2384                           
  2385                           ;LCD.c: 88:     ((((((*((volatile tRegister8 *)(0x89))).Reg))) = (((((*((volatile tRegis
      +                          ter8 *)(0x89))).Reg)) & (~(1 << ((1))))) | (((0)) << ((1))))));
  2386  02F6  0809               	movf	9,w	;volatile
  2387  02F7  39FD               	andlw	253
  2388  02F8  00A0               	movwf	??_LCD_init^(0+128)
  2389  02F9  0820               	movf	??_LCD_init^(0+128),w
  2390  02FA  0089               	movwf	9	;volatile
  2391                           
  2392                           ;LCD.c: 91:     ((((((*((volatile tRegister8 *)(0x88))).Reg))) = (((((*((volatile tRegis
      +                          ter8 *)(0x88))).Reg)) & (~(1 << ((0))))) | (((0)) << ((0))))));
  2393  02FB  0808               	movf	8,w	;volatile
  2394  02FC  39FE               	andlw	254
  2395  02FD  00A0               	movwf	??_LCD_init^(0+128)
  2396  02FE  0820               	movf	??_LCD_init^(0+128),w
  2397  02FF  0088               	movwf	8	;volatile
  2398                           
  2399                           ;LCD.c: 92:     ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile tRegis
      +                          ter8 *)(0x08))).Reg)) & (~(1 << ((0))))) | ((0) << ((0))))));
  2400  0300  1283               	bcf	3,5	;RP0=0, select bank0
  2401  0301  1303               	bcf	3,6	;RP1=0, select bank0
  2402  0302  0808               	movf	8,w	;volatile
  2403  0303  39FE               	andlw	254
  2404  0304  1683               	bsf	3,5	;RP0=1, select bank1
  2405  0305  1303               	bcf	3,6	;RP1=0, select bank1
  2406  0306  00A0               	movwf	??_LCD_init^(0+128)
  2407  0307  0820               	movf	??_LCD_init^(0+128),w
  2408  0308  1283               	bcf	3,5	;RP0=0, select bank0
  2409  0309  1303               	bcf	3,6	;RP1=0, select bank0
  2410  030A  0088               	movwf	8	;volatile
  2411                           
  2412                           ;LCD.c: 94:     ((((((*((volatile tRegister8 *)(0x88))).Reg))) = (((((*((volatile tRegis
      +                          ter8 *)(0x88))).Reg)) & (~(1 << ((1))))) | (((0)) << ((1))))));
  2413  030B  1683               	bsf	3,5	;RP0=1, select bank1
  2414  030C  1303               	bcf	3,6	;RP1=0, select bank1
  2415  030D  0808               	movf	8,w	;volatile
  2416  030E  39FD               	andlw	253
  2417  030F  00A0               	movwf	??_LCD_init^(0+128)
  2418  0310  0820               	movf	??_LCD_init^(0+128),w
  2419  0311  0088               	movwf	8	;volatile
  2420                           
  2421                           ;LCD.c: 95:     ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile tRegis
      +                          ter8 *)(0x08))).Reg)) & (~(1 << ((1))))) | ((0) << ((1))))));
  2422  0312  1283               	bcf	3,5	;RP0=0, select bank0
  2423  0313  1303               	bcf	3,6	;RP1=0, select bank0
  2424  0314  0808               	movf	8,w	;volatile
  2425  0315  39FD               	andlw	253
  2426  0316  1683               	bsf	3,5	;RP0=1, select bank1
  2427  0317  1303               	bcf	3,6	;RP1=0, select bank1
  2428  0318  00A0               	movwf	??_LCD_init^(0+128)
  2429  0319  0820               	movf	??_LCD_init^(0+128),w
  2430  031A  1283               	bcf	3,5	;RP0=0, select bank0
  2431  031B  1303               	bcf	3,6	;RP1=0, select bank0
  2432  031C  0088               	movwf	8	;volatile
  2433                           
  2434                           ;LCD.c: 97:     ((((((*((volatile tRegister8 *)(0x88))).Reg))) = (((((*((volatile tRegis
      +                          ter8 *)(0x88))).Reg)) & (~(1 << ((2))))) | (((0)) << ((2))))));
  2435  031D  1683               	bsf	3,5	;RP0=1, select bank1
  2436  031E  1303               	bcf	3,6	;RP1=0, select bank1
  2437  031F  0808               	movf	8,w	;volatile
  2438  0320  39FB               	andlw	251
  2439  0321  00A0               	movwf	??_LCD_init^(0+128)
  2440  0322  0820               	movf	??_LCD_init^(0+128),w
  2441  0323  0088               	movwf	8	;volatile
  2442                           
  2443                           ;LCD.c: 98:     ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile tRegis
      +                          ter8 *)(0x08))).Reg)) & (~(1 << ((2))))) | ((0) << ((2))))));
  2444  0324  1283               	bcf	3,5	;RP0=0, select bank0
  2445  0325  1303               	bcf	3,6	;RP1=0, select bank0
  2446  0326  0808               	movf	8,w	;volatile
  2447  0327  39FB               	andlw	251
  2448  0328  1683               	bsf	3,5	;RP0=1, select bank1
  2449  0329  1303               	bcf	3,6	;RP1=0, select bank1
  2450  032A  00A0               	movwf	??_LCD_init^(0+128)
  2451  032B  0820               	movf	??_LCD_init^(0+128),w
  2452  032C  1283               	bcf	3,5	;RP0=0, select bank0
  2453  032D  1303               	bcf	3,6	;RP1=0, select bank0
  2454  032E  0088               	movwf	8	;volatile
  2455                           
  2456                           ;LCD.c: 100:     ((((((*((volatile tRegister8 *)(0x88))).Reg))) = (((((*((volatile tRegi
      +                          ster8 *)(0x88))).Reg)) & (~(1 << ((3))))) | (((0)) << ((3))))));
  2457  032F  1683               	bsf	3,5	;RP0=1, select bank1
  2458  0330  1303               	bcf	3,6	;RP1=0, select bank1
  2459  0331  0808               	movf	8,w	;volatile
  2460  0332  39F7               	andlw	247
  2461  0333  00A0               	movwf	??_LCD_init^(0+128)
  2462  0334  0820               	movf	??_LCD_init^(0+128),w
  2463  0335  0088               	movwf	8	;volatile
  2464                           
  2465                           ;LCD.c: 101:     ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile tRegi
      +                          ster8 *)(0x08))).Reg)) & (~(1 << ((3))))) | ((0) << ((3))))));
  2466  0336  1283               	bcf	3,5	;RP0=0, select bank0
  2467  0337  1303               	bcf	3,6	;RP1=0, select bank0
  2468  0338  0808               	movf	8,w	;volatile
  2469  0339  39F7               	andlw	247
  2470  033A  1683               	bsf	3,5	;RP0=1, select bank1
  2471  033B  1303               	bcf	3,6	;RP1=0, select bank1
  2472  033C  00A0               	movwf	??_LCD_init^(0+128)
  2473  033D  0820               	movf	??_LCD_init^(0+128),w
  2474  033E  1283               	bcf	3,5	;RP0=0, select bank0
  2475  033F  1303               	bcf	3,6	;RP1=0, select bank0
  2476  0340  0088               	movwf	8	;volatile
  2477                           
  2478                           ;LCD.c: 103:     currentMode = mode;
  2479  0341  1683               	bsf	3,5	;RP0=1, select bank1
  2480  0342  1303               	bcf	3,6	;RP1=0, select bank1
  2481  0343  0822               	movf	LCD_init@mode^(0+128),w
  2482  0344  00A0               	movwf	??_LCD_init^(0+128)
  2483  0345  0820               	movf	??_LCD_init^(0+128),w
  2484  0346  1283               	bcf	3,5	;RP0=0, select bank0
  2485  0347  1303               	bcf	3,6	;RP1=0, select bank0
  2486  0348  00A0               	movwf	_currentMode
  2487                           
  2488                           ;LCD.c: 105:     if(LCD_8_MODE == mode){
  2489  0349  1683               	bsf	3,5	;RP0=1, select bank1
  2490  034A  1303               	bcf	3,6	;RP1=0, select bank1
  2491  034B  0322               	decf	LCD_init@mode^(0+128),w
  2492  034C  1D03               	btfss	3,2
  2493  034D  2B94               	goto	l2053
  2494                           
  2495                           ;LCD.c: 106:         ((((((*((volatile tRegister8 *)(0x88))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x88))).Reg)) & (~(1 << ((4))))) | (((0)) << ((4))))));
  2496  034E  0808               	movf	8,w	;volatile
  2497  034F  39EF               	andlw	239
  2498  0350  00A0               	movwf	??_LCD_init^(0+128)
  2499  0351  0820               	movf	??_LCD_init^(0+128),w
  2500  0352  0088               	movwf	8	;volatile
  2501                           
  2502                           ;LCD.c: 107:         ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x08))).Reg)) & (~(1 << ((4))))) | ((0) << ((4))))));
  2503  0353  1283               	bcf	3,5	;RP0=0, select bank0
  2504  0354  1303               	bcf	3,6	;RP1=0, select bank0
  2505  0355  0808               	movf	8,w	;volatile
  2506  0356  39EF               	andlw	239
  2507  0357  1683               	bsf	3,5	;RP0=1, select bank1
  2508  0358  1303               	bcf	3,6	;RP1=0, select bank1
  2509  0359  00A0               	movwf	??_LCD_init^(0+128)
  2510  035A  0820               	movf	??_LCD_init^(0+128),w
  2511  035B  1283               	bcf	3,5	;RP0=0, select bank0
  2512  035C  1303               	bcf	3,6	;RP1=0, select bank0
  2513  035D  0088               	movwf	8	;volatile
  2514                           
  2515                           ;LCD.c: 109:         ((((((*((volatile tRegister8 *)(0x88))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x88))).Reg)) & (~(1 << ((5))))) | (((0)) << ((5))))));
  2516  035E  1683               	bsf	3,5	;RP0=1, select bank1
  2517  035F  1303               	bcf	3,6	;RP1=0, select bank1
  2518  0360  0808               	movf	8,w	;volatile
  2519  0361  39DF               	andlw	223
  2520  0362  00A0               	movwf	??_LCD_init^(0+128)
  2521  0363  0820               	movf	??_LCD_init^(0+128),w
  2522  0364  0088               	movwf	8	;volatile
  2523                           
  2524                           ;LCD.c: 110:         ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x08))).Reg)) & (~(1 << ((5))))) | ((0) << ((5))))));
  2525  0365  1283               	bcf	3,5	;RP0=0, select bank0
  2526  0366  1303               	bcf	3,6	;RP1=0, select bank0
  2527  0367  0808               	movf	8,w	;volatile
  2528  0368  39DF               	andlw	223
  2529  0369  1683               	bsf	3,5	;RP0=1, select bank1
  2530  036A  1303               	bcf	3,6	;RP1=0, select bank1
  2531  036B  00A0               	movwf	??_LCD_init^(0+128)
  2532  036C  0820               	movf	??_LCD_init^(0+128),w
  2533  036D  1283               	bcf	3,5	;RP0=0, select bank0
  2534  036E  1303               	bcf	3,6	;RP1=0, select bank0
  2535  036F  0088               	movwf	8	;volatile
  2536                           
  2537                           ;LCD.c: 112:         ((((((*((volatile tRegister8 *)(0x88))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x88))).Reg)) & (~(1 << ((6))))) | (((0)) << ((6))))));
  2538  0370  1683               	bsf	3,5	;RP0=1, select bank1
  2539  0371  1303               	bcf	3,6	;RP1=0, select bank1
  2540  0372  0808               	movf	8,w	;volatile
  2541  0373  39BF               	andlw	191
  2542  0374  00A0               	movwf	??_LCD_init^(0+128)
  2543  0375  0820               	movf	??_LCD_init^(0+128),w
  2544  0376  0088               	movwf	8	;volatile
  2545                           
  2546                           ;LCD.c: 113:         ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x08))).Reg)) & (~(1 << ((6))))) | ((0) << ((6))))));
  2547  0377  1283               	bcf	3,5	;RP0=0, select bank0
  2548  0378  1303               	bcf	3,6	;RP1=0, select bank0
  2549  0379  0808               	movf	8,w	;volatile
  2550  037A  39BF               	andlw	191
  2551  037B  1683               	bsf	3,5	;RP0=1, select bank1
  2552  037C  1303               	bcf	3,6	;RP1=0, select bank1
  2553  037D  00A0               	movwf	??_LCD_init^(0+128)
  2554  037E  0820               	movf	??_LCD_init^(0+128),w
  2555  037F  1283               	bcf	3,5	;RP0=0, select bank0
  2556  0380  1303               	bcf	3,6	;RP1=0, select bank0
  2557  0381  0088               	movwf	8	;volatile
  2558                           
  2559                           ;LCD.c: 115:         ((((((*((volatile tRegister8 *)(0x88))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x88))).Reg)) & (~(1 << ((7))))) | (((0)) << ((7))))));
  2560  0382  1683               	bsf	3,5	;RP0=1, select bank1
  2561  0383  1303               	bcf	3,6	;RP1=0, select bank1
  2562  0384  0808               	movf	8,w	;volatile
  2563  0385  397F               	andlw	127
  2564  0386  00A0               	movwf	??_LCD_init^(0+128)
  2565  0387  0820               	movf	??_LCD_init^(0+128),w
  2566  0388  0088               	movwf	8	;volatile
  2567                           
  2568                           ;LCD.c: 116:         ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x08))).Reg)) & (~(1 << ((7))))) | ((0) << ((7))))));
  2569  0389  1283               	bcf	3,5	;RP0=0, select bank0
  2570  038A  1303               	bcf	3,6	;RP1=0, select bank0
  2571  038B  0808               	movf	8,w	;volatile
  2572  038C  397F               	andlw	127
  2573  038D  1683               	bsf	3,5	;RP0=1, select bank1
  2574  038E  1303               	bcf	3,6	;RP1=0, select bank1
  2575  038F  00A0               	movwf	??_LCD_init^(0+128)
  2576  0390  0820               	movf	??_LCD_init^(0+128),w
  2577  0391  1283               	bcf	3,5	;RP0=0, select bank0
  2578  0392  1303               	bcf	3,6	;RP1=0, select bank0
  2579  0393  0088               	movwf	8	;volatile
  2580  0394                     l2053:	
  2581                           
  2582                           ;LCD.c: 121:     _delay((unsigned long)((20)*(8000000/4000.0)));
  2583  0394  3034               	movlw	52
  2584  0395  1683               	bsf	3,5	;RP0=1, select bank1
  2585  0396  1303               	bcf	3,6	;RP1=0, select bank1
  2586  0397  00A1               	movwf	(??_LCD_init^(0+128)+1)
  2587  0398  30F1               	movlw	241
  2588  0399  00A0               	movwf	??_LCD_init^(0+128)
  2589  039A                     u2057:	
  2590  039A  0BA0               	decfsz	??_LCD_init^(0+128),f
  2591  039B  2B9A               	goto	u2057
  2592  039C  0BA1               	decfsz	(??_LCD_init^(0+128)+1),f
  2593  039D  2B9A               	goto	u2057
  2594                           
  2595                           ;LCD.c: 122:     LCD_cmd((0x30));
  2596  039E  3030               	movlw	48
  2597  039F  120A  118A  2737  120A  118A  	fcall	_LCD_cmd
  2598                           
  2599                           ;LCD.c: 123:     _delay((unsigned long)((5)*(8000000/4000.0)));
  2600  03A4  300D               	movlw	13
  2601  03A5  1683               	bsf	3,5	;RP0=1, select bank1
  2602  03A6  1303               	bcf	3,6	;RP1=0, select bank1
  2603  03A7  00A1               	movwf	(??_LCD_init^(0+128)+1)
  2604  03A8  30FB               	movlw	251
  2605  03A9  00A0               	movwf	??_LCD_init^(0+128)
  2606  03AA                     u2067:	
  2607  03AA  0BA0               	decfsz	??_LCD_init^(0+128),f
  2608  03AB  2BAA               	goto	u2067
  2609  03AC  0BA1               	decfsz	(??_LCD_init^(0+128)+1),f
  2610  03AD  2BAA               	goto	u2067
  2611                           
  2612                           ;LCD.c: 124:     LCD_cmd((0x30));
  2613  03AE  3030               	movlw	48
  2614  03AF  120A  118A  2737  120A  118A  	fcall	_LCD_cmd
  2615                           
  2616                           ;LCD.c: 125:     _delay((unsigned long)((1)*(8000000/4000.0)));
  2617  03B4  3003               	movlw	3
  2618  03B5  1683               	bsf	3,5	;RP0=1, select bank1
  2619  03B6  1303               	bcf	3,6	;RP1=0, select bank1
  2620  03B7  00A1               	movwf	(??_LCD_init^(0+128)+1)
  2621  03B8  3097               	movlw	151
  2622  03B9  00A0               	movwf	??_LCD_init^(0+128)
  2623  03BA                     u2077:	
  2624  03BA  0BA0               	decfsz	??_LCD_init^(0+128),f
  2625  03BB  2BBA               	goto	u2077
  2626  03BC  0BA1               	decfsz	(??_LCD_init^(0+128)+1),f
  2627  03BD  2BBA               	goto	u2077
  2628                           
  2629                           ;LCD.c: 126:     LCD_cmd((0x30));
  2630  03BE  3030               	movlw	48
  2631  03BF  120A  118A  2737  120A  118A  	fcall	_LCD_cmd
  2632                           
  2633                           ;LCD.c: 128:     if(LCD_8_MODE == currentMode){
  2634  03C4  1283               	bcf	3,5	;RP0=0, select bank0
  2635  03C5  1303               	bcf	3,6	;RP1=0, select bank0
  2636  03C6  0320               	decf	_currentMode,w
  2637  03C7  1D03               	btfss	3,2
  2638  03C8  2BCB               	goto	l2069
  2639                           
  2640                           ;LCD.c: 131:         LCD_cmd((0x20) | (0x10) | (0x08) | (0x00));
  2641  03C9  3038               	movlw	56
  2642  03CA  2BD8               	goto	L1
  2643  03CB                     l2069:	
  2644                           ;LCD.c: 133:     }else {
  2645                           
  2646                           
  2647                           ;LCD.c: 136:         LCD_cmd((0x33));
  2648  03CB  3033               	movlw	51
  2649  03CC  120A  118A  2737  120A  118A  	fcall	_LCD_cmd
  2650                           
  2651                           ;LCD.c: 137:         LCD_cmd((0x32));
  2652  03D1  3032               	movlw	50
  2653  03D2  120A  118A  2737  120A  118A  	fcall	_LCD_cmd
  2654                           
  2655                           ;LCD.c: 138:         LCD_cmd((0x20) | (0x00) | (0x08) | (0x00));
  2656  03D7  3028               	movlw	40
  2657  03D8                     L1:	
  2658  03D8  120A  118A  2737  120A  118A  	fcall	_LCD_cmd
  2659                           
  2660                           ;LCD.c: 142:    LCD_cmd((0x08) | (0x04) | (0x00) | (0x00));
  2661                           
  2662                           ;LCD.c: 139:     }
  2663  03DD  300C               	movlw	12
  2664  03DE  120A  118A  2737  120A  118A  	fcall	_LCD_cmd
  2665                           
  2666                           ;LCD.c: 145:     LCD_cmd((0x01));
  2667  03E3  3001               	movlw	1
  2668  03E4  120A  118A  2737  120A  118A  	fcall	_LCD_cmd
  2669                           
  2670                           ;LCD.c: 146:     _delay((unsigned long)((2)*(8000000/4000.0)));
  2671  03E9  3006               	movlw	6
  2672  03EA  1683               	bsf	3,5	;RP0=1, select bank1
  2673  03EB  1303               	bcf	3,6	;RP1=0, select bank1
  2674  03EC  00A1               	movwf	(??_LCD_init^(0+128)+1)
  2675  03ED  302F               	movlw	47
  2676  03EE  00A0               	movwf	??_LCD_init^(0+128)
  2677  03EF                     u2087:	
  2678  03EF  0BA0               	decfsz	??_LCD_init^(0+128),f
  2679  03F0  2BEF               	goto	u2087
  2680  03F1  0BA1               	decfsz	(??_LCD_init^(0+128)+1),f
  2681  03F2  2BEF               	goto	u2087
  2682  03F3  2BF4               	nop2
  2683  03F4  0008               	return
  2684  03F5                     __end_of_LCD_init:	
  2685                           
  2686                           	psect	text15
  2687  0737                     __ptext15:	
  2688 ;; *************** function _LCD_cmd *****************
  2689 ;; Defined at:
  2690 ;;		line 201 in file "LCD.c"
  2691 ;; Parameters:    Size  Location     Type
  2692 ;;  cmd             1    wreg     unsigned char 
  2693 ;; Auto vars:     Size  Location     Type
  2694 ;;  cmd             1   26[BANK0 ] unsigned char 
  2695 ;; Return value:  Size  Location     Type
  2696 ;;                  1    wreg      void 
  2697 ;; Registers used:
  2698 ;;		wreg, status,2, status,0, pclath, cstack
  2699 ;; Tracked objects:
  2700 ;;		On entry : 0/0
  2701 ;;		On exit  : 0/0
  2702 ;;		Unchanged: 0/0
  2703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2704 ;;      Params:         0       0       0       0       0
  2705 ;;      Locals:         0       1       0       0       0
  2706 ;;      Temps:          0       1       0       0       0
  2707 ;;      Totals:         0       2       0       0       0
  2708 ;;Total ram usage:        2 bytes
  2709 ;; Hardware stack levels used:    1
  2710 ;; Hardware stack levels required when called:   10
  2711 ;; This function calls:
  2712 ;;		_LCD_out
  2713 ;; This function is called by:
  2714 ;;		_LCD_init
  2715 ;;		_LCD_goTo
  2716 ;;		_LCD_clear
  2717 ;;		_LCD_ON
  2718 ;;		_LCD_OFF
  2719 ;;		_LCD_custom
  2720 ;; This function uses a non-reentrant model
  2721 ;;
  2722                           
  2723                           
  2724                           ;psect for function _LCD_cmd
  2725  0737                     _LCD_cmd:	
  2726                           
  2727                           ;incstack = 0
  2728 ;; hardware stack exceeded
  2729                           ; Regs used in _LCD_cmd: [wreg+status,2+status,0+pclath+cstack]
  2730                           ;LCD_cmd@cmd stored from wreg
  2731  0737  1283               	bcf	3,5	;RP0=0, select bank0
  2732  0738  1303               	bcf	3,6	;RP1=0, select bank0
  2733  0739  00DB               	movwf	LCD_cmd@cmd
  2734                           
  2735                           ;LCD.c: 205:     ((((((*((volatile tRegister8 *)(0x09))).Reg))) = (((((*((volatile tRegi
      +                          ster8 *)(0x09))).Reg)) & (~(1 << ((0))))) | (((0)) << ((0))))));
  2736  073A  0809               	movf	9,w	;volatile
  2737  073B  39FE               	andlw	254
  2738  073C  00DA               	movwf	??_LCD_cmd
  2739  073D  085A               	movf	??_LCD_cmd,w
  2740  073E  0089               	movwf	9	;volatile
  2741                           
  2742                           ;LCD.c: 206:     LCD_out(cmd);
  2743  073F  085B               	movf	LCD_cmd@cmd,w
  2744  0740  120A  118A  2020  120A  118A  	fcall	_LCD_out
  2745                           
  2746                           ;LCD.c: 207:     _delay((unsigned long)((50)*(8000000/4000000.0)));
  2747  0745  3020               	movlw	32
  2748  0746  1283               	bcf	3,5	;RP0=0, select bank0
  2749  0747  1303               	bcf	3,6	;RP1=0, select bank0
  2750  0748  00DA               	movwf	??_LCD_cmd
  2751  0749                     u2097:	
  2752  0749  0BDA               	decfsz	??_LCD_cmd,f
  2753  074A  2F49               	goto	u2097
  2754  074B  0000               	nop
  2755  074C  0008               	return
  2756  074D                     __end_of_LCD_cmd:	
  2757                           
  2758                           	psect	text16
  2759  0020                     __ptext16:	
  2760 ;; *************** function _LCD_out *****************
  2761 ;; Defined at:
  2762 ;;		line 232 in file "LCD.c"
  2763 ;; Parameters:    Size  Location     Type
  2764 ;;  data            1    wreg     unsigned char 
  2765 ;; Auto vars:     Size  Location     Type
  2766 ;;  data            1   24[BANK0 ] unsigned char 
  2767 ;; Return value:  Size  Location     Type
  2768 ;;                  1    wreg      void 
  2769 ;; Registers used:
  2770 ;;		wreg, status,2, status,0, pclath, cstack
  2771 ;; Tracked objects:
  2772 ;;		On entry : 0/0
  2773 ;;		On exit  : 0/0
  2774 ;;		Unchanged: 0/0
  2775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2776 ;;      Params:         0       0       0       0       0
  2777 ;;      Locals:         0       1       0       0       0
  2778 ;;      Temps:          0       3       0       0       0
  2779 ;;      Totals:         0       4       0       0       0
  2780 ;;Total ram usage:        4 bytes
  2781 ;; Hardware stack levels used:    1
  2782 ;; Hardware stack levels required when called:    9
  2783 ;; This function calls:
  2784 ;;		_LCD_latch
  2785 ;; This function is called by:
  2786 ;;		_LCD_char
  2787 ;;		_LCD_cmd
  2788 ;;		_LCD_custom
  2789 ;; This function uses a non-reentrant model
  2790 ;;
  2791                           
  2792                           
  2793                           ;psect for function _LCD_out
  2794  0020                     _LCD_out:	
  2795                           
  2796                           ;incstack = 0
  2797 ;; hardware stack exceeded
  2798                           ; Regs used in _LCD_out: [wreg+status,2+status,0+pclath+cstack]
  2799                           ;LCD_out@data stored from wreg
  2800  0020  1283               	bcf	3,5	;RP0=0, select bank0
  2801  0021  1303               	bcf	3,6	;RP1=0, select bank0
  2802  0022  00D9               	movwf	LCD_out@data
  2803                           
  2804                           ;LCD.c: 234:     if(LCD_4_MODE == currentMode){
  2805  0023  0820               	movf	_currentMode,w
  2806  0024  1D03               	btfss	3,2
  2807  0025  28E0               	goto	l2025
  2808                           
  2809                           ;LCD.c: 237:         ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x08))).Reg)) & (~(1 << ((0))))) | ((data & (1 << 4)) >> 4 << ((0))))));
  2810  0026  0859               	movf	LCD_out@data,w
  2811  0027  00D6               	movwf	??_LCD_out
  2812  0028  3004               	movlw	4
  2813  0029                     u1755:	
  2814  0029  1003               	clrc
  2815  002A  0CD6               	rrf	??_LCD_out,f
  2816  002B  3EFF               	addlw	-1
  2817  002C  1D03               	skipz
  2818  002D  2829               	goto	u1755
  2819  002E  3001               	movlw	1
  2820  002F  0556               	andwf	??_LCD_out,w
  2821  0030  00D7               	movwf	??_LCD_out+1
  2822  0031  0808               	movf	8,w	;volatile
  2823  0032  39FE               	andlw	254
  2824  0033  0457               	iorwf	??_LCD_out+1,w
  2825  0034  00D8               	movwf	??_LCD_out+2
  2826  0035  0858               	movf	??_LCD_out+2,w
  2827  0036  0088               	movwf	8	;volatile
  2828                           
  2829                           ;LCD.c: 238:         ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x08))).Reg)) & (~(1 << ((1))))) | ((data & (1 << 5)) >> 5 << ((1))))));
  2830  0037  0859               	movf	LCD_out@data,w
  2831  0038  00D6               	movwf	??_LCD_out
  2832  0039  3005               	movlw	5
  2833  003A                     u1765:	
  2834  003A  1003               	clrc
  2835  003B  0CD6               	rrf	??_LCD_out,f
  2836  003C  3EFF               	addlw	-1
  2837  003D  1D03               	skipz
  2838  003E  283A               	goto	u1765
  2839  003F  0856               	movf	??_LCD_out,w
  2840  0040  3901               	andlw	1
  2841  0041  00D7               	movwf	??_LCD_out+1
  2842  0042  3001               	movlw	1
  2843  0043                     u1775:	
  2844  0043  1003               	clrc
  2845  0044  0DD7               	rlf	??_LCD_out+1,f
  2846  0045  3EFF               	addlw	-1
  2847  0046  1D03               	skipz
  2848  0047  2843               	goto	u1775
  2849  0048  0808               	movf	8,w	;volatile
  2850  0049  39FD               	andlw	253
  2851  004A  0457               	iorwf	??_LCD_out+1,w
  2852  004B  00D8               	movwf	??_LCD_out+2
  2853  004C  0858               	movf	??_LCD_out+2,w
  2854  004D  0088               	movwf	8	;volatile
  2855                           
  2856                           ;LCD.c: 239:         ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x08))).Reg)) & (~(1 << ((2))))) | ((data & (1 << 6)) >> 6 << ((2))))));
  2857  004E  0859               	movf	LCD_out@data,w
  2858  004F  00D6               	movwf	??_LCD_out
  2859  0050  3006               	movlw	6
  2860  0051                     u1785:	
  2861  0051  1003               	clrc
  2862  0052  0CD6               	rrf	??_LCD_out,f
  2863  0053  3EFF               	addlw	-1
  2864  0054  1D03               	skipz
  2865  0055  2851               	goto	u1785
  2866  0056  0856               	movf	??_LCD_out,w
  2867  0057  3901               	andlw	1
  2868  0058  00D7               	movwf	??_LCD_out+1
  2869  0059  3002               	movlw	2
  2870  005A                     u1795:	
  2871  005A  1003               	clrc
  2872  005B  0DD7               	rlf	??_LCD_out+1,f
  2873  005C  3EFF               	addlw	-1
  2874  005D  1D03               	skipz
  2875  005E  285A               	goto	u1795
  2876  005F  0808               	movf	8,w	;volatile
  2877  0060  39FB               	andlw	251
  2878  0061  0457               	iorwf	??_LCD_out+1,w
  2879  0062  00D8               	movwf	??_LCD_out+2
  2880  0063  0858               	movf	??_LCD_out+2,w
  2881  0064  0088               	movwf	8	;volatile
  2882                           
  2883                           ;LCD.c: 240:         ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x08))).Reg)) & (~(1 << ((3))))) | ((data & (1 << 7)) >> 7 << ((3))))));
  2884  0065  0859               	movf	LCD_out@data,w
  2885  0066  00D6               	movwf	??_LCD_out
  2886  0067  3007               	movlw	7
  2887  0068                     u1805:	
  2888  0068  1003               	clrc
  2889  0069  0CD6               	rrf	??_LCD_out,f
  2890  006A  3EFF               	addlw	-1
  2891  006B  1D03               	skipz
  2892  006C  2868               	goto	u1805
  2893  006D  0856               	movf	??_LCD_out,w
  2894  006E  3901               	andlw	1
  2895  006F  00D7               	movwf	??_LCD_out+1
  2896  0070  3003               	movlw	3
  2897  0071                     u1815:	
  2898  0071  1003               	clrc
  2899  0072  0DD7               	rlf	??_LCD_out+1,f
  2900  0073  3EFF               	addlw	-1
  2901  0074  1D03               	skipz
  2902  0075  2871               	goto	u1815
  2903  0076  0808               	movf	8,w	;volatile
  2904  0077  39F7               	andlw	247
  2905  0078  0457               	iorwf	??_LCD_out+1,w
  2906  0079  00D8               	movwf	??_LCD_out+2
  2907  007A  0858               	movf	??_LCD_out+2,w
  2908  007B  0088               	movwf	8	;volatile
  2909                           
  2910                           ;LCD.c: 242:         LCD_latch();
  2911  007C  120A  118A  279A  120A  118A  	fcall	_LCD_latch
  2912                           
  2913                           ;LCD.c: 244:         _delay((unsigned long)((100)*(8000000/4000000.0)));
  2914  0081  3041               	movlw	65
  2915  0082  1283               	bcf	3,5	;RP0=0, select bank0
  2916  0083  1303               	bcf	3,6	;RP1=0, select bank0
  2917  0084  00D6               	movwf	??_LCD_out
  2918  0085                     u2107:	
  2919  0085  0BD6               	decfsz	??_LCD_out,f
  2920  0086  2885               	goto	u2107
  2921  0087  2888               	nop2
  2922                           
  2923                           ;LCD.c: 246:         ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x08))).Reg)) & (~(1 << ((0))))) | ((data & (1 << 0)) >> 0 << ((0))))));
  2924  0088  3001               	movlw	1
  2925  0089  1283               	bcf	3,5	;RP0=0, select bank0
  2926  008A  1303               	bcf	3,6	;RP1=0, select bank0
  2927  008B  0559               	andwf	LCD_out@data,w
  2928  008C  00D6               	movwf	??_LCD_out
  2929  008D  0808               	movf	8,w	;volatile
  2930  008E  39FE               	andlw	254
  2931  008F  0456               	iorwf	??_LCD_out,w
  2932  0090  00D7               	movwf	??_LCD_out+1
  2933  0091  0857               	movf	??_LCD_out+1,w
  2934  0092  0088               	movwf	8	;volatile
  2935                           
  2936                           ;LCD.c: 247:         ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x08))).Reg)) & (~(1 << ((1))))) | ((data & (1 << 1)) >> 1 << ((1))))));
  2937  0093  0859               	movf	LCD_out@data,w
  2938  0094  00D6               	movwf	??_LCD_out
  2939  0095  1003               	clrc
  2940  0096  0C56               	rrf	??_LCD_out,w
  2941  0097  3901               	andlw	1
  2942  0098  00D7               	movwf	??_LCD_out+1
  2943  0099  3001               	movlw	1
  2944  009A                     u1825:	
  2945  009A  1003               	clrc
  2946  009B  0DD7               	rlf	??_LCD_out+1,f
  2947  009C  3EFF               	addlw	-1
  2948  009D  1D03               	skipz
  2949  009E  289A               	goto	u1825
  2950  009F  0808               	movf	8,w	;volatile
  2951  00A0  39FD               	andlw	253
  2952  00A1  0457               	iorwf	??_LCD_out+1,w
  2953  00A2  00D8               	movwf	??_LCD_out+2
  2954  00A3  0858               	movf	??_LCD_out+2,w
  2955  00A4  0088               	movwf	8	;volatile
  2956                           
  2957                           ;LCD.c: 248:         ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x08))).Reg)) & (~(1 << ((2))))) | ((data & (1 << 2)) >> 2 << ((2))))));
  2958  00A5  0859               	movf	LCD_out@data,w
  2959  00A6  00D6               	movwf	??_LCD_out
  2960  00A7  3002               	movlw	2
  2961  00A8                     u1835:	
  2962  00A8  1003               	clrc
  2963  00A9  0CD6               	rrf	??_LCD_out,f
  2964  00AA  3EFF               	addlw	-1
  2965  00AB  1D03               	skipz
  2966  00AC  28A8               	goto	u1835
  2967  00AD  0856               	movf	??_LCD_out,w
  2968  00AE  3901               	andlw	1
  2969  00AF  00D7               	movwf	??_LCD_out+1
  2970  00B0  3002               	movlw	2
  2971  00B1                     u1845:	
  2972  00B1  1003               	clrc
  2973  00B2  0DD7               	rlf	??_LCD_out+1,f
  2974  00B3  3EFF               	addlw	-1
  2975  00B4  1D03               	skipz
  2976  00B5  28B1               	goto	u1845
  2977  00B6  0808               	movf	8,w	;volatile
  2978  00B7  39FB               	andlw	251
  2979  00B8  0457               	iorwf	??_LCD_out+1,w
  2980  00B9  00D8               	movwf	??_LCD_out+2
  2981  00BA  0858               	movf	??_LCD_out+2,w
  2982  00BB  0088               	movwf	8	;volatile
  2983                           
  2984                           ;LCD.c: 249:         ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x08))).Reg)) & (~(1 << ((3))))) | ((data & (1 << 3)) >> 3 << ((3))))));
  2985  00BC  0859               	movf	LCD_out@data,w
  2986  00BD  00D6               	movwf	??_LCD_out
  2987  00BE  3003               	movlw	3
  2988  00BF                     u1855:	
  2989  00BF  1003               	clrc
  2990  00C0  0CD6               	rrf	??_LCD_out,f
  2991  00C1  3EFF               	addlw	-1
  2992  00C2  1D03               	skipz
  2993  00C3  28BF               	goto	u1855
  2994  00C4  0856               	movf	??_LCD_out,w
  2995  00C5  3901               	andlw	1
  2996  00C6  00D7               	movwf	??_LCD_out+1
  2997  00C7  3003               	movlw	3
  2998  00C8                     u1865:	
  2999  00C8  1003               	clrc
  3000  00C9  0DD7               	rlf	??_LCD_out+1,f
  3001  00CA  3EFF               	addlw	-1
  3002  00CB  1D03               	skipz
  3003  00CC  28C8               	goto	u1865
  3004  00CD  0808               	movf	8,w	;volatile
  3005  00CE  39F7               	andlw	247
  3006  00CF  0457               	iorwf	??_LCD_out+1,w
  3007  00D0  00D8               	movwf	??_LCD_out+2
  3008  00D1  0858               	movf	??_LCD_out+2,w
  3009  00D2  0088               	movwf	8	;volatile
  3010                           
  3011                           ;LCD.c: 251:         LCD_latch();
  3012  00D3  120A  118A  279A  120A  118A  	fcall	_LCD_latch
  3013                           
  3014                           ;LCD.c: 252:         _delay((unsigned long)((100)*(8000000/4000000.0)));
  3015  00D8  3041               	movlw	65
  3016  00D9  1283               	bcf	3,5	;RP0=0, select bank0
  3017  00DA  1303               	bcf	3,6	;RP1=0, select bank0
  3018  00DB  00D6               	movwf	??_LCD_out
  3019  00DC                     u2117:	
  3020  00DC  0BD6               	decfsz	??_LCD_out,f
  3021  00DD  28DC               	goto	u2117
  3022  00DE  28DF               	nop2
  3023                           
  3024                           ;LCD.c: 253:     }else {
  3025  00DF  0008               	return
  3026  00E0                     l2025:	
  3027                           
  3028                           ;LCD.c: 255:         ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x08))).Reg)) & (~(1 << ((0))))) | ((data & (1 << 0)) >> 0 << ((0))))));
  3029  00E0  3001               	movlw	1
  3030  00E1  0559               	andwf	LCD_out@data,w
  3031  00E2  00D6               	movwf	??_LCD_out
  3032  00E3  0808               	movf	8,w	;volatile
  3033  00E4  39FE               	andlw	254
  3034  00E5  0456               	iorwf	??_LCD_out,w
  3035  00E6  00D7               	movwf	??_LCD_out+1
  3036  00E7  0857               	movf	??_LCD_out+1,w
  3037  00E8  0088               	movwf	8	;volatile
  3038                           
  3039                           ;LCD.c: 256:         ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x08))).Reg)) & (~(1 << ((1))))) | ((data & (1 << 1)) >> 1 << ((1))))));
  3040  00E9  0859               	movf	LCD_out@data,w
  3041  00EA  00D6               	movwf	??_LCD_out
  3042  00EB  1003               	clrc
  3043  00EC  0C56               	rrf	??_LCD_out,w
  3044  00ED  3901               	andlw	1
  3045  00EE  00D7               	movwf	??_LCD_out+1
  3046  00EF  3001               	movlw	1
  3047  00F0                     u1875:	
  3048  00F0  1003               	clrc
  3049  00F1  0DD7               	rlf	??_LCD_out+1,f
  3050  00F2  3EFF               	addlw	-1
  3051  00F3  1D03               	skipz
  3052  00F4  28F0               	goto	u1875
  3053  00F5  0808               	movf	8,w	;volatile
  3054  00F6  39FD               	andlw	253
  3055  00F7  0457               	iorwf	??_LCD_out+1,w
  3056  00F8  00D8               	movwf	??_LCD_out+2
  3057  00F9  0858               	movf	??_LCD_out+2,w
  3058  00FA  0088               	movwf	8	;volatile
  3059                           
  3060                           ;LCD.c: 257:         ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x08))).Reg)) & (~(1 << ((2))))) | ((data & (1 << 2)) >> 2 << ((2))))));
  3061  00FB  0859               	movf	LCD_out@data,w
  3062  00FC  00D6               	movwf	??_LCD_out
  3063  00FD  3002               	movlw	2
  3064  00FE                     u1885:	
  3065  00FE  1003               	clrc
  3066  00FF  0CD6               	rrf	??_LCD_out,f
  3067  0100  3EFF               	addlw	-1
  3068  0101  1D03               	skipz
  3069  0102  28FE               	goto	u1885
  3070  0103  0856               	movf	??_LCD_out,w
  3071  0104  3901               	andlw	1
  3072  0105  00D7               	movwf	??_LCD_out+1
  3073  0106  3002               	movlw	2
  3074  0107                     u1895:	
  3075  0107  1003               	clrc
  3076  0108  0DD7               	rlf	??_LCD_out+1,f
  3077  0109  3EFF               	addlw	-1
  3078  010A  1D03               	skipz
  3079  010B  2907               	goto	u1895
  3080  010C  0808               	movf	8,w	;volatile
  3081  010D  39FB               	andlw	251
  3082  010E  0457               	iorwf	??_LCD_out+1,w
  3083  010F  00D8               	movwf	??_LCD_out+2
  3084  0110  0858               	movf	??_LCD_out+2,w
  3085  0111  0088               	movwf	8	;volatile
  3086                           
  3087                           ;LCD.c: 258:         ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x08))).Reg)) & (~(1 << ((3))))) | ((data & (1 << 3)) >> 3 << ((3))))));
  3088  0112  0859               	movf	LCD_out@data,w
  3089  0113  00D6               	movwf	??_LCD_out
  3090  0114  3003               	movlw	3
  3091  0115                     u1905:	
  3092  0115  1003               	clrc
  3093  0116  0CD6               	rrf	??_LCD_out,f
  3094  0117  3EFF               	addlw	-1
  3095  0118  1D03               	skipz
  3096  0119  2915               	goto	u1905
  3097  011A  0856               	movf	??_LCD_out,w
  3098  011B  3901               	andlw	1
  3099  011C  00D7               	movwf	??_LCD_out+1
  3100  011D  3003               	movlw	3
  3101  011E                     u1915:	
  3102  011E  1003               	clrc
  3103  011F  0DD7               	rlf	??_LCD_out+1,f
  3104  0120  3EFF               	addlw	-1
  3105  0121  1D03               	skipz
  3106  0122  291E               	goto	u1915
  3107  0123  0808               	movf	8,w	;volatile
  3108  0124  39F7               	andlw	247
  3109  0125  0457               	iorwf	??_LCD_out+1,w
  3110  0126  00D8               	movwf	??_LCD_out+2
  3111  0127  0858               	movf	??_LCD_out+2,w
  3112  0128  0088               	movwf	8	;volatile
  3113                           
  3114                           ;LCD.c: 259:         ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x08))).Reg)) & (~(1 << ((4))))) | ((data & (1 << 4)) >> 4 << ((4))))));
  3115  0129  0859               	movf	LCD_out@data,w
  3116  012A  00D6               	movwf	??_LCD_out
  3117  012B  3004               	movlw	4
  3118  012C                     u1925:	
  3119  012C  1003               	clrc
  3120  012D  0CD6               	rrf	??_LCD_out,f
  3121  012E  3EFF               	addlw	-1
  3122  012F  1D03               	skipz
  3123  0130  292C               	goto	u1925
  3124  0131  0856               	movf	??_LCD_out,w
  3125  0132  3901               	andlw	1
  3126  0133  00D7               	movwf	??_LCD_out+1
  3127  0134  3004               	movlw	4
  3128  0135                     u1935:	
  3129  0135  1003               	clrc
  3130  0136  0DD7               	rlf	??_LCD_out+1,f
  3131  0137  3EFF               	addlw	-1
  3132  0138  1D03               	skipz
  3133  0139  2935               	goto	u1935
  3134  013A  0808               	movf	8,w	;volatile
  3135  013B  39EF               	andlw	239
  3136  013C  0457               	iorwf	??_LCD_out+1,w
  3137  013D  00D8               	movwf	??_LCD_out+2
  3138  013E  0858               	movf	??_LCD_out+2,w
  3139  013F  0088               	movwf	8	;volatile
  3140                           
  3141                           ;LCD.c: 260:         ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x08))).Reg)) & (~(1 << ((5))))) | ((data & (1 << 5)) >> 5 << ((5))))));
  3142  0140  0859               	movf	LCD_out@data,w
  3143  0141  00D6               	movwf	??_LCD_out
  3144  0142  3005               	movlw	5
  3145  0143                     u1945:	
  3146  0143  1003               	clrc
  3147  0144  0CD6               	rrf	??_LCD_out,f
  3148  0145  3EFF               	addlw	-1
  3149  0146  1D03               	skipz
  3150  0147  2943               	goto	u1945
  3151  0148  0856               	movf	??_LCD_out,w
  3152  0149  3901               	andlw	1
  3153  014A  00D7               	movwf	??_LCD_out+1
  3154  014B  3005               	movlw	5
  3155  014C                     u1955:	
  3156  014C  1003               	clrc
  3157  014D  0DD7               	rlf	??_LCD_out+1,f
  3158  014E  3EFF               	addlw	-1
  3159  014F  1D03               	skipz
  3160  0150  294C               	goto	u1955
  3161  0151  0808               	movf	8,w	;volatile
  3162  0152  39DF               	andlw	223
  3163  0153  0457               	iorwf	??_LCD_out+1,w
  3164  0154  00D8               	movwf	??_LCD_out+2
  3165  0155  0858               	movf	??_LCD_out+2,w
  3166  0156  0088               	movwf	8	;volatile
  3167                           
  3168                           ;LCD.c: 261:         ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x08))).Reg)) & (~(1 << ((6))))) | ((data & (1 << 6)) >> 6 << ((6))))));
  3169  0157  0859               	movf	LCD_out@data,w
  3170  0158  00D6               	movwf	??_LCD_out
  3171  0159  3006               	movlw	6
  3172  015A                     u1965:	
  3173  015A  1003               	clrc
  3174  015B  0CD6               	rrf	??_LCD_out,f
  3175  015C  3EFF               	addlw	-1
  3176  015D  1D03               	skipz
  3177  015E  295A               	goto	u1965
  3178  015F  0856               	movf	??_LCD_out,w
  3179  0160  3901               	andlw	1
  3180  0161  00D7               	movwf	??_LCD_out+1
  3181  0162  3006               	movlw	6
  3182  0163                     u1975:	
  3183  0163  1003               	clrc
  3184  0164  0DD7               	rlf	??_LCD_out+1,f
  3185  0165  3EFF               	addlw	-1
  3186  0166  1D03               	skipz
  3187  0167  2963               	goto	u1975
  3188  0168  0808               	movf	8,w	;volatile
  3189  0169  39BF               	andlw	191
  3190  016A  0457               	iorwf	??_LCD_out+1,w
  3191  016B  00D8               	movwf	??_LCD_out+2
  3192  016C  0858               	movf	??_LCD_out+2,w
  3193  016D  0088               	movwf	8	;volatile
  3194                           
  3195                           ;LCD.c: 262:         ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x08))).Reg)) & (~(1 << ((7))))) | ((data & (1 << 7)) >> 7 << ((7))))));
  3196  016E  0859               	movf	LCD_out@data,w
  3197  016F  00D6               	movwf	??_LCD_out
  3198  0170  3007               	movlw	7
  3199  0171                     u1985:	
  3200  0171  1003               	clrc
  3201  0172  0CD6               	rrf	??_LCD_out,f
  3202  0173  3EFF               	addlw	-1
  3203  0174  1D03               	skipz
  3204  0175  2971               	goto	u1985
  3205  0176  0856               	movf	??_LCD_out,w
  3206  0177  3901               	andlw	1
  3207  0178  00D7               	movwf	??_LCD_out+1
  3208  0179  3007               	movlw	7
  3209  017A                     u1995:	
  3210  017A  1003               	clrc
  3211  017B  0DD7               	rlf	??_LCD_out+1,f
  3212  017C  3EFF               	addlw	-1
  3213  017D  1D03               	skipz
  3214  017E  297A               	goto	u1995
  3215  017F  0808               	movf	8,w	;volatile
  3216  0180  397F               	andlw	127
  3217  0181  0457               	iorwf	??_LCD_out+1,w
  3218  0182  00D8               	movwf	??_LCD_out+2
  3219  0183  0858               	movf	??_LCD_out+2,w
  3220  0184  0088               	movwf	8	;volatile
  3221                           
  3222                           ;LCD.c: 263:         LCD_latch();
  3223  0185  120A  118A  279A   	fcall	_LCD_latch
  3224  0188  0008               	return
  3225  0189                     __end_of_LCD_out:	
  3226                           
  3227                           	psect	text17
  3228  079A                     __ptext17:	
  3229 ;; *************** function _LCD_latch *****************
  3230 ;; Defined at:
  3231 ;;		line 221 in file "LCD.c"
  3232 ;; Parameters:    Size  Location     Type
  3233 ;;		None
  3234 ;; Auto vars:     Size  Location     Type
  3235 ;;		None
  3236 ;; Return value:  Size  Location     Type
  3237 ;;                  1    wreg      void 
  3238 ;; Registers used:
  3239 ;;		wreg, status,2
  3240 ;; Tracked objects:
  3241 ;;		On entry : 0/0
  3242 ;;		On exit  : 0/0
  3243 ;;		Unchanged: 0/0
  3244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3245 ;;      Params:         0       0       0       0       0
  3246 ;;      Locals:         0       0       0       0       0
  3247 ;;      Temps:          0       1       0       0       0
  3248 ;;      Totals:         0       1       0       0       0
  3249 ;;Total ram usage:        1 bytes
  3250 ;; Hardware stack levels used:    1
  3251 ;; Hardware stack levels required when called:    8
  3252 ;; This function calls:
  3253 ;;		Nothing
  3254 ;; This function is called by:
  3255 ;;		_LCD_out
  3256 ;; This function uses a non-reentrant model
  3257 ;;
  3258                           
  3259                           
  3260                           ;psect for function _LCD_latch
  3261  079A                     _LCD_latch:	
  3262                           
  3263                           ;LCD.c: 225:     ((((((*((volatile tRegister8 *)(0x09))).Reg))) = (((((*((volatile tRegi
      +                          ster8 *)(0x09))).Reg)) & (~(1 << ((1))))) | ((1) << ((1))))));
  3264                           
  3265                           ;incstack = 0
  3266 ;; hardware stack exceeded
  3267                           ; Regs used in _LCD_latch: [wreg+status,2]
  3268  079A  1283               	bcf	3,5	;RP0=0, select bank0
  3269  079B  1303               	bcf	3,6	;RP1=0, select bank0
  3270  079C  0809               	movf	9,w	;volatile
  3271  079D  39FD               	andlw	253
  3272  079E  3802               	iorlw	2
  3273  079F  00D5               	movwf	??_LCD_latch
  3274  07A0  0855               	movf	??_LCD_latch,w
  3275  07A1  0089               	movwf	9	;volatile
  3276                           
  3277                           ;LCD.c: 226:     _delay((unsigned long)((1)*(8000000/4000000.0)));
  3278  07A2  2FA3               	nop2	;2 cycle nop
  3279                           
  3280                           ;LCD.c: 227:     ((((((*((volatile tRegister8 *)(0x09))).Reg))) = (((((*((volatile tRegi
      +                          ster8 *)(0x09))).Reg)) & (~(1 << ((1))))) | ((0) << ((1))))));
  3281  07A3  1283               	bcf	3,5	;RP0=0, select bank0
  3282  07A4  1303               	bcf	3,6	;RP1=0, select bank0
  3283  07A5  0809               	movf	9,w	;volatile
  3284  07A6  39FD               	andlw	253
  3285  07A7  00D5               	movwf	??_LCD_latch
  3286  07A8  0855               	movf	??_LCD_latch,w
  3287  07A9  0089               	movwf	9	;volatile
  3288                           
  3289                           ;LCD.c: 228:     _delay((unsigned long)((1)*(8000000/4000000.0)));
  3290  07AA  2FAB               	nop2	;2 cycle nop
  3291  07AB  0008               	return
  3292  07AC                     __end_of_LCD_latch:	
  3293                           
  3294                           	psect	text18
  3295  056C                     __ptext18:	
  3296 ;; *************** function _ISR *****************
  3297 ;; Defined at:
  3298 ;;		line 32 in file "VolumeControl.c"
  3299 ;; Parameters:    Size  Location     Type
  3300 ;;		None
  3301 ;; Auto vars:     Size  Location     Type
  3302 ;;		None
  3303 ;; Return value:  Size  Location     Type
  3304 ;;                  1    wreg      void 
  3305 ;; Registers used:
  3306 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3307 ;; Tracked objects:
  3308 ;;		On entry : 0/0
  3309 ;;		On exit  : 0/0
  3310 ;;		Unchanged: 0/0
  3311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3312 ;;      Params:         0       0       0       0       0
  3313 ;;      Locals:         0       0       0       0       0
  3314 ;;      Temps:          0       7       0       0       0
  3315 ;;      Totals:         0       7       0       0       0
  3316 ;;Total ram usage:        7 bytes
  3317 ;; Hardware stack levels used:    1
  3318 ;; Hardware stack levels required when called:    7
  3319 ;; This function calls:
  3320 ;;		_DSP_update
  3321 ;;		_SLIDER_update
  3322 ;;		i1_timer0_reload
  3323 ;; This function is called by:
  3324 ;;		Interrupt level 1
  3325 ;; This function uses a non-reentrant model
  3326 ;;
  3327                           
  3328                           
  3329                           ;psect for function _ISR
  3330  056C                     _ISR:	
  3331                           
  3332                           ;VolumeControl.c: 34:     if((((*((volatile tRegister8 *)(0x0B))).Bits.BIT2))) {
  3333  056C  1D0B               	btfss	11,2	;volatile
  3334  056D  2D99               	goto	i1l88
  3335                           
  3336                           ;VolumeControl.c: 35:         ((((((*((volatile tRegister8 *)(0x07))).Reg)) = ((((*((vol
      +                          atile tRegister8 *)(0x07))).Reg) & (~(1 << (5)))) | (!((((*((volatile tRegister8 *)(0x07
      +                          ))).Reg) >> (5)) & (1)) << (5))))));
  3337  056E  0807               	movf	7,w	;volatile
  3338  056F  00CE               	movwf	??_ISR
  3339  0570  3005               	movlw	5
  3340  0571                     u153_25:	
  3341  0571  1003               	clrc
  3342  0572  0CCE               	rrf	??_ISR,f
  3343  0573  3EFF               	addlw	-1
  3344  0574  1D03               	skipz
  3345  0575  2D71               	goto	u153_25
  3346  0576  184E               	btfsc	??_ISR,0
  3347  0577  2D7A               	goto	u154_20
  3348  0578  3001               	movlw	1
  3349  0579  2D7B               	goto	u155_20
  3350  057A                     u154_20:	
  3351  057A  3000               	movlw	0
  3352  057B                     u155_20:	
  3353  057B  00CF               	movwf	??_ISR+1
  3354  057C  3005               	movlw	5
  3355  057D                     u156_25:	
  3356  057D  1003               	clrc
  3357  057E  0DCF               	rlf	??_ISR+1,f
  3358  057F  3EFF               	addlw	-1
  3359  0580  1D03               	skipz
  3360  0581  2D7D               	goto	u156_25
  3361  0582  0807               	movf	7,w	;volatile
  3362  0583  39DF               	andlw	223
  3363  0584  044F               	iorwf	??_ISR+1,w
  3364  0585  00D0               	movwf	??_ISR+2
  3365  0586  0850               	movf	??_ISR+2,w
  3366  0587  0087               	movwf	7	;volatile
  3367                           
  3368                           ;VolumeControl.c: 36:         SLIDER_update();
  3369  0588  120A  118A  274D  120A  118A  	fcall	_SLIDER_update
  3370                           
  3371                           ;VolumeControl.c: 37:         DSP_update();
  3372  058D  120A  118A  2454  120A  118A  	fcall	_DSP_update
  3373                           
  3374                           ;VolumeControl.c: 38:         (((*((volatile tRegister8 *)(0x0B))).Bits.BIT2)) = 0;
  3375  0592  110B               	bcf	11,2	;volatile
  3376                           
  3377                           ;VolumeControl.c: 39:         timer0_reload(216);
  3378  0593  30D8               	movlw	216
  3379  0594  120A  118A  27DA  120A  118A  	fcall	i1_timer0_reload
  3380  0599                     i1l88:	
  3381  0599  1283               	bcf	3,5	;RP0=0, select bank0
  3382  059A  1303               	bcf	3,6	;RP1=0, select bank0
  3383  059B  0854               	movf	??_ISR+6,w
  3384  059C  00FF               	movwf	127
  3385  059D  0853               	movf	??_ISR+5,w
  3386  059E  008A               	movwf	10
  3387  059F  0852               	movf	??_ISR+4,w
  3388  05A0  0084               	movwf	4
  3389  05A1  0E51               	swapf	(??_ISR+3)^0,w
  3390  05A2  0083               	movwf	3
  3391  05A3  0EFE               	swapf	126,f
  3392  05A4  0E7E               	swapf	126,w
  3393  05A5  0009               	retfie
  3394  05A6                     __end_of_ISR:	
  3395                           
  3396                           	psect	intentry
  3397  0004                     __pintentry:	
  3398                           ;incstack = 0
  3399 ;; hardware stack exceeded
  3400                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3401                           
  3402  0004                     interrupt_function:	
  3403  007E                     saved_w	set	btemp
  3404  0004  00FE               	movwf	btemp
  3405  0005  0E03               	swapf	3,w
  3406  0006  1283               	bcf	3,5	;RP0=0, select bank0
  3407  0007  1303               	bcf	3,6	;RP1=0, select bank0
  3408  0008  00D1               	movwf	??_ISR+3
  3409  0009  0804               	movf	4,w
  3410  000A  00D2               	movwf	??_ISR+4
  3411  000B  080A               	movf	10,w
  3412  000C  00D3               	movwf	??_ISR+5
  3413  000D  087F               	movf	btemp+1,w
  3414  000E  00D4               	movwf	??_ISR+6
  3415  000F  120A  118A  2D6C   	ljmp	_ISR
  3416                           
  3417                           	psect	text19
  3418  07DA                     __ptext19:	
  3419 ;; *************** function i1_timer0_reload *****************
  3420 ;; Defined at:
  3421 ;;		line 32 in file "TIMER0.c"
  3422 ;; Parameters:    Size  Location     Type
  3423 ;;  val             1    wreg     unsigned char 
  3424 ;; Auto vars:     Size  Location     Type
  3425 ;;  val             1    1[COMMON] unsigned char 
  3426 ;; Return value:  Size  Location     Type
  3427 ;;                  1    wreg      void 
  3428 ;; Registers used:
  3429 ;;		wreg
  3430 ;; Tracked objects:
  3431 ;;		On entry : 0/0
  3432 ;;		On exit  : 0/0
  3433 ;;		Unchanged: 0/0
  3434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3435 ;;      Params:         0       0       0       0       0
  3436 ;;      Locals:         1       0       0       0       0
  3437 ;;      Temps:          1       0       0       0       0
  3438 ;;      Totals:         2       0       0       0       0
  3439 ;;Total ram usage:        2 bytes
  3440 ;; Hardware stack levels used:    1
  3441 ;; This function calls:
  3442 ;;		Nothing
  3443 ;; This function is called by:
  3444 ;;		_ISR
  3445 ;; This function uses a non-reentrant model
  3446 ;;
  3447                           
  3448                           
  3449                           ;psect for function i1_timer0_reload
  3450  07DA                     i1_timer0_reload:	
  3451                           
  3452                           ;incstack = 0
  3453 ;; hardware stack exceeded
  3454                           ; Regs used in i1_timer0_reload: [wreg]
  3455                           ;i1timer0_reload@val stored from wreg
  3456  07DA  00F1               	movwf	i1timer0_reload@val
  3457                           
  3458                           ;TIMER0.c: 34:     ((*((volatile tRegister8 *)(0x01))).Reg) = val;
  3459  07DB  0871               	movf	i1timer0_reload@val,w
  3460  07DC  00F0               	movwf	??i1_timer0_reload
  3461  07DD  0870               	movf	??i1_timer0_reload,w
  3462  07DE  1283               	bcf	3,5	;RP0=0, select bank0
  3463  07DF  1303               	bcf	3,6	;RP1=0, select bank0
  3464  07E0  0081               	movwf	1	;volatile
  3465  07E1  0008               	return
  3466  07E2                     __end_ofi1_timer0_reload:	
  3467                           
  3468                           	psect	text20
  3469  074D                     __ptext20:	
  3470 ;; *************** function _SLIDER_update *****************
  3471 ;; Defined at:
  3472 ;;		line 42 in file "SLIDER.c"
  3473 ;; Parameters:    Size  Location     Type
  3474 ;;		None
  3475 ;; Auto vars:     Size  Location     Type
  3476 ;;		None
  3477 ;; Return value:  Size  Location     Type
  3478 ;;                  1    wreg      void 
  3479 ;; Registers used:
  3480 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3481 ;; Tracked objects:
  3482 ;;		On entry : 0/0
  3483 ;;		On exit  : 0/0
  3484 ;;		Unchanged: 0/0
  3485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3486 ;;      Params:         0       0       0       0       0
  3487 ;;      Locals:         0       0       0       0       0
  3488 ;;      Temps:          1       0       0       0       0
  3489 ;;      Totals:         1       0       0       0       0
  3490 ;;Total ram usage:        1 bytes
  3491 ;; Hardware stack levels used:    1
  3492 ;; Hardware stack levels required when called:    1
  3493 ;; This function calls:
  3494 ;;		_ADC_read
  3495 ;; This function is called by:
  3496 ;;		_ISR
  3497 ;; This function uses a non-reentrant model
  3498 ;;
  3499                           
  3500                           
  3501                           ;psect for function _SLIDER_update
  3502  074D                     _SLIDER_update:	
  3503                           
  3504                           ;SLIDER.c: 44:     static tByte SLIDER_counter = (0);;SLIDER.c: 46:     SLIDER_counter +
      +                          = (5);
  3505                           
  3506                           ;incstack = 0
  3507 ;; hardware stack exceeded
  3508                           ; Regs used in _SLIDER_update: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3509  074D  3005               	movlw	5
  3510  074E  00F6               	movwf	??_SLIDER_update
  3511  074F  0876               	movf	??_SLIDER_update,w
  3512  0750  1283               	bcf	3,5	;RP0=0, select bank0
  3513  0751  1303               	bcf	3,6	;RP1=0, select bank0
  3514  0752  07A2               	addwf	SLIDER_update@SLIDER_counter,f
  3515                           
  3516                           ;SLIDER.c: 48:     if(SLIDER_counter < (20)){
  3517  0753  3014               	movlw	20
  3518  0754  0222               	subwf	SLIDER_update@SLIDER_counter,w
  3519  0755  1C03               	btfss	3,0
  3520  0756  0008               	return
  3521                           
  3522                           ;SLIDER.c: 52:     SLIDER_counter = (0);
  3523  0757  01A2               	clrf	SLIDER_update@SLIDER_counter
  3524                           
  3525                           ;SLIDER.c: 56:     ADC_read((ADC_CH1),&SLIDER_val);
  3526  0758  303F               	movlw	(low (_SLIDER_val| 0))& (0+255)
  3527  0759  00F6               	movwf	??_SLIDER_update
  3528  075A  0876               	movf	??_SLIDER_update,w
  3529  075B  00F0               	movwf	ADC_read@pval
  3530  075C  3001               	movlw	1
  3531  075D  120A  118A  260A   	fcall	_ADC_read
  3532  0760  0008               	return
  3533  0761                     __end_of_SLIDER_update:	
  3534                           
  3535                           	psect	text21
  3536  060A                     __ptext21:	
  3537 ;; *************** function _ADC_read *****************
  3538 ;; Defined at:
  3539 ;;		line 39 in file "ADC.c"
  3540 ;; Parameters:    Size  Location     Type
  3541 ;;  ch              1    wreg     enum E891
  3542 ;;  pval            1    0[COMMON] PTR unsigned short 
  3543 ;;		 -> SLIDER_val(2), 
  3544 ;; Auto vars:     Size  Location     Type
  3545 ;;  ch              1    3[COMMON] enum E891
  3546 ;; Return value:  Size  Location     Type
  3547 ;;                  1    wreg      void 
  3548 ;; Registers used:
  3549 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3550 ;; Tracked objects:
  3551 ;;		On entry : 0/0
  3552 ;;		On exit  : 0/0
  3553 ;;		Unchanged: 0/0
  3554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3555 ;;      Params:         1       0       0       0       0
  3556 ;;      Locals:         3       0       0       0       0
  3557 ;;      Temps:          2       0       0       0       0
  3558 ;;      Totals:         6       0       0       0       0
  3559 ;;Total ram usage:        6 bytes
  3560 ;; Hardware stack levels used:    1
  3561 ;; This function calls:
  3562 ;;		Nothing
  3563 ;; This function is called by:
  3564 ;;		_SLIDER_update
  3565 ;; This function uses a non-reentrant model
  3566 ;;
  3567                           
  3568                           
  3569                           ;psect for function _ADC_read
  3570  060A                     _ADC_read:	
  3571                           
  3572                           ;incstack = 0
  3573 ;; hardware stack exceeded
  3574                           ; Regs used in _ADC_read: [wreg-fsr0h+status,2+status,0]
  3575                           ;ADC_read@ch stored from wreg
  3576  060A  00F3               	movwf	ADC_read@ch
  3577                           
  3578                           ;ADC.c: 42:    ((*((volatile tRegister8 *)(0x1F))).Bits.BIT0 = 1);
  3579  060B  1283               	bcf	3,5	;RP0=0, select bank0
  3580  060C  1303               	bcf	3,6	;RP1=0, select bank0
  3581  060D  141F               	bsf	31,0	;volatile
  3582                           
  3583                           ;ADC.c: 45:     ((*((volatile tRegister8 *)(0x1F))).Reg = ((*((volatile tRegister8 *)(0x
      +                          1F))).Reg & 0xC7) | (ch << 3));
  3584  060E  0873               	movf	ADC_read@ch,w
  3585  060F  00F1               	movwf	??_ADC_read
  3586  0610  3003               	movlw	3
  3587  0611                     u135_25:	
  3588  0611  1003               	clrc
  3589  0612  0DF1               	rlf	??_ADC_read,f
  3590  0613  3EFF               	addlw	-1
  3591  0614  1D03               	skipz
  3592  0615  2E11               	goto	u135_25
  3593  0616  081F               	movf	31,w	;volatile
  3594  0617  39C7               	andlw	199
  3595  0618  0471               	iorwf	??_ADC_read,w
  3596  0619  00F2               	movwf	??_ADC_read+1
  3597  061A  0872               	movf	??_ADC_read+1,w
  3598  061B  009F               	movwf	31	;volatile
  3599                           
  3600                           ;ADC.c: 48:     _delay((unsigned long)((30)*(8000000/4000000.0)));
  3601  061C  3013               	movlw	19
  3602  061D  00F1               	movwf	??_ADC_read
  3603  061E                     u212_27:	
  3604  061E  0BF1               	decfsz	??_ADC_read,f
  3605  061F  2E1E               	goto	u212_27
  3606  0620  2E21               	nop2
  3607                           
  3608                           ;ADC.c: 51:    ((*((volatile tRegister8 *)(0x1F))).Bits.BIT2 = 1);
  3609  0621  1283               	bcf	3,5	;RP0=0, select bank0
  3610  0622  1303               	bcf	3,6	;RP1=0, select bank0
  3611  0623  151F               	bsf	31,2	;volatile
  3612  0624                     i1l12:	
  3613                           ;ADC.c: 54:     while(((*((volatile tRegister8 *)(0x1F))).Bits.BIT2));
  3614                           
  3615  0624  191F               	btfsc	31,2	;volatile
  3616  0625  2E24               	goto	i1l12
  3617  0626  081E               	movf	30,w	;volatile
  3618  0627  00F5               	movwf	_ADC_read$58+1
  3619  0628  1683               	bsf	3,5	;RP0=1, select bank1
  3620  0629  1303               	bcf	3,6	;RP1=0, select bank1
  3621  062A  081E               	movf	30,w	;volatile
  3622  062B  00F4               	movwf	_ADC_read$58
  3623  062C  0870               	movf	ADC_read@pval,w
  3624  062D  0084               	movwf	4
  3625  062E  0874               	movf	_ADC_read$58,w
  3626  062F  1383               	bcf	3,7	;select IRP bank0
  3627  0630  0080               	movwf	0
  3628  0631  0A84               	incf	4,f
  3629  0632  0875               	movf	_ADC_read$58+1,w
  3630  0633  0080               	movwf	0
  3631                           
  3632                           ;ADC.c: 61:     ((*((volatile tRegister8 *)(0x1F))).Bits.BIT0 = 0);
  3633  0634  1283               	bcf	3,5	;RP0=0, select bank0
  3634  0635  1303               	bcf	3,6	;RP1=0, select bank0
  3635  0636  101F               	bcf	31,0	;volatile
  3636  0637  0008               	return
  3637  0638                     __end_of_ADC_read:	
  3638                           
  3639                           	psect	text22
  3640  0454                     __ptext22:	
  3641 ;; *************** function _DSP_update *****************
  3642 ;; Defined at:
  3643 ;;		line 29 in file "DISPLAY.c"
  3644 ;; Parameters:    Size  Location     Type
  3645 ;;		None
  3646 ;; Auto vars:     Size  Location     Type
  3647 ;;  i               2   11[BANK0 ] unsigned short 
  3648 ;;  slider          2    9[BANK0 ] unsigned short 
  3649 ;; Return value:  Size  Location     Type
  3650 ;;                  1    wreg      void 
  3651 ;; Registers used:
  3652 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3653 ;; Tracked objects:
  3654 ;;		On entry : 0/0
  3655 ;;		On exit  : 0/0
  3656 ;;		Unchanged: 0/0
  3657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3658 ;;      Params:         0       0       0       0       0
  3659 ;;      Locals:         0       4       0       0       0
  3660 ;;      Temps:          0       1       0       0       0
  3661 ;;      Totals:         0       5       0       0       0
  3662 ;;Total ram usage:        5 bytes
  3663 ;; Hardware stack levels used:    1
  3664 ;; Hardware stack levels required when called:    6
  3665 ;; This function calls:
  3666 ;;		_SLIDER_getVal
  3667 ;;		___lwdiv
  3668 ;;		i1_LCD_str
  3669 ;; This function is called by:
  3670 ;;		_ISR
  3671 ;; This function uses a non-reentrant model
  3672 ;;
  3673                           
  3674                           
  3675                           ;psect for function _DSP_update
  3676  0454                     _DSP_update:	
  3677                           
  3678                           ;DISPLAY.c: 31:     static tByte DSP_counter = (0);;DISPLAY.c: 32:     static tByte str 
      +                          [17];;DISPLAY.c: 33:     tWord i;;DISPLAY.c: 34:     tWord slider = (0);
  3679                           
  3680                           ;incstack = 0
  3681 ;; hardware stack exceeded
  3682                           ; Regs used in _DSP_update: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3683  0454  1283               	bcf	3,5	;RP0=0, select bank0
  3684  0455  1303               	bcf	3,6	;RP1=0, select bank0
  3685  0456  01CA               	clrf	DSP_update@slider
  3686  0457  01CB               	clrf	DSP_update@slider+1
  3687                           
  3688                           ;DISPLAY.c: 36:     DSP_counter += (5);
  3689  0458  3005               	movlw	5
  3690  0459  00C9               	movwf	??_DSP_update
  3691  045A  0849               	movf	??_DSP_update,w
  3692  045B  07A1               	addwf	DSP_update@DSP_counter,f
  3693                           
  3694                           ;DISPLAY.c: 38:     if (DSP_counter < (20)){
  3695  045C  3014               	movlw	20
  3696  045D  0221               	subwf	DSP_update@DSP_counter,w
  3697  045E  1C03               	btfss	3,0
  3698  045F  0008               	return
  3699                           
  3700                           ;DISPLAY.c: 42:     DSP_counter = (0);
  3701  0460  01A1               	clrf	DSP_update@DSP_counter
  3702                           
  3703                           ;DISPLAY.c: 46:     SLIDER_getVal(&slider);
  3704  0461  304A               	movlw	(low (DSP_update@slider| 0))& (0+255)
  3705  0462  120A  118A  27BE  120A  118A  	fcall	_SLIDER_getVal
  3706                           
  3707                           ;DISPLAY.c: 50:     for(i = 0; i < (slider / 63) ; i++){
  3708  0467  1283               	bcf	3,5	;RP0=0, select bank0
  3709  0468  1303               	bcf	3,6	;RP1=0, select bank0
  3710  0469  01CC               	clrf	DSP_update@i
  3711  046A  01CD               	clrf	DSP_update@i+1
  3712  046B                     i1l1683:	
  3713  046B  303F               	movlw	63
  3714  046C  00F0               	movwf	___lwdiv@divisor
  3715  046D  3000               	movlw	0
  3716  046E  00F1               	movwf	___lwdiv@divisor+1
  3717  046F  084B               	movf	DSP_update@slider+1,w
  3718  0470  00F3               	movwf	___lwdiv@dividend+1
  3719  0471  084A               	movf	DSP_update@slider,w
  3720  0472  00F2               	movwf	___lwdiv@dividend
  3721  0473  120A  118A  2530  120A  118A  	fcall	___lwdiv
  3722  0478  0871               	movf	?___lwdiv+1,w
  3723  0479  1283               	bcf	3,5	;RP0=0, select bank0
  3724  047A  1303               	bcf	3,6	;RP1=0, select bank0
  3725  047B  024D               	subwf	DSP_update@i+1,w
  3726  047C  1D03               	skipz
  3727  047D  2C80               	goto	u150_25
  3728  047E  0870               	movf	?___lwdiv,w
  3729  047F  024C               	subwf	DSP_update@i,w
  3730  0480                     u150_25:	
  3731  0480  1803               	btfsc	3,0
  3732  0481  2C9F               	goto	i1l1689
  3733                           
  3734                           ;DISPLAY.c: 51:         str[i] = '*';
  3735  0482  302A               	movlw	42
  3736  0483  00C9               	movwf	??_DSP_update
  3737  0484  084C               	movf	DSP_update@i,w
  3738  0485  3E23               	addlw	(low (DSP_update@str| 0))& (0+255)
  3739  0486  0084               	movwf	4
  3740  0487  0849               	movf	??_DSP_update,w
  3741  0488  1383               	bcf	3,7	;select IRP bank0
  3742  0489  0080               	movwf	0
  3743                           
  3744                           ;DISPLAY.c: 52:     }
  3745  048A  3001               	movlw	1
  3746  048B  07CC               	addwf	DSP_update@i,f
  3747  048C  1803               	skipnc
  3748  048D  0ACD               	incf	DSP_update@i+1,f
  3749  048E  3000               	movlw	0
  3750  048F  07CD               	addwf	DSP_update@i+1,f
  3751  0490  2C6B               	goto	i1l1683
  3752  0491                     i1l1685:	
  3753                           
  3754                           ;DISPLAY.c: 55:         str[i] = ' ';
  3755  0491  3020               	movlw	32
  3756  0492  00C9               	movwf	??_DSP_update
  3757  0493  084C               	movf	DSP_update@i,w
  3758  0494  3E23               	addlw	(low (DSP_update@str| 0))& (0+255)
  3759  0495  0084               	movwf	4
  3760  0496  0849               	movf	??_DSP_update,w
  3761  0497  1383               	bcf	3,7	;select IRP bank0
  3762  0498  0080               	movwf	0
  3763                           
  3764                           ;DISPLAY.c: 56:         i++;
  3765  0499  3001               	movlw	1
  3766  049A  07CC               	addwf	DSP_update@i,f
  3767  049B  1803               	skipnc
  3768  049C  0ACD               	incf	DSP_update@i+1,f
  3769  049D  3000               	movlw	0
  3770  049E  07CD               	addwf	DSP_update@i+1,f
  3771  049F                     i1l1689:	
  3772                           
  3773                           ;DISPLAY.c: 54:     while (i < 16) {
  3774  049F  3000               	movlw	0
  3775  04A0  024D               	subwf	DSP_update@i+1,w
  3776  04A1  3010               	movlw	16
  3777  04A2  1903               	skipnz
  3778  04A3  024C               	subwf	DSP_update@i,w
  3779  04A4  1C03               	skipc
  3780  04A5  2C91               	goto	i1l1685
  3781                           
  3782                           ;DISPLAY.c: 59:     str[16] = '\0';
  3783  04A6  01B3               	clrf	DSP_update@str+16
  3784                           
  3785                           ;DISPLAY.c: 63:    LCD_str(str,L2,C1);
  3786  04A7  3023               	movlw	(low (DSP_update@str| 0))& (0+255)
  3787  04A8  00C3               	movwf	i1LCD_str@str
  3788  04A9  3000               	movlw	0
  3789  04AA  00C4               	movwf	i1LCD_str@str+1
  3790  04AB  01C5               	clrf	i1LCD_str@line
  3791  04AC  0AC5               	incf	i1LCD_str@line,f
  3792  04AD  01C6               	clrf	i1LCD_str@col
  3793  04AE  120A  118A  25D9   	fcall	i1_LCD_str
  3794  04B1  0008               	return
  3795  04B2                     __end_of_DSP_update:	
  3796                           
  3797                           	psect	text23
  3798  05D9                     __ptext23:	
  3799 ;; *************** function i1_LCD_str *****************
  3800 ;; Defined at:
  3801 ;;		line 161 in file "LCD.c"
  3802 ;; Parameters:    Size  Location     Type
  3803 ;;  str             2    2[BANK0 ] PTR unsigned char 
  3804 ;;		 -> Convert_IntToString@nStr(11), DSP_update@str(17), STR_1(10), 
  3805 ;;  line            1    4[BANK0 ] enum E895
  3806 ;;  col             1    5[BANK0 ] enum E899
  3807 ;; Auto vars:     Size  Location     Type
  3808 ;;		None
  3809 ;; Return value:  Size  Location     Type
  3810 ;;                  1    wreg      void 
  3811 ;; Registers used:
  3812 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3813 ;; Tracked objects:
  3814 ;;		On entry : 0/0
  3815 ;;		On exit  : 0/0
  3816 ;;		Unchanged: 0/0
  3817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3818 ;;      Params:         0       4       0       0       0
  3819 ;;      Locals:         0       0       0       0       0
  3820 ;;      Temps:          0       2       0       0       0
  3821 ;;      Totals:         0       6       0       0       0
  3822 ;;Total ram usage:        6 bytes
  3823 ;; Hardware stack levels used:    1
  3824 ;; Hardware stack levels required when called:    5
  3825 ;; This function calls:
  3826 ;;		i1_LCD_char
  3827 ;; This function is called by:
  3828 ;;		_DSP_update
  3829 ;; This function uses a non-reentrant model
  3830 ;;
  3831                           
  3832                           
  3833                           ;psect for function i1_LCD_str
  3834  05D9                     i1_LCD_str:	
  3835  05D9                     i1l1647:	
  3836                           ;LCD.c: 163:     while(*str != '\0'){
  3837                           
  3838                           ;incstack = 0
  3839 ;; hardware stack exceeded
  3840                           ; Regs used in i1_LCD_str: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3841                           
  3842                           
  3843                           ;LCD.c: 163:     while(*str != '\0'){
  3844  05D9  1283               	bcf	3,5	;RP0=0, select bank0
  3845  05DA  1303               	bcf	3,6	;RP1=0, select bank0
  3846  05DB  0844               	movf	i1LCD_str@str+1,w
  3847  05DC  00FF               	movwf	127
  3848  05DD  0843               	movf	i1LCD_str@str,w
  3849  05DE  0084               	movwf	4
  3850  05DF  120A  118A  26D3  120A  118A  	fcall	stringtab
  3851  05E4  3A00               	xorlw	0
  3852  05E5  1903               	btfsc	3,2
  3853  05E6  0008               	return
  3854                           
  3855                           ;LCD.c: 164:         LCD_char(*str,line,col);
  3856  05E7  0845               	movf	i1LCD_str@line,w
  3857  05E8  00C7               	movwf	??i1_LCD_str
  3858  05E9  0847               	movf	??i1_LCD_str,w
  3859  05EA  00FC               	movwf	i1LCD_char@line
  3860  05EB  0846               	movf	i1LCD_str@col,w
  3861  05EC  00C8               	movwf	??i1_LCD_str+1
  3862  05ED  0848               	movf	??i1_LCD_str+1,w
  3863  05EE  00FD               	movwf	i1LCD_char@col
  3864  05EF  0844               	movf	i1LCD_str@str+1,w
  3865  05F0  00FF               	movwf	127
  3866  05F1  0843               	movf	i1LCD_str@str,w
  3867  05F2  0084               	movwf	4
  3868  05F3  120A  118A  26D3  120A  118A  	fcall	stringtab
  3869  05F8  120A  118A  2707  120A  118A  	fcall	i1_LCD_char
  3870                           
  3871                           ;LCD.c: 165:         str++;
  3872  05FD  3001               	movlw	1
  3873  05FE  1283               	bcf	3,5	;RP0=0, select bank0
  3874  05FF  1303               	bcf	3,6	;RP1=0, select bank0
  3875  0600  07C3               	addwf	i1LCD_str@str,f
  3876  0601  1803               	skipnc
  3877  0602  0AC4               	incf	i1LCD_str@str+1,f
  3878  0603  3000               	movlw	0
  3879  0604  07C4               	addwf	i1LCD_str@str+1,f
  3880                           
  3881                           ;LCD.c: 166:         col++;
  3882  0605  3001               	movlw	1
  3883  0606  00C7               	movwf	??i1_LCD_str
  3884  0607  0847               	movf	??i1_LCD_str,w
  3885  0608  07C6               	addwf	i1LCD_str@col,f
  3886  0609  2DD9               	goto	i1l1647
  3887  060A                     __end_ofi1_LCD_str:	
  3888                           
  3889                           	psect	text24
  3890  0707                     __ptext24:	
  3891 ;; *************** function i1_LCD_char *****************
  3892 ;; Defined at:
  3893 ;;		line 149 in file "LCD.c"
  3894 ;; Parameters:    Size  Location     Type
  3895 ;;  ch              1    wreg     unsigned char 
  3896 ;;  line            1   12[COMMON] enum E895
  3897 ;;  col             1   13[COMMON] enum E899
  3898 ;; Auto vars:     Size  Location     Type
  3899 ;;  ch              1    1[BANK0 ] unsigned char 
  3900 ;; Return value:  Size  Location     Type
  3901 ;;                  1    wreg      void 
  3902 ;; Registers used:
  3903 ;;		wreg, status,2, status,0, pclath, cstack
  3904 ;; Tracked objects:
  3905 ;;		On entry : 0/0
  3906 ;;		On exit  : 0/0
  3907 ;;		Unchanged: 0/0
  3908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3909 ;;      Params:         2       0       0       0       0
  3910 ;;      Locals:         0       1       0       0       0
  3911 ;;      Temps:          0       1       0       0       0
  3912 ;;      Totals:         2       2       0       0       0
  3913 ;;Total ram usage:        4 bytes
  3914 ;; Hardware stack levels used:    1
  3915 ;; Hardware stack levels required when called:    4
  3916 ;; This function calls:
  3917 ;;		i1_LCD_goTo
  3918 ;;		i1_LCD_out
  3919 ;; This function is called by:
  3920 ;;		i1_LCD_str
  3921 ;; This function uses a non-reentrant model
  3922 ;;
  3923                           
  3924                           
  3925                           ;psect for function i1_LCD_char
  3926  0707                     i1_LCD_char:	
  3927                           
  3928                           ;incstack = 0
  3929 ;; hardware stack exceeded
  3930                           ; Regs used in i1_LCD_char: [wreg+status,2+status,0+pclath+cstack]
  3931                           ;i1LCD_char@ch stored from wreg
  3932  0707  1283               	bcf	3,5	;RP0=0, select bank0
  3933  0708  1303               	bcf	3,6	;RP1=0, select bank0
  3934  0709  00C2               	movwf	i1LCD_char@ch
  3935                           
  3936                           ;LCD.c: 152:     LCD_goTo(line,col);
  3937  070A  087D               	movf	i1LCD_char@col,w
  3938  070B  00C1               	movwf	??i1_LCD_char
  3939  070C  0841               	movf	??i1_LCD_char,w
  3940  070D  00F7               	movwf	i1LCD_goTo@col
  3941  070E  087C               	movf	i1LCD_char@line,w
  3942  070F  120A  118A  2761  120A  118A  	fcall	i1_LCD_goTo
  3943                           
  3944                           ;LCD.c: 155:     ((((((*((volatile tRegister8 *)(0x09))).Reg))) = (((((*((volatile tRegi
      +                          ster8 *)(0x09))).Reg)) & (~(1 << ((0))))) | (((1)) << ((0))))));
  3945  0714  1283               	bcf	3,5	;RP0=0, select bank0
  3946  0715  1303               	bcf	3,6	;RP1=0, select bank0
  3947  0716  0809               	movf	9,w	;volatile
  3948  0717  39FE               	andlw	254
  3949  0718  3801               	iorlw	1
  3950  0719  00C1               	movwf	??i1_LCD_char
  3951  071A  0841               	movf	??i1_LCD_char,w
  3952  071B  0089               	movwf	9	;volatile
  3953                           
  3954                           ;LCD.c: 158:     LCD_out(ch);
  3955  071C  0842               	movf	i1LCD_char@ch,w
  3956  071D  120A  118A  2189   	fcall	i1_LCD_out
  3957  0720  0008               	return
  3958  0721                     __end_ofi1_LCD_char:	
  3959                           
  3960                           	psect	text25
  3961  0761                     __ptext25:	
  3962 ;; *************** function i1_LCD_goTo *****************
  3963 ;; Defined at:
  3964 ;;		line 211 in file "LCD.c"
  3965 ;; Parameters:    Size  Location     Type
  3966 ;;  line            1    wreg     enum E895
  3967 ;;  col             1    7[COMMON] enum E899
  3968 ;; Auto vars:     Size  Location     Type
  3969 ;;  line            1   10[COMMON] enum E895
  3970 ;;  LCD_goTo        1   11[COMMON] unsigned char 
  3971 ;; Return value:  Size  Location     Type
  3972 ;;                  1    wreg      void 
  3973 ;; Registers used:
  3974 ;;		wreg, status,2, status,0, pclath, cstack
  3975 ;; Tracked objects:
  3976 ;;		On entry : 0/0
  3977 ;;		On exit  : 0/0
  3978 ;;		Unchanged: 0/0
  3979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3980 ;;      Params:         1       0       0       0       0
  3981 ;;      Locals:         2       0       0       0       0
  3982 ;;      Temps:          2       0       0       0       0
  3983 ;;      Totals:         5       0       0       0       0
  3984 ;;Total ram usage:        5 bytes
  3985 ;; Hardware stack levels used:    1
  3986 ;; Hardware stack levels required when called:    3
  3987 ;; This function calls:
  3988 ;;		i1_LCD_cmd
  3989 ;; This function is called by:
  3990 ;;		i1_LCD_char
  3991 ;; This function uses a non-reentrant model
  3992 ;;
  3993                           
  3994                           
  3995                           ;psect for function i1_LCD_goTo
  3996  0761                     i1_LCD_goTo:	
  3997                           
  3998                           ;incstack = 0
  3999 ;; hardware stack exceeded
  4000                           ; Regs used in i1_LCD_goTo: [wreg+status,2+status,0+pclath+cstack]
  4001                           ;i1LCD_goTo@line stored from wreg
  4002  0761  00FA               	movwf	i1LCD_goTo@line
  4003                           
  4004                           ;LCD.c: 214:     tByte address;;LCD.c: 216:     address = (line * (0x40)) + col;
  4005  0762  087A               	movf	i1LCD_goTo@line,w
  4006  0763  00F8               	movwf	??i1_LCD_goTo
  4007  0764  3006               	movlw	6
  4008  0765                     u134_25:	
  4009  0765  1003               	clrc
  4010  0766  0DF8               	rlf	??i1_LCD_goTo,f
  4011  0767  3EFF               	addlw	-1
  4012  0768  1D03               	skipz
  4013  0769  2F65               	goto	u134_25
  4014  076A  0877               	movf	i1LCD_goTo@col,w
  4015  076B  0778               	addwf	??i1_LCD_goTo,w
  4016  076C  00F9               	movwf	??i1_LCD_goTo+1
  4017  076D  0879               	movf	??i1_LCD_goTo+1,w
  4018  076E  00FB               	movwf	i1LCD_goTo@address
  4019                           
  4020                           ;LCD.c: 218:     LCD_cmd((0x80) | address);
  4021  076F  087B               	movf	i1LCD_goTo@address,w
  4022  0770  3880               	iorlw	128
  4023  0771  120A  118A  2775   	fcall	i1_LCD_cmd
  4024  0774  0008               	return
  4025  0775                     __end_ofi1_LCD_goTo:	
  4026                           
  4027                           	psect	text26
  4028  0775                     __ptext26:	
  4029 ;; *************** function i1_LCD_cmd *****************
  4030 ;; Defined at:
  4031 ;;		line 201 in file "LCD.c"
  4032 ;; Parameters:    Size  Location     Type
  4033 ;;  cmd             1    wreg     unsigned char 
  4034 ;; Auto vars:     Size  Location     Type
  4035 ;;  cmd             1    6[COMMON] unsigned char 
  4036 ;; Return value:  Size  Location     Type
  4037 ;;                  1    wreg      void 
  4038 ;; Registers used:
  4039 ;;		wreg, status,2, status,0, pclath, cstack
  4040 ;; Tracked objects:
  4041 ;;		On entry : 0/0
  4042 ;;		On exit  : 0/0
  4043 ;;		Unchanged: 0/0
  4044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4045 ;;      Params:         0       0       0       0       0
  4046 ;;      Locals:         1       0       0       0       0
  4047 ;;      Temps:          1       0       0       0       0
  4048 ;;      Totals:         2       0       0       0       0
  4049 ;;Total ram usage:        2 bytes
  4050 ;; Hardware stack levels used:    1
  4051 ;; Hardware stack levels required when called:    2
  4052 ;; This function calls:
  4053 ;;		i1_LCD_out
  4054 ;; This function is called by:
  4055 ;;		i1_LCD_goTo
  4056 ;; This function uses a non-reentrant model
  4057 ;;
  4058                           
  4059                           
  4060                           ;psect for function i1_LCD_cmd
  4061  0775                     i1_LCD_cmd:	
  4062                           
  4063                           ;incstack = 0
  4064 ;; hardware stack exceeded
  4065                           ; Regs used in i1_LCD_cmd: [wreg+status,2+status,0+pclath+cstack]
  4066                           ;i1LCD_cmd@cmd stored from wreg
  4067  0775  00F6               	movwf	i1LCD_cmd@cmd
  4068                           
  4069                           ;LCD.c: 205:     ((((((*((volatile tRegister8 *)(0x09))).Reg))) = (((((*((volatile tRegi
      +                          ster8 *)(0x09))).Reg)) & (~(1 << ((0))))) | (((0)) << ((0))))));
  4070  0776  1283               	bcf	3,5	;RP0=0, select bank0
  4071  0777  1303               	bcf	3,6	;RP1=0, select bank0
  4072  0778  0809               	movf	9,w	;volatile
  4073  0779  39FE               	andlw	254
  4074  077A  00F5               	movwf	??i1_LCD_cmd
  4075  077B  0875               	movf	??i1_LCD_cmd,w
  4076  077C  0089               	movwf	9	;volatile
  4077                           
  4078                           ;LCD.c: 206:     LCD_out(cmd);
  4079  077D  0876               	movf	i1LCD_cmd@cmd,w
  4080  077E  120A  118A  2189  120A  118A  	fcall	i1_LCD_out
  4081                           
  4082                           ;LCD.c: 207:     _delay((unsigned long)((50)*(8000000/4000000.0)));
  4083  0783  3021               	movlw	33
  4084  0784  00F5               	movwf	??i1_LCD_cmd
  4085  0785                     u213_27:	
  4086  0785  0BF5               	decfsz	??i1_LCD_cmd,f
  4087  0786  2F85               	goto	u213_27
  4088  0787  0008               	return
  4089  0788                     __end_ofi1_LCD_cmd:	
  4090                           
  4091                           	psect	text27
  4092  0189                     __ptext27:	
  4093 ;; *************** function i1_LCD_out *****************
  4094 ;; Defined at:
  4095 ;;		line 232 in file "LCD.c"
  4096 ;; Parameters:    Size  Location     Type
  4097 ;;  data            1    wreg     unsigned char 
  4098 ;; Auto vars:     Size  Location     Type
  4099 ;;  data            1    4[COMMON] unsigned char 
  4100 ;; Return value:  Size  Location     Type
  4101 ;;                  1    wreg      void 
  4102 ;; Registers used:
  4103 ;;		wreg, status,2, status,0, pclath, cstack
  4104 ;; Tracked objects:
  4105 ;;		On entry : 0/0
  4106 ;;		On exit  : 0/0
  4107 ;;		Unchanged: 0/0
  4108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4109 ;;      Params:         0       0       0       0       0
  4110 ;;      Locals:         1       0       0       0       0
  4111 ;;      Temps:          3       0       0       0       0
  4112 ;;      Totals:         4       0       0       0       0
  4113 ;;Total ram usage:        4 bytes
  4114 ;; Hardware stack levels used:    1
  4115 ;; Hardware stack levels required when called:    1
  4116 ;; This function calls:
  4117 ;;		i1_LCD_latch
  4118 ;; This function is called by:
  4119 ;;		i1_LCD_char
  4120 ;;		i1_LCD_cmd
  4121 ;; This function uses a non-reentrant model
  4122 ;;
  4123                           
  4124                           
  4125                           ;psect for function i1_LCD_out
  4126  0189                     i1_LCD_out:	
  4127                           
  4128                           ;incstack = 0
  4129 ;; hardware stack exceeded
  4130                           ; Regs used in i1_LCD_out: [wreg+status,2+status,0+pclath+cstack]
  4131                           ;i1LCD_out@data stored from wreg
  4132  0189  00F4               	movwf	i1LCD_out@data
  4133                           
  4134                           ;LCD.c: 234:     if(LCD_4_MODE == currentMode){
  4135  018A  1283               	bcf	3,5	;RP0=0, select bank0
  4136  018B  1303               	bcf	3,6	;RP1=0, select bank0
  4137  018C  0820               	movf	_currentMode,w
  4138  018D  1D03               	btfss	3,2
  4139  018E  2A45               	goto	i1l1447
  4140                           
  4141                           ;LCD.c: 237:         ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x08))).Reg)) & (~(1 << ((0))))) | ((data & (1 << 4)) >> 4 << ((0))))));
  4142  018F  0874               	movf	i1LCD_out@data,w
  4143  0190  00F1               	movwf	??i1_LCD_out
  4144  0191  3004               	movlw	4
  4145  0192                     u108_25:	
  4146  0192  1003               	clrc
  4147  0193  0CF1               	rrf	??i1_LCD_out,f
  4148  0194  3EFF               	addlw	-1
  4149  0195  1D03               	skipz
  4150  0196  2992               	goto	u108_25
  4151  0197  3001               	movlw	1
  4152  0198  0571               	andwf	??i1_LCD_out,w
  4153  0199  00F2               	movwf	??i1_LCD_out+1
  4154  019A  0808               	movf	8,w	;volatile
  4155  019B  39FE               	andlw	254
  4156  019C  0472               	iorwf	??i1_LCD_out+1,w
  4157  019D  00F3               	movwf	??i1_LCD_out+2
  4158  019E  0873               	movf	??i1_LCD_out+2,w
  4159  019F  0088               	movwf	8	;volatile
  4160                           
  4161                           ;LCD.c: 238:         ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x08))).Reg)) & (~(1 << ((1))))) | ((data & (1 << 5)) >> 5 << ((1))))));
  4162  01A0  0874               	movf	i1LCD_out@data,w
  4163  01A1  00F1               	movwf	??i1_LCD_out
  4164  01A2  3005               	movlw	5
  4165  01A3                     u109_25:	
  4166  01A3  1003               	clrc
  4167  01A4  0CF1               	rrf	??i1_LCD_out,f
  4168  01A5  3EFF               	addlw	-1
  4169  01A6  1D03               	skipz
  4170  01A7  29A3               	goto	u109_25
  4171  01A8  0871               	movf	??i1_LCD_out,w
  4172  01A9  3901               	andlw	1
  4173  01AA  00F2               	movwf	??i1_LCD_out+1
  4174  01AB  3001               	movlw	1
  4175  01AC                     u110_25:	
  4176  01AC  1003               	clrc
  4177  01AD  0DF2               	rlf	??i1_LCD_out+1,f
  4178  01AE  3EFF               	addlw	-1
  4179  01AF  1D03               	skipz
  4180  01B0  29AC               	goto	u110_25
  4181  01B1  0808               	movf	8,w	;volatile
  4182  01B2  39FD               	andlw	253
  4183  01B3  0472               	iorwf	??i1_LCD_out+1,w
  4184  01B4  00F3               	movwf	??i1_LCD_out+2
  4185  01B5  0873               	movf	??i1_LCD_out+2,w
  4186  01B6  0088               	movwf	8	;volatile
  4187                           
  4188                           ;LCD.c: 239:         ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x08))).Reg)) & (~(1 << ((2))))) | ((data & (1 << 6)) >> 6 << ((2))))));
  4189  01B7  0874               	movf	i1LCD_out@data,w
  4190  01B8  00F1               	movwf	??i1_LCD_out
  4191  01B9  3006               	movlw	6
  4192  01BA                     u111_25:	
  4193  01BA  1003               	clrc
  4194  01BB  0CF1               	rrf	??i1_LCD_out,f
  4195  01BC  3EFF               	addlw	-1
  4196  01BD  1D03               	skipz
  4197  01BE  29BA               	goto	u111_25
  4198  01BF  0871               	movf	??i1_LCD_out,w
  4199  01C0  3901               	andlw	1
  4200  01C1  00F2               	movwf	??i1_LCD_out+1
  4201  01C2  3002               	movlw	2
  4202  01C3                     u112_25:	
  4203  01C3  1003               	clrc
  4204  01C4  0DF2               	rlf	??i1_LCD_out+1,f
  4205  01C5  3EFF               	addlw	-1
  4206  01C6  1D03               	skipz
  4207  01C7  29C3               	goto	u112_25
  4208  01C8  0808               	movf	8,w	;volatile
  4209  01C9  39FB               	andlw	251
  4210  01CA  0472               	iorwf	??i1_LCD_out+1,w
  4211  01CB  00F3               	movwf	??i1_LCD_out+2
  4212  01CC  0873               	movf	??i1_LCD_out+2,w
  4213  01CD  0088               	movwf	8	;volatile
  4214                           
  4215                           ;LCD.c: 240:         ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x08))).Reg)) & (~(1 << ((3))))) | ((data & (1 << 7)) >> 7 << ((3))))));
  4216  01CE  0874               	movf	i1LCD_out@data,w
  4217  01CF  00F1               	movwf	??i1_LCD_out
  4218  01D0  3007               	movlw	7
  4219  01D1                     u113_25:	
  4220  01D1  1003               	clrc
  4221  01D2  0CF1               	rrf	??i1_LCD_out,f
  4222  01D3  3EFF               	addlw	-1
  4223  01D4  1D03               	skipz
  4224  01D5  29D1               	goto	u113_25
  4225  01D6  0871               	movf	??i1_LCD_out,w
  4226  01D7  3901               	andlw	1
  4227  01D8  00F2               	movwf	??i1_LCD_out+1
  4228  01D9  3003               	movlw	3
  4229  01DA                     u114_25:	
  4230  01DA  1003               	clrc
  4231  01DB  0DF2               	rlf	??i1_LCD_out+1,f
  4232  01DC  3EFF               	addlw	-1
  4233  01DD  1D03               	skipz
  4234  01DE  29DA               	goto	u114_25
  4235  01DF  0808               	movf	8,w	;volatile
  4236  01E0  39F7               	andlw	247
  4237  01E1  0472               	iorwf	??i1_LCD_out+1,w
  4238  01E2  00F3               	movwf	??i1_LCD_out+2
  4239  01E3  0873               	movf	??i1_LCD_out+2,w
  4240  01E4  0088               	movwf	8	;volatile
  4241                           
  4242                           ;LCD.c: 242:         LCD_latch();
  4243  01E5  120A  118A  27AC  120A  118A  	fcall	i1_LCD_latch
  4244                           
  4245                           ;LCD.c: 244:         _delay((unsigned long)((100)*(8000000/4000000.0)));
  4246  01EA  3042               	movlw	66
  4247  01EB  00F1               	movwf	??i1_LCD_out
  4248  01EC                     u214_27:	
  4249  01EC  0BF1               	decfsz	??i1_LCD_out,f
  4250  01ED  29EC               	goto	u214_27
  4251  01EE  0000               	nop
  4252                           
  4253                           ;LCD.c: 246:         ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x08))).Reg)) & (~(1 << ((0))))) | ((data & (1 << 0)) >> 0 << ((0))))));
  4254  01EF  3001               	movlw	1
  4255  01F0  0574               	andwf	i1LCD_out@data,w
  4256  01F1  00F1               	movwf	??i1_LCD_out
  4257  01F2  1283               	bcf	3,5	;RP0=0, select bank0
  4258  01F3  1303               	bcf	3,6	;RP1=0, select bank0
  4259  01F4  0808               	movf	8,w	;volatile
  4260  01F5  39FE               	andlw	254
  4261  01F6  0471               	iorwf	??i1_LCD_out,w
  4262  01F7  00F2               	movwf	??i1_LCD_out+1
  4263  01F8  0872               	movf	??i1_LCD_out+1,w
  4264  01F9  0088               	movwf	8	;volatile
  4265                           
  4266                           ;LCD.c: 247:         ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x08))).Reg)) & (~(1 << ((1))))) | ((data & (1 << 1)) >> 1 << ((1))))));
  4267  01FA  0874               	movf	i1LCD_out@data,w
  4268  01FB  00F1               	movwf	??i1_LCD_out
  4269  01FC  1003               	clrc
  4270  01FD  0C71               	rrf	??i1_LCD_out,w
  4271  01FE  3901               	andlw	1
  4272  01FF  00F2               	movwf	??i1_LCD_out+1
  4273  0200  3001               	movlw	1
  4274  0201                     u115_25:	
  4275  0201  1003               	clrc
  4276  0202  0DF2               	rlf	??i1_LCD_out+1,f
  4277  0203  3EFF               	addlw	-1
  4278  0204  1D03               	skipz
  4279  0205  2A01               	goto	u115_25
  4280  0206  0808               	movf	8,w	;volatile
  4281  0207  39FD               	andlw	253
  4282  0208  0472               	iorwf	??i1_LCD_out+1,w
  4283  0209  00F3               	movwf	??i1_LCD_out+2
  4284  020A  0873               	movf	??i1_LCD_out+2,w
  4285  020B  0088               	movwf	8	;volatile
  4286                           
  4287                           ;LCD.c: 248:         ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x08))).Reg)) & (~(1 << ((2))))) | ((data & (1 << 2)) >> 2 << ((2))))));
  4288  020C  0874               	movf	i1LCD_out@data,w
  4289  020D  00F1               	movwf	??i1_LCD_out
  4290  020E  3002               	movlw	2
  4291  020F                     u116_25:	
  4292  020F  1003               	clrc
  4293  0210  0CF1               	rrf	??i1_LCD_out,f
  4294  0211  3EFF               	addlw	-1
  4295  0212  1D03               	skipz
  4296  0213  2A0F               	goto	u116_25
  4297  0214  0871               	movf	??i1_LCD_out,w
  4298  0215  3901               	andlw	1
  4299  0216  00F2               	movwf	??i1_LCD_out+1
  4300  0217  3002               	movlw	2
  4301  0218                     u117_25:	
  4302  0218  1003               	clrc
  4303  0219  0DF2               	rlf	??i1_LCD_out+1,f
  4304  021A  3EFF               	addlw	-1
  4305  021B  1D03               	skipz
  4306  021C  2A18               	goto	u117_25
  4307  021D  0808               	movf	8,w	;volatile
  4308  021E  39FB               	andlw	251
  4309  021F  0472               	iorwf	??i1_LCD_out+1,w
  4310  0220  00F3               	movwf	??i1_LCD_out+2
  4311  0221  0873               	movf	??i1_LCD_out+2,w
  4312  0222  0088               	movwf	8	;volatile
  4313                           
  4314                           ;LCD.c: 249:         ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x08))).Reg)) & (~(1 << ((3))))) | ((data & (1 << 3)) >> 3 << ((3))))));
  4315  0223  0874               	movf	i1LCD_out@data,w
  4316  0224  00F1               	movwf	??i1_LCD_out
  4317  0225  3003               	movlw	3
  4318  0226                     u118_25:	
  4319  0226  1003               	clrc
  4320  0227  0CF1               	rrf	??i1_LCD_out,f
  4321  0228  3EFF               	addlw	-1
  4322  0229  1D03               	skipz
  4323  022A  2A26               	goto	u118_25
  4324  022B  0871               	movf	??i1_LCD_out,w
  4325  022C  3901               	andlw	1
  4326  022D  00F2               	movwf	??i1_LCD_out+1
  4327  022E  3003               	movlw	3
  4328  022F                     u119_25:	
  4329  022F  1003               	clrc
  4330  0230  0DF2               	rlf	??i1_LCD_out+1,f
  4331  0231  3EFF               	addlw	-1
  4332  0232  1D03               	skipz
  4333  0233  2A2F               	goto	u119_25
  4334  0234  0808               	movf	8,w	;volatile
  4335  0235  39F7               	andlw	247
  4336  0236  0472               	iorwf	??i1_LCD_out+1,w
  4337  0237  00F3               	movwf	??i1_LCD_out+2
  4338  0238  0873               	movf	??i1_LCD_out+2,w
  4339  0239  0088               	movwf	8	;volatile
  4340                           
  4341                           ;LCD.c: 251:         LCD_latch();
  4342  023A  120A  118A  27AC  120A  118A  	fcall	i1_LCD_latch
  4343                           
  4344                           ;LCD.c: 252:         _delay((unsigned long)((100)*(8000000/4000000.0)));
  4345  023F  3042               	movlw	66
  4346  0240  00F1               	movwf	??i1_LCD_out
  4347  0241                     u215_27:	
  4348  0241  0BF1               	decfsz	??i1_LCD_out,f
  4349  0242  2A41               	goto	u215_27
  4350  0243  0000               	nop
  4351                           
  4352                           ;LCD.c: 253:     }else {
  4353  0244  0008               	return
  4354  0245                     i1l1447:	
  4355                           
  4356                           ;LCD.c: 255:         ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x08))).Reg)) & (~(1 << ((0))))) | ((data & (1 << 0)) >> 0 << ((0))))));
  4357  0245  3001               	movlw	1
  4358  0246  0574               	andwf	i1LCD_out@data,w
  4359  0247  00F1               	movwf	??i1_LCD_out
  4360  0248  0808               	movf	8,w	;volatile
  4361  0249  39FE               	andlw	254
  4362  024A  0471               	iorwf	??i1_LCD_out,w
  4363  024B  00F2               	movwf	??i1_LCD_out+1
  4364  024C  0872               	movf	??i1_LCD_out+1,w
  4365  024D  0088               	movwf	8	;volatile
  4366                           
  4367                           ;LCD.c: 256:         ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x08))).Reg)) & (~(1 << ((1))))) | ((data & (1 << 1)) >> 1 << ((1))))));
  4368  024E  0874               	movf	i1LCD_out@data,w
  4369  024F  00F1               	movwf	??i1_LCD_out
  4370  0250  1003               	clrc
  4371  0251  0C71               	rrf	??i1_LCD_out,w
  4372  0252  3901               	andlw	1
  4373  0253  00F2               	movwf	??i1_LCD_out+1
  4374  0254  3001               	movlw	1
  4375  0255                     u120_25:	
  4376  0255  1003               	clrc
  4377  0256  0DF2               	rlf	??i1_LCD_out+1,f
  4378  0257  3EFF               	addlw	-1
  4379  0258  1D03               	skipz
  4380  0259  2A55               	goto	u120_25
  4381  025A  0808               	movf	8,w	;volatile
  4382  025B  39FD               	andlw	253
  4383  025C  0472               	iorwf	??i1_LCD_out+1,w
  4384  025D  00F3               	movwf	??i1_LCD_out+2
  4385  025E  0873               	movf	??i1_LCD_out+2,w
  4386  025F  0088               	movwf	8	;volatile
  4387                           
  4388                           ;LCD.c: 257:         ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x08))).Reg)) & (~(1 << ((2))))) | ((data & (1 << 2)) >> 2 << ((2))))));
  4389  0260  0874               	movf	i1LCD_out@data,w
  4390  0261  00F1               	movwf	??i1_LCD_out
  4391  0262  3002               	movlw	2
  4392  0263                     u121_25:	
  4393  0263  1003               	clrc
  4394  0264  0CF1               	rrf	??i1_LCD_out,f
  4395  0265  3EFF               	addlw	-1
  4396  0266  1D03               	skipz
  4397  0267  2A63               	goto	u121_25
  4398  0268  0871               	movf	??i1_LCD_out,w
  4399  0269  3901               	andlw	1
  4400  026A  00F2               	movwf	??i1_LCD_out+1
  4401  026B  3002               	movlw	2
  4402  026C                     u122_25:	
  4403  026C  1003               	clrc
  4404  026D  0DF2               	rlf	??i1_LCD_out+1,f
  4405  026E  3EFF               	addlw	-1
  4406  026F  1D03               	skipz
  4407  0270  2A6C               	goto	u122_25
  4408  0271  0808               	movf	8,w	;volatile
  4409  0272  39FB               	andlw	251
  4410  0273  0472               	iorwf	??i1_LCD_out+1,w
  4411  0274  00F3               	movwf	??i1_LCD_out+2
  4412  0275  0873               	movf	??i1_LCD_out+2,w
  4413  0276  0088               	movwf	8	;volatile
  4414                           
  4415                           ;LCD.c: 258:         ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x08))).Reg)) & (~(1 << ((3))))) | ((data & (1 << 3)) >> 3 << ((3))))));
  4416  0277  0874               	movf	i1LCD_out@data,w
  4417  0278  00F1               	movwf	??i1_LCD_out
  4418  0279  3003               	movlw	3
  4419  027A                     u123_25:	
  4420  027A  1003               	clrc
  4421  027B  0CF1               	rrf	??i1_LCD_out,f
  4422  027C  3EFF               	addlw	-1
  4423  027D  1D03               	skipz
  4424  027E  2A7A               	goto	u123_25
  4425  027F  0871               	movf	??i1_LCD_out,w
  4426  0280  3901               	andlw	1
  4427  0281  00F2               	movwf	??i1_LCD_out+1
  4428  0282  3003               	movlw	3
  4429  0283                     u124_25:	
  4430  0283  1003               	clrc
  4431  0284  0DF2               	rlf	??i1_LCD_out+1,f
  4432  0285  3EFF               	addlw	-1
  4433  0286  1D03               	skipz
  4434  0287  2A83               	goto	u124_25
  4435  0288  0808               	movf	8,w	;volatile
  4436  0289  39F7               	andlw	247
  4437  028A  0472               	iorwf	??i1_LCD_out+1,w
  4438  028B  00F3               	movwf	??i1_LCD_out+2
  4439  028C  0873               	movf	??i1_LCD_out+2,w
  4440  028D  0088               	movwf	8	;volatile
  4441                           
  4442                           ;LCD.c: 259:         ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x08))).Reg)) & (~(1 << ((4))))) | ((data & (1 << 4)) >> 4 << ((4))))));
  4443  028E  0874               	movf	i1LCD_out@data,w
  4444  028F  00F1               	movwf	??i1_LCD_out
  4445  0290  3004               	movlw	4
  4446  0291                     u125_25:	
  4447  0291  1003               	clrc
  4448  0292  0CF1               	rrf	??i1_LCD_out,f
  4449  0293  3EFF               	addlw	-1
  4450  0294  1D03               	skipz
  4451  0295  2A91               	goto	u125_25
  4452  0296  0871               	movf	??i1_LCD_out,w
  4453  0297  3901               	andlw	1
  4454  0298  00F2               	movwf	??i1_LCD_out+1
  4455  0299  3004               	movlw	4
  4456  029A                     u126_25:	
  4457  029A  1003               	clrc
  4458  029B  0DF2               	rlf	??i1_LCD_out+1,f
  4459  029C  3EFF               	addlw	-1
  4460  029D  1D03               	skipz
  4461  029E  2A9A               	goto	u126_25
  4462  029F  0808               	movf	8,w	;volatile
  4463  02A0  39EF               	andlw	239
  4464  02A1  0472               	iorwf	??i1_LCD_out+1,w
  4465  02A2  00F3               	movwf	??i1_LCD_out+2
  4466  02A3  0873               	movf	??i1_LCD_out+2,w
  4467  02A4  0088               	movwf	8	;volatile
  4468                           
  4469                           ;LCD.c: 260:         ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x08))).Reg)) & (~(1 << ((5))))) | ((data & (1 << 5)) >> 5 << ((5))))));
  4470  02A5  0874               	movf	i1LCD_out@data,w
  4471  02A6  00F1               	movwf	??i1_LCD_out
  4472  02A7  3005               	movlw	5
  4473  02A8                     u127_25:	
  4474  02A8  1003               	clrc
  4475  02A9  0CF1               	rrf	??i1_LCD_out,f
  4476  02AA  3EFF               	addlw	-1
  4477  02AB  1D03               	skipz
  4478  02AC  2AA8               	goto	u127_25
  4479  02AD  0871               	movf	??i1_LCD_out,w
  4480  02AE  3901               	andlw	1
  4481  02AF  00F2               	movwf	??i1_LCD_out+1
  4482  02B0  3005               	movlw	5
  4483  02B1                     u128_25:	
  4484  02B1  1003               	clrc
  4485  02B2  0DF2               	rlf	??i1_LCD_out+1,f
  4486  02B3  3EFF               	addlw	-1
  4487  02B4  1D03               	skipz
  4488  02B5  2AB1               	goto	u128_25
  4489  02B6  0808               	movf	8,w	;volatile
  4490  02B7  39DF               	andlw	223
  4491  02B8  0472               	iorwf	??i1_LCD_out+1,w
  4492  02B9  00F3               	movwf	??i1_LCD_out+2
  4493  02BA  0873               	movf	??i1_LCD_out+2,w
  4494  02BB  0088               	movwf	8	;volatile
  4495                           
  4496                           ;LCD.c: 261:         ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x08))).Reg)) & (~(1 << ((6))))) | ((data & (1 << 6)) >> 6 << ((6))))));
  4497  02BC  0874               	movf	i1LCD_out@data,w
  4498  02BD  00F1               	movwf	??i1_LCD_out
  4499  02BE  3006               	movlw	6
  4500  02BF                     u129_25:	
  4501  02BF  1003               	clrc
  4502  02C0  0CF1               	rrf	??i1_LCD_out,f
  4503  02C1  3EFF               	addlw	-1
  4504  02C2  1D03               	skipz
  4505  02C3  2ABF               	goto	u129_25
  4506  02C4  0871               	movf	??i1_LCD_out,w
  4507  02C5  3901               	andlw	1
  4508  02C6  00F2               	movwf	??i1_LCD_out+1
  4509  02C7  3006               	movlw	6
  4510  02C8                     u130_25:	
  4511  02C8  1003               	clrc
  4512  02C9  0DF2               	rlf	??i1_LCD_out+1,f
  4513  02CA  3EFF               	addlw	-1
  4514  02CB  1D03               	skipz
  4515  02CC  2AC8               	goto	u130_25
  4516  02CD  0808               	movf	8,w	;volatile
  4517  02CE  39BF               	andlw	191
  4518  02CF  0472               	iorwf	??i1_LCD_out+1,w
  4519  02D0  00F3               	movwf	??i1_LCD_out+2
  4520  02D1  0873               	movf	??i1_LCD_out+2,w
  4521  02D2  0088               	movwf	8	;volatile
  4522                           
  4523                           ;LCD.c: 262:         ((((((*((volatile tRegister8 *)(0x08))).Reg))) = (((((*((volatile t
      +                          Register8 *)(0x08))).Reg)) & (~(1 << ((7))))) | ((data & (1 << 7)) >> 7 << ((7))))));
  4524  02D3  0874               	movf	i1LCD_out@data,w
  4525  02D4  00F1               	movwf	??i1_LCD_out
  4526  02D5  3007               	movlw	7
  4527  02D6                     u131_25:	
  4528  02D6  1003               	clrc
  4529  02D7  0CF1               	rrf	??i1_LCD_out,f
  4530  02D8  3EFF               	addlw	-1
  4531  02D9  1D03               	skipz
  4532  02DA  2AD6               	goto	u131_25
  4533  02DB  0871               	movf	??i1_LCD_out,w
  4534  02DC  3901               	andlw	1
  4535  02DD  00F2               	movwf	??i1_LCD_out+1
  4536  02DE  3007               	movlw	7
  4537  02DF                     u132_25:	
  4538  02DF  1003               	clrc
  4539  02E0  0DF2               	rlf	??i1_LCD_out+1,f
  4540  02E1  3EFF               	addlw	-1
  4541  02E2  1D03               	skipz
  4542  02E3  2ADF               	goto	u132_25
  4543  02E4  0808               	movf	8,w	;volatile
  4544  02E5  397F               	andlw	127
  4545  02E6  0472               	iorwf	??i1_LCD_out+1,w
  4546  02E7  00F3               	movwf	??i1_LCD_out+2
  4547  02E8  0873               	movf	??i1_LCD_out+2,w
  4548  02E9  0088               	movwf	8	;volatile
  4549                           
  4550                           ;LCD.c: 263:         LCD_latch();
  4551  02EA  120A  118A  27AC   	fcall	i1_LCD_latch
  4552  02ED  0008               	return
  4553  02EE                     __end_ofi1_LCD_out:	
  4554                           
  4555                           	psect	text28
  4556  07AC                     __ptext28:	
  4557 ;; *************** function i1_LCD_latch *****************
  4558 ;; Defined at:
  4559 ;;		line 221 in file "LCD.c"
  4560 ;; Parameters:    Size  Location     Type
  4561 ;;		None
  4562 ;; Auto vars:     Size  Location     Type
  4563 ;;		None
  4564 ;; Return value:  Size  Location     Type
  4565 ;;                  1    wreg      void 
  4566 ;; Registers used:
  4567 ;;		wreg, status,2
  4568 ;; Tracked objects:
  4569 ;;		On entry : 0/0
  4570 ;;		On exit  : 0/0
  4571 ;;		Unchanged: 0/0
  4572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4573 ;;      Params:         0       0       0       0       0
  4574 ;;      Locals:         0       0       0       0       0
  4575 ;;      Temps:          1       0       0       0       0
  4576 ;;      Totals:         1       0       0       0       0
  4577 ;;Total ram usage:        1 bytes
  4578 ;; Hardware stack levels used:    1
  4579 ;; This function calls:
  4580 ;;		Nothing
  4581 ;; This function is called by:
  4582 ;;		i1_LCD_out
  4583 ;; This function uses a non-reentrant model
  4584 ;;
  4585                           
  4586                           
  4587                           ;psect for function i1_LCD_latch
  4588  07AC                     i1_LCD_latch:	
  4589                           
  4590                           ;LCD.c: 225:     ((((((*((volatile tRegister8 *)(0x09))).Reg))) = (((((*((volatile tRegi
      +                          ster8 *)(0x09))).Reg)) & (~(1 << ((1))))) | ((1) << ((1))))));
  4591                           
  4592                           ;incstack = 0
  4593 ;; hardware stack exceeded
  4594                           ; Regs used in i1_LCD_latch: [wreg+status,2]
  4595  07AC  1283               	bcf	3,5	;RP0=0, select bank0
  4596  07AD  1303               	bcf	3,6	;RP1=0, select bank0
  4597  07AE  0809               	movf	9,w	;volatile
  4598  07AF  39FD               	andlw	253
  4599  07B0  3802               	iorlw	2
  4600  07B1  00F0               	movwf	??i1_LCD_latch
  4601  07B2  0870               	movf	??i1_LCD_latch,w
  4602  07B3  0089               	movwf	9	;volatile
  4603                           
  4604                           ;LCD.c: 226:     _delay((unsigned long)((1)*(8000000/4000000.0)));
  4605  07B4  2FB5               	nop2	;2 cycle nop
  4606                           
  4607                           ;LCD.c: 227:     ((((((*((volatile tRegister8 *)(0x09))).Reg))) = (((((*((volatile tRegi
      +                          ster8 *)(0x09))).Reg)) & (~(1 << ((1))))) | ((0) << ((1))))));
  4608  07B5  1283               	bcf	3,5	;RP0=0, select bank0
  4609  07B6  1303               	bcf	3,6	;RP1=0, select bank0
  4610  07B7  0809               	movf	9,w	;volatile
  4611  07B8  39FD               	andlw	253
  4612  07B9  00F0               	movwf	??i1_LCD_latch
  4613  07BA  0870               	movf	??i1_LCD_latch,w
  4614  07BB  0089               	movwf	9	;volatile
  4615                           
  4616                           ;LCD.c: 228:     _delay((unsigned long)((1)*(8000000/4000000.0)));
  4617  07BC  2FBD               	nop2	;2 cycle nop
  4618  07BD  0008               	return
  4619  07BE                     __end_ofi1_LCD_latch:	
  4620                           
  4621                           	psect	text29
  4622  0530                     __ptext29:	
  4623 ;; *************** function ___lwdiv *****************
  4624 ;; Defined at:
  4625 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwdiv.c"
  4626 ;; Parameters:    Size  Location     Type
  4627 ;;  divisor         2    0[COMMON] unsigned int 
  4628 ;;  dividend        2    2[COMMON] unsigned int 
  4629 ;; Auto vars:     Size  Location     Type
  4630 ;;  quotient        2    5[COMMON] unsigned int 
  4631 ;;  counter         1    7[COMMON] unsigned char 
  4632 ;; Return value:  Size  Location     Type
  4633 ;;                  2    0[COMMON] unsigned int 
  4634 ;; Registers used:
  4635 ;;		wreg, status,2, status,0
  4636 ;; Tracked objects:
  4637 ;;		On entry : 0/0
  4638 ;;		On exit  : 0/0
  4639 ;;		Unchanged: 0/0
  4640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4641 ;;      Params:         4       0       0       0       0
  4642 ;;      Locals:         3       0       0       0       0
  4643 ;;      Temps:          1       0       0       0       0
  4644 ;;      Totals:         8       0       0       0       0
  4645 ;;Total ram usage:        8 bytes
  4646 ;; Hardware stack levels used:    1
  4647 ;; This function calls:
  4648 ;;		Nothing
  4649 ;; This function is called by:
  4650 ;;		_DSP_update
  4651 ;; This function uses a non-reentrant model
  4652 ;;
  4653                           
  4654                           
  4655                           ;psect for function ___lwdiv
  4656  0530                     ___lwdiv:	
  4657                           
  4658                           ;incstack = 0
  4659 ;; hardware stack exceeded
  4660                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  4661  0530  01F5               	clrf	___lwdiv@quotient
  4662  0531  01F6               	clrf	___lwdiv@quotient+1
  4663  0532  0870               	movf	___lwdiv@divisor,w
  4664  0533  0471               	iorwf	___lwdiv@divisor+1,w
  4665  0534  1903               	btfsc	3,2
  4666  0535  2D67               	goto	i1l1635
  4667  0536  01F7               	clrf	___lwdiv@counter
  4668  0537  0AF7               	incf	___lwdiv@counter,f
  4669  0538                     i1l1623:	
  4670  0538  1BF1               	btfsc	___lwdiv@divisor+1,7
  4671  0539  2D46               	goto	i1l1625
  4672  053A  3001               	movlw	1
  4673  053B                     u141_25:	
  4674  053B  1003               	clrc
  4675  053C  0DF0               	rlf	___lwdiv@divisor,f
  4676  053D  0DF1               	rlf	___lwdiv@divisor+1,f
  4677  053E  3EFF               	addlw	-1
  4678  053F  1D03               	skipz
  4679  0540  2D3B               	goto	u141_25
  4680  0541  3001               	movlw	1
  4681  0542  00F4               	movwf	??___lwdiv
  4682  0543  0874               	movf	??___lwdiv,w
  4683  0544  07F7               	addwf	___lwdiv@counter,f
  4684  0545  2D38               	goto	i1l1623
  4685  0546                     i1l1625:	
  4686  0546  3001               	movlw	1
  4687  0547                     u143_25:	
  4688  0547  1003               	clrc
  4689  0548  0DF5               	rlf	___lwdiv@quotient,f
  4690  0549  0DF6               	rlf	___lwdiv@quotient+1,f
  4691  054A  3EFF               	addlw	-1
  4692  054B  1D03               	skipz
  4693  054C  2D47               	goto	u143_25
  4694  054D  0871               	movf	___lwdiv@divisor+1,w
  4695  054E  0273               	subwf	___lwdiv@dividend+1,w
  4696  054F  1D03               	skipz
  4697  0550  2D53               	goto	u144_25
  4698  0551  0870               	movf	___lwdiv@divisor,w
  4699  0552  0272               	subwf	___lwdiv@dividend,w
  4700  0553                     u144_25:	
  4701  0553  1C03               	skipc
  4702  0554  2D5C               	goto	i1l1631
  4703  0555  0870               	movf	___lwdiv@divisor,w
  4704  0556  02F2               	subwf	___lwdiv@dividend,f
  4705  0557  0871               	movf	___lwdiv@divisor+1,w
  4706  0558  1C03               	skipc
  4707  0559  03F3               	decf	___lwdiv@dividend+1,f
  4708  055A  02F3               	subwf	___lwdiv@dividend+1,f
  4709  055B  1475               	bsf	___lwdiv@quotient,0
  4710  055C                     i1l1631:	
  4711  055C  3001               	movlw	1
  4712  055D                     u145_25:	
  4713  055D  1003               	clrc
  4714  055E  0CF1               	rrf	___lwdiv@divisor+1,f
  4715  055F  0CF0               	rrf	___lwdiv@divisor,f
  4716  0560  3EFF               	addlw	-1
  4717  0561  1D03               	skipz
  4718  0562  2D5D               	goto	u145_25
  4719  0563  3001               	movlw	1
  4720  0564  02F7               	subwf	___lwdiv@counter,f
  4721  0565  1D03               	btfss	3,2
  4722  0566  2D46               	goto	i1l1625
  4723  0567                     i1l1635:	
  4724  0567  0876               	movf	___lwdiv@quotient+1,w
  4725  0568  00F1               	movwf	?___lwdiv+1
  4726  0569  0875               	movf	___lwdiv@quotient,w
  4727  056A  00F0               	movwf	?___lwdiv
  4728  056B  0008               	return
  4729  056C                     __end_of___lwdiv:	
  4730                           
  4731                           	psect	text30
  4732  07BE                     __ptext30:	
  4733 ;; *************** function _SLIDER_getVal *****************
  4734 ;; Defined at:
  4735 ;;		line 36 in file "SLIDER.c"
  4736 ;; Parameters:    Size  Location     Type
  4737 ;;  pVal            1    wreg     PTR unsigned short 
  4738 ;;		 -> DSP_update@slider(2), 
  4739 ;; Auto vars:     Size  Location     Type
  4740 ;;  pVal            1    0[COMMON] PTR unsigned short 
  4741 ;;		 -> DSP_update@slider(2), 
  4742 ;; Return value:  Size  Location     Type
  4743 ;;                  1    wreg      void 
  4744 ;; Registers used:
  4745 ;;		wreg, fsr0l, fsr0h
  4746 ;; Tracked objects:
  4747 ;;		On entry : 0/0
  4748 ;;		On exit  : 0/0
  4749 ;;		Unchanged: 0/0
  4750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4751 ;;      Params:         0       0       0       0       0
  4752 ;;      Locals:         1       0       0       0       0
  4753 ;;      Temps:          0       0       0       0       0
  4754 ;;      Totals:         1       0       0       0       0
  4755 ;;Total ram usage:        1 bytes
  4756 ;; Hardware stack levels used:    1
  4757 ;; This function calls:
  4758 ;;		Nothing
  4759 ;; This function is called by:
  4760 ;;		_DSP_update
  4761 ;; This function uses a non-reentrant model
  4762 ;;
  4763                           
  4764                           
  4765                           ;psect for function _SLIDER_getVal
  4766  07BE                     _SLIDER_getVal:	
  4767                           
  4768                           ;incstack = 0
  4769 ;; hardware stack exceeded
  4770                           ; Regs used in _SLIDER_getVal: [wregfsr0]
  4771                           ;SLIDER_getVal@pVal stored from wreg
  4772  07BE  00F0               	movwf	SLIDER_getVal@pVal
  4773                           
  4774                           ;SLIDER.c: 38:     *pVal = SLIDER_val;
  4775  07BF  0870               	movf	SLIDER_getVal@pVal,w
  4776  07C0  0084               	movwf	4
  4777  07C1  1283               	bcf	3,5	;RP0=0, select bank0
  4778  07C2  1303               	bcf	3,6	;RP1=0, select bank0
  4779  07C3  083F               	movf	_SLIDER_val,w
  4780  07C4  1383               	bcf	3,7	;select IRP bank0
  4781  07C5  0080               	movwf	0
  4782  07C6  0A84               	incf	4,f
  4783  07C7  0840               	movf	_SLIDER_val+1,w
  4784  07C8  0080               	movwf	0
  4785  07C9  0008               	return
  4786  07CA                     __end_of_SLIDER_getVal:	
  4787  007E                     btemp	set	126	;btemp
  4788  007E                     wtemp0	set	126


Data Sizes:
    Strings     10
    Constant    0
    Data        0
    BSS         33
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     27      60
    BANK1            80     16      16
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    LCD_str@str	PTR unsigned char  size(2) Largest target is 17
		 -> Convert_IntToString@nStr(BANK0[11]), DSP_update@str(BANK0[17]), STR_1(CODE[10]), 

    SLIDER_getVal@pVal	PTR unsigned short  size(1) Largest target is 2
		 -> DSP_update@slider(BANK0[2]), 

    ADC_read@pval	PTR unsigned short  size(1) Largest target is 2
		 -> SLIDER_val(BANK0[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _SLIDER_update->_ADC_read
    i1_LCD_str->i1_LCD_char
    i1_LCD_char->i1_LCD_goTo
    i1_LCD_goTo->i1_LCD_cmd
    i1_LCD_cmd->i1_LCD_out
    i1_LCD_out->i1_LCD_latch

Critical Paths under _main in BANK0

    _main->_timer0_init
    _timer0_init->_T0_counter_mode_state
    _timer0_init->_T0_timer_mode_state
    _timer0_init->_timer0_ovf_setState
    _timer0_init->_timer0_set_mode
    _timer0_init->_timer0_set_prescaller
    _SLIDER_init->_ADC_init
    _LCD_goTo->_LCD_cmd
    _LCD_init->_LCD_cmd
    _LCD_cmd->_LCD_out
    _LCD_out->_LCD_latch

Critical Paths under _ISR in BANK0

    _ISR->_DSP_update
    _DSP_update->i1_LCD_str
    i1_LCD_str->i1_LCD_char

Critical Paths under _main in BANK1

    _DSP_init->_LCD_str
    _LCD_str->_LCD_char
    _LCD_char->_LCD_goTo

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    3458
                                             15 BANK1      1     1      0
                           _DSP_init
                        _SLIDER_init
                _T0_timer_mode_state
                        _timer0_init
                      _timer0_reload
 ---------------------------------------------------------------------------------
 (1) _timer0_init                                          5     3      2     490
                                             23 BANK0      4     2      2
                                              0 BANK1      1     1      0
              _T0_counter_mode_state
                _T0_timer_mode_state
                _timer0_ovf_setState
                      _timer0_reload
                    _timer0_set_mode
              _timer0_set_prescaller
 ---------------------------------------------------------------------------------
 (2) _timer0_set_prescaller                                3     3      0      31
                                             20 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _timer0_set_mode                                      3     3      0      31
                                             20 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _timer0_reload                                        2     2      0      31
                                             20 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _timer0_ovf_setState                                  3     3      0      31
                                             20 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _T0_timer_mode_state                                  3     3      0      31
                                             20 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _T0_counter_mode_state                                3     3      0      31
                                             20 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _SLIDER_init                                          0     0      0       0
                           _ADC_init
 ---------------------------------------------------------------------------------
 (2) _ADC_init                                             1     1      0       0
                                             20 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DSP_init                                             0     0      0    2906
                           _LCD_init
                            _LCD_str
 ---------------------------------------------------------------------------------
 (2) _LCD_str                                              6     2      4    2317
                                              9 BANK1      6     2      4
                           _LCD_char
 ---------------------------------------------------------------------------------
 (3) _LCD_char                                             4     2      2    1482
                                              5 BANK1      4     2      2
                           _LCD_goTo
                            _LCD_out
 ---------------------------------------------------------------------------------
 (4) _LCD_goTo                                             5     4      1     713
                                              0 BANK1      5     4      1
                            _LCD_cmd
 ---------------------------------------------------------------------------------
 (2) _LCD_init                                             3     3      0     589
                                              0 BANK1      3     3      0
                            _LCD_cmd
 ---------------------------------------------------------------------------------
 (5) _LCD_cmd                                              2     2      0     527
                                             25 BANK0      2     2      0
                            _LCD_out
 ---------------------------------------------------------------------------------
 (4) _LCD_out                                              4     4      0     496
                                             21 BANK0      4     4      0
                          _LCD_latch
 ---------------------------------------------------------------------------------
 (5) _LCD_latch                                            1     1      0       0
                                             20 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _ISR                                                  7     7      0    1778
                                             13 BANK0      7     7      0
                         _DSP_update
                      _SLIDER_update
                    i1_timer0_reload
 ---------------------------------------------------------------------------------
 (9) i1_timer0_reload                                      2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (9) _SLIDER_update                                        1     1      0     144
                                              6 COMMON     1     1      0
                           _ADC_read
 ---------------------------------------------------------------------------------
 (10) _ADC_read                                            6     5      1     144
                                              0 COMMON     6     5      1
 ---------------------------------------------------------------------------------
 (9) _DSP_update                                           5     5      0    1612
                                              8 BANK0      5     5      0
                      _SLIDER_getVal
                            ___lwdiv
                          i1_LCD_str
 ---------------------------------------------------------------------------------
 (10) i1_LCD_str                                           6     2      4    1105
                                              2 BANK0      6     2      4
                         i1_LCD_char
 ---------------------------------------------------------------------------------
 (11) i1_LCD_char                                          4     2      2     937
                                             12 COMMON     2     0      2
                                              0 BANK0      2     2      0
                         i1_LCD_goTo
                          i1_LCD_out
 ---------------------------------------------------------------------------------
 (12) i1_LCD_goTo                                          5     4      1     467
                                              7 COMMON     5     4      1
                          i1_LCD_cmd
 ---------------------------------------------------------------------------------
 (13) i1_LCD_cmd                                           2     2      0     374
                                              5 COMMON     2     2      0
                          i1_LCD_out
 ---------------------------------------------------------------------------------
 (12) i1_LCD_out                                           4     4      0     352
                                              1 COMMON     4     4      0
                        i1_LCD_latch
 ---------------------------------------------------------------------------------
 (13) i1_LCD_latch                                         1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) ___lwdiv                                             8     4      4     314
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (10) _SLIDER_getVal                                       1     1      0      55
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DSP_init
     _LCD_init
       _LCD_cmd
         _LCD_out
           _LCD_latch
     _LCD_str
       _LCD_char
         _LCD_goTo
           _LCD_cmd
             _LCD_out
               _LCD_latch
         _LCD_out
           _LCD_latch
   _SLIDER_init
     _ADC_init
   _T0_timer_mode_state
   _timer0_init
     _T0_counter_mode_state
     _T0_timer_mode_state
     _timer0_ovf_setState
     _timer0_reload
     _timer0_set_mode
     _timer0_set_prescaller
   _timer0_reload

 _ISR (ROOT)
   _DSP_update
     _SLIDER_getVal
     ___lwdiv
     i1_LCD_str
       i1_LCD_char
         i1_LCD_goTo
           i1_LCD_cmd
             i1_LCD_out
               i1_LCD_latch
         i1_LCD_out
           i1_LCD_latch
   _SLIDER_update
     _ADC_read
   i1_timer0_reload

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      5A       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     1B      3C       5       75.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50     10      10       7       20.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      5A      12        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Mon Sep 16 23:40:00 2019

                             pc 0002                     __CFG_CP$OFF 0000                              l79 05D8  
                            fsr 0004                             l120 06A1                             l130 06D2  
                           l122 06B5                             l140 041C                             l141 0423  
                           l126 06BA                             l118 069D                             l150 0684  
                           l142 042A                             l134 03F9                             l128 06BE  
                           l160 0706                             l152 0698                             l136 0400  
                           l144 0453                             l137 0407                             l138 040E  
                           l139 0415                             l156 06F1                             l148 0680  
                           l158 06F4                    __CFG_CPD$OFF 0000                             _ISR 056C  
                           fsr0 0004                             indf 0000                    __CFG_FOSC$HS 0000  
                 DSP_update@str 0023         __end_ofi1_timer0_reload 07E2                    __CFG_LVP$OFF 0000  
                          ?_ISR 0070                 __end_of_LCD_cmd 074D                 __end_of_LCD_out 0189  
                          l2101 0431                            l2025 00E0                 __end_of_LCD_str 0530  
                          l2113 0688                            l2053 0394                            l2125 06F6  
                          l2151 04CC                            l2081 04F1                            l2137 06C2  
                          l2153 04D3                            l2069 03CB                            l2157 04DA  
                          l2159 04EC                            l2089 06A5                            l2391 06FE  
                          l2393 06AD                            l2385 04E4                            l2395 06CA  
                          l2387 0439                            l2389 0690                            STR_1 06E3  
                          u2005 0727                            u2107 0085                            u2117 00DC  
                          u2057 039A                            u2067 03AA                            u2077 03BA  
                          u2087 03EF                            u2097 0749                            u1805 0068  
                          u1815 0071                            u1905 0115                            u1825 009A  
                          u1915 011E                            u1835 00A8                            u1755 0029  
                          u1925 012C                            u1845 00B1                            u1765 003A  
                          u1935 0135                            u1855 00BF                            u1775 0043  
                          u1945 0143                            u1865 00C8                            u1785 0051  
                          u1955 014C                            u1875 00F0                            u1795 005A  
                          i1l12 0624                            u1965 015A                            u1885 00FE  
                          u1975 0163                            u1895 0107                            u1985 0171  
                          u1995 017A                            i1l88 0599                     ?i1_LCD_char 007C  
                   ?i1_LCD_goTo 0077     __end_of_timer0_ovf_setState 0707                    __CFG_WRT$OFF 0000  
                          _main 05A6                            btemp 007E          ?_T0_counter_mode_state 0070  
                   ?_DSP_update 0070                   __CFG_BOREN$ON 0000                            start 0012  
              __end_of_ADC_init 065C                __end_of_ADC_read 0638              __size_of_LCD_latch 0012  
                         ??_ISR 004E           __end_of_SLIDER_getVal 07CA              __size_ofi1_LCD_cmd 0013  
            __size_ofi1_LCD_out 0165              __size_ofi1_LCD_str 0031  __size_of_timer0_set_prescaller 005F  
 __end_of_timer0_set_prescaller 0454                __end_of_LCD_char 067C                __end_of_LCD_goTo 0737  
         __end_of_SLIDER_update 0761                __end_of_LCD_init 03F5                           ?_main 0070  
                 __CFG_WDTE$OFF 0000                __end_of_DSP_init 079A                 __end_of___lwdiv 056C  
                  ?i1_LCD_latch 0070                   __CFG_PWRTE$ON 0000                 _timer0_set_mode 067C  
          timer0_ovf_setState@o 0057                     LCD_char@col 00A6                           pclath 000A  
                   LCD_goTo@col 00A0                           status 0003                           wtemp0 007E  
               __initialization 0015                    __end_of_main 05D9                     LCD_out@data 0059  
           __size_ofi1_LCD_char 001A             __size_ofi1_LCD_goTo 0014                    ?_SLIDER_init 0070  
                        ??_main 00AF                     LCD_str@line 00AB             __size_of_DSP_update 005E  
                     ??_LCD_cmd 005A                       ??_LCD_out 0056                       ??_LCD_str 00AD  
             __end_of_LCD_latch 07AC                ?i1_timer0_reload 0070                          _ADRESH 001E  
                        _ADRESL 009E               __end_ofi1_LCD_cmd 0788               __end_ofi1_LCD_out 02EE  
             __end_ofi1_LCD_str 060A                          u110_25 01AC                          u111_25 01BA  
                        u120_25 0255                          u112_25 01C3                          i1l1631 055C  
                        i1l1623 0538                          i1l1447 0245                          i1l1625 0546  
                        i1l1635 0567                          u121_25 0263                          u113_25 01D1  
                        i1l1647 05D9                          i1l1683 046B                          u130_25 02C8  
                        u122_25 026C                          u114_25 01DA                          i1l1685 0491  
                        i1l1689 049F                          u131_25 02D6                          u123_25 027A  
                        u115_25 0201                          u132_25 02DF                          u124_25 0283  
                        u116_25 020F                          u108_25 0192                          u212_27 061E  
                        u141_25 053B                          u125_25 0291                          u117_25 0218  
                        u109_25 01A3                          u213_27 0785                          u126_25 029A  
                        u118_25 0226                          u134_25 0765                          u150_25 0480  
                        u214_27 01EC                          u143_25 0547                          u127_25 02A8  
                        u119_25 022F                          u135_25 0611                          u215_27 0241  
                        u144_25 0553                          u128_25 02B1                          u145_25 055D  
                        u129_25 02BF                          u153_25 0571                          u154_20 057A  
                        u155_20 057B                          u156_25 057D                    ?_timer0_init 0058  
                     ??___lwdiv 0074                    LCD_char@line 00A5         __end_of_timer0_set_mode 0699  
  __size_of_T0_timer_mode_state 001D                          saved_w 007E                    LCD_goTo@line 00A3  
                     ?_ADC_init 0070                       ?_ADC_read 0070         __end_of__initialization 001C  
                     ?_LCD_char 00A5                       ?_LCD_goTo 00A0                       ?_LCD_init 0070  
                   DSP_update@i 004C                       ?_DSP_init 0070                    LCD_init@mode 00A2  
                __pcstackCOMMON 0070                DSP_update@slider 004A                  i1LCD_char@line 007C  
                    ??_ADC_init 0055                      ??_ADC_read 0071           __end_of_timer0_reload 07DA  
          __size_ofi1_LCD_latch 0012                  i1LCD_goTo@line 007A         ??_T0_counter_mode_state 0055  
                    __pbssBANK0 0020                    ??i1_LCD_char 0041                    ??i1_LCD_goTo 0078  
                    ??_LCD_char 00A7                    i1LCD_cmd@cmd 0076                    ??_DSP_update 0049  
                    ??_LCD_goTo 00A1                    i1LCD_char@ch 0042                      ??_LCD_init 00A0  
                    ??_DSP_init 005C                      __pmaintext 05A6                      __pintentry 0004  
                  i1LCD_str@col 0046                    i1LCD_str@str 0043                ?_timer0_set_mode 0070  
            __end_ofi1_LCD_char 0721              __end_ofi1_LCD_goTo 0775                         _LCD_cmd 0737  
                       _LCD_out 0020            __size_of_SLIDER_init 0004                         _LCD_str 04F1  
            __end_of_DSP_update 04B2            T0_timer_mode_state@s 0057                      __stringtab 06D3  
                    ADC_read@ch 0073    __size_of_timer0_ovf_setState 001A                         ___lwdiv 0530  
          __size_of_timer0_init 003F                         __ptext1 04B2                         __ptext2 03F5  
                       __ptext3 067C                         __ptext4 07D2                         __ptext5 06ED  
                       __ptext6 0699                         __ptext7 06B6                         __ptext8 07E2  
                       __ptext9 0638           _timer0_set_prescaller 03F5                    __size_of_ISR 003A  
       Convert_IntToString@nStr 0034               i1LCD_goTo@address 007B                         clrloop0 07CB  
          end_of_initialization 001C          __size_of_SLIDER_getVal 000C                       _LCD_latch 079A  
           _T0_timer_mode_state 0699          __size_of_SLIDER_update 0014                       i1_LCD_cmd 0775  
                     i1_LCD_out 0189                       i1_LCD_str 05D9            ?_T0_timer_mode_state 0070  
   SLIDER_update@SLIDER_counter 0022               __size_of_ADC_init 0024               __size_of_ADC_read 002E  
                    ?_LCD_latch 0070                      ?i1_LCD_cmd 0070                      ?i1_LCD_out 0070  
                    ?i1_LCD_str 0043        __size_ofi1_timer0_reload 0008               __size_of_LCD_char 0020  
             __size_of_LCD_goTo 0016               __size_of_LCD_init 0107                timer0_reload@val 0056  
             __size_of_DSP_init 0012                    ADC_read@pval 0070                   _SLIDER_getVal 07BE  
         ??_T0_timer_mode_state 0055          ?_timer0_set_prescaller 0070                      LCD_cmd@cmd 005B  
                 _SLIDER_update 074D                      LCD_char@ch 00A8                timer0_set_mode@m 0057  
           start_initialization 0015                     __end_of_ISR 05A6                      LCD_str@col 00AC  
                    LCD_str@str 00A9  __size_of_T0_counter_mode_state 001D   __end_of_T0_counter_mode_state 06D3  
                   _ADC_read$58 0074                  ?_SLIDER_getVal 0070                  ?_SLIDER_update 0070  
                 ??i1_LCD_latch 0070                        ?_LCD_cmd 0070                        ?_LCD_out 0070  
                      ?_LCD_str 00A9                       ___latbits 0002                   __pcstackBANK0 0041  
                 __pcstackBANK1 00A0             _timer0_ovf_setState 06ED                     ??_LCD_latch 0055  
                 i1LCD_char@col 007D                   i1LCD_goTo@col 0077                     ??i1_LCD_cmd 0075  
                   ??i1_LCD_out 0071                     ??i1_LCD_str 0047                ___lwdiv@dividend 0072  
          ?_timer0_ovf_setState 0070          __size_of_timer0_reload 0008                        ?___lwdiv 0070  
             ??i1_timer0_reload 0070                   ??_SLIDER_init 0056                       __pstrings 06D3  
                 i1LCD_out@data 0074                   i1LCD_str@line 0045                        _ADC_init 0638  
                      _ADC_read 060A        __size_of_timer0_set_mode 001D                ___lwdiv@quotient 0075  
           __end_ofi1_LCD_latch 07BE               interrupt_function 0004              i1timer0_reload@val 0071  
                      _LCD_char 065C               SLIDER_getVal@pVal 0070                        _LCD_goTo 0721  
                      _LCD_init 02EE                       clear_ram0 07CA                        _DSP_init 0788  
         ??_timer0_ovf_setState 0055                 ??_SLIDER_getVal 0070                   ??_timer0_init 005A  
               ??_SLIDER_update 0076                     __stringbase 06E2           DSP_update@DSP_counter 0021  
              __size_of_LCD_cmd 0016                __size_of_LCD_out 0169                __size_of_LCD_str 003F  
           __end_of_SLIDER_init 07E6                   _timer0_reload 07D2         ??_timer0_set_prescaller 0055  
              __size_of___lwdiv 003C              __end_of__stringtab 06E3             __end_of_timer0_init 04F1  
                   _currentMode 0020                     i1_LCD_latch 07AC                 ___lwdiv@divisor 0070  
               ___lwdiv@counter 0077                  ?_timer0_reload 0070                        __ptext10 0788  
                      __ptext11 04F1                        __ptext20 074D                        __ptext12 065C  
                      __ptext21 060A                        __ptext13 0721                        __ptext30 07BE  
                      __ptext22 0454                        __ptext14 02EE                        __ptext23 05D9  
                      __ptext15 0737                        __ptext24 0707                        __ptext16 0020  
                      __ptext25 0761                        __ptext17 079A                        __ptext26 0775  
                      __ptext18 056C                        __ptext27 0189                        __ptext19 07DA  
                      __ptext28 07AC                        __ptext29 0530                 LCD_goTo@address 00A4  
                 __size_of_main 0033               ??_timer0_set_mode 0055     __end_of_T0_timer_mode_state 06B6  
                   _SLIDER_init 07E2                    timer0_init@m 0058                    timer0_init@o 0059  
                  timer0_init@p 00A0                        intlevel1 0000                      i1_LCD_char 0707  
                    i1_LCD_goTo 0761                 i1_timer0_reload 07DA                      _DSP_update 0454  
         _T0_counter_mode_state 06B6                       stringcode 06DD                     _timer0_init 04B2  
                    _SLIDER_val 003F                 ??_timer0_reload 0055                        stringdir 06DD  
                      stringtab 06D3          timer0_set_prescaller@p 0057          T0_counter_mode_state@s 0057  
